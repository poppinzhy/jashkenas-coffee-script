#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

module CoffeeScript

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 460)
  # Lex and parse a CoffeeScript.
  def parse(code)
    # Uncomment the following line to enable grammar debugging, in combination
    # with the -g flag in the Rake build task.
    # @yydebug = true
    @tokens = Lexer.new.tokenize(code)
    do_parse
  end

  # Retrieve the next token from the list.
  def next_token
    @tokens.shift
  end

  # Raise a custom error class that knows about line numbers.
  def on_error(error_token_id, error_value, value_stack)
    raise ParseError.new(token_to_str(error_token_id), error_value, value_stack)
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'134,54,143,27,30,33,38,42,45,51,56,60,63,102,103,104,181,247,102,103',
'104,262,100,270,101,286,287,100,46,101,57,64,130,135,102,103,104,151',
'54,262,299,164,123,100,170,101,46,49,280,199,8,14,190,123,188,185,142',
'147,150,154,157,159,161,167,129,133,138,141,146,149,153,156,160,163',
'166,128,132,137,140,145,148,152,155,158,162,165,127,131,136,139,144',
'171,12,180,8,14,201,25,278,31,34,12,40,204,27,30,33,38,42,45,51,56,60',
'63,199,54,8,14,2,54,96,20,24,54,199,54,96,41,93,293,52,57,64,65,93,265',
'187,96,7,13,54,21,209,32,35,93,282,46,49,142,147,72,3,67,71,74,5,10',
'16,8,14,201,46,311,37,44,198,262,46,8,14,201,142,147,46,119,96,294,54',
'46,8,14,190,96,93,-185,-185,8,14,-185,-185,93,290,72,3,212,213,54,25',
'54,31,34,12,40,194,27,30,33,38,42,45,51,56,60,63,195,8,14,46,2,94,113',
'20,24,196,46,279,94,41,8,14,52,57,64,65,-185,-185,-185,-185,7,13,108',
'21,277,32,35,142,147,46,49,78,102,103,104,67,71,74,5,10,16,100,257,101',
'206,207,37,44,142,147,150,154,157,159,161,167,129,133,138,141,146,149',
'153,156,160,163,166,128,132,137,140,212,213,-185,-185,72,3,-185,-185',
'316,25,179,31,34,12,40,208,27,30,33,38,42,45,51,56,60,63,102,103,104',
'81,2,286,287,20,24,100,211,101,78,41,8,14,52,57,64,65,142,147,-185,-185',
'7,13,81,21,289,32,35,-185,-185,46,49,,102,103,104,67,71,74,5,10,16,100',
',101,8,14,37,44,142,147,150,154,157,159,161,167,129,133,138,141,146',
'149,153,156,160,163,166,128,132,137,140,,,,,72,3,,,,25,,31,34,12,40',
',27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,',
',,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,142,147,150',
'154,157,159,161,167,129,133,138,141,146,149,153,156,160,163,166,128',
'132,137,140,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60',
'63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,',
',,67,71,74,5,10,16,,,,,,37,44,142,147,150,154,157,159,161,167,129,133',
'138,141,146,149,153,156,160,163,166,128,132,137,140,,,,,72,3,,,,25,',
'31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52',
'57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44',
'142,147,150,154,157,159,161,167,129,133,138,141,146,149,153,156,160',
'163,166,128,132,137,140,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42',
'45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35',
',,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,142,147,150,154,157,159,161',
'167,129,133,138,141,146,149,153,156,160,163,166,128,132,137,140,,,,',
'72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24',
',,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16',
',,,,,37,44,142,147,150,154,157,159,161,167,129,133,138,141,146,149,153',
'156,160,163,166,128,132,137,140,,,,,72,3,,,,25,,31,34,12,40,,27,30,33',
'38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21',
',32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,142,147,150,154,157,159',
'161,167,129,133,138,141,146,149,153,156,160,163,166,128,132,137,140',
',,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20',
'24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10',
'16,,,,,,37,44,142,147,150,154,157,159,161,167,129,133,138,141,146,149',
'153,142,147,150,154,157,159,161,167,129,,,,72,3,,,,25,,31,34,12,40,',
'27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,',
',7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,142,147,150',
'154,157,159,161,167,129,133,138,141,146,149,153,142,147,150,154,157',
'159,161,167,129,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56',
'60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49',
',,,,67,71,74,5,10,16,,,,,,37,44,142,147,150,154,157,159,161,167,129',
'133,138,141,146,149,153,142,147,150,154,157,159,161,167,129,,,,72,3',
',,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,',
'41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,',
',,,37,44,142,147,150,154,157,159,161,167,129,133,138,141,146,149,153',
'142,147,150,154,157,159,161,167,129,,,,72,3,,,,25,,31,34,12,40,,27,30',
'33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13',
',21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,142,147,150,154,157',
'159,161,167,129,142,147,150,154,157,159,161,167,129,142,147,150,154',
'157,159,161,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63',
',,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67',
'71,74,5,10,16,,,,,,37,44,142,147,150,154,157,159,161,,,,,,,,,,,,,,,',
',,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,',
'20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,110,,,,67,71',
'74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12',
'40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65',
',,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,312,37,44,,,,,',
',,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51',
'56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46',
'49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,',
',,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41',
',,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,',
'37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38',
'42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32',
'35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,',
',,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20',
'24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10',
'16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27',
'30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7',
'13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,',
',,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63',
',,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67',
'71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34',
'12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64',
'65,,,,,7,13,,21,,32,35,,,46,49,,120,,,67,71,74,5,10,16,,,,,,37,44,,',
',,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45',
'51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,',
',46,49,,,,,67,71,74,5,10,16,,,,,302,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,',
',72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24',
',,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16',
',,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30',
'33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13',
',21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,',
',,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,',
',2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71',
'74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12',
'40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65',
',,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,',
',,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56',
'60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49',
',,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25',
',31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52',
'57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44',
',,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45',
'51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,',
',46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72',
'3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,',
',,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16',
',,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30',
'33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13',
',21,,32,35,,,46,49,274,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,',
',,,,,,,,,,,,,72,3,8,14,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60',
'63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,',
',,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25',
',31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52',
'57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44',
',,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45',
'51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,',
',46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72',
'3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,',
',,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16',
',,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30',
'33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13',
',21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,',
',,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,',
',2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71',
'74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12',
'40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65',
',,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,',
',,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56',
'60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49',
',,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25',
',31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52',
'57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44',
',,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45',
'51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,',
',46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72',
'3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,',
',,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16',
',,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30',
'33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13',
',21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,',
',,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,',
',2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71',
'74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12',
'40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65',
',,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,',
',,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56',
'60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49',
',,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25',
',31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52',
'57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44',
',,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45',
'51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,',
',46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72',
'3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,',
',,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,110,,,,67,71,74,5,10',
'16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27',
'30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7',
'13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,',
',,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63',
',,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67',
'71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34',
'12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64',
'65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,',
',,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51',
'56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46',
'49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,',
',,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41',
',,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,',
'37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38',
'42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32',
'35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,',
',,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20',
'24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10',
'16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27',
'30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7',
'13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,',
',,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63',
',,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,110,',
',,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25',
',31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52',
'57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44',
',,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45',
'51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,',
',46,49,54,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'72,3,8,14,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20',
'24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10',
'16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27',
'30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7',
'13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,',
',,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63',
',,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67',
'71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34',
'12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64',
'65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,',
',,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51',
'56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46',
'49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,',
',,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41',
',,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,',
'37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38',
'42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32',
'35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,',
',,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20',
'24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10',
'16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27',
'30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7',
'13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,',
',,,,,,,,,,,,,72,3,,,,25,,31,34,12,40,,27,30,33,38,42,45,51,56,60,63',
',,,,2,,,20,24,,,,,41,,,52,57,64,65,,,,,7,13,,21,,32,35,,,46,49,,,,,67',
'71,74,5,10,16,,,,,,37,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,25,,31,34',
'12,40,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64',
'65,,,,,7,13,,21,,32,35,,,46,49,134,,143,,67,71,74,5,10,16,,,,,,37,44',
',,,,,,,,,,,,,,,130,135,,,,151,,,,164,,,72,3,,,,25,,31,34,,40,,142,147',
'150,154,157,159,161,167,129,133,138,141,146,149,153,156,160,163,166',
'128,132,137,140,145,148,152,155,158,162,165,127,131,136,139,144,134',
',143,,,,,,,,321,,,,,,,,,,,,,,,,,,,,,,130,135,,,,151,,,,164,,,,,,,,,',
',,,,,142,147,150,154,157,159,161,167,129,133,138,141,146,149,153,156',
'160,163,166,128,132,137,140,145,148,152,155,158,162,165,127,131,136',
'139,144,27,30,33,38,42,45,51,56,60,63,315,,,,2,,,20,24,,,,,41,,,52,57',
'64,,,,,,,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,,,,,,27,30',
'33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,72,3,52,57,64,25,,31,34',
',40,13,,21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,,,,,,,,,,27,30,33,38',
'42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,72,3,52,57,64,25,,31,34,,40,13',
',21,,32,35,,,46,49,,,,,67,71,74,5,10,16,,27,30,33,38,42,45,51,56,60',
'63,,,,,,,,,,,,,,,,,,57,64,,,,,72,3,,,,25,,31,34,,40,49,,,,,,,,,,,,,',
',,,,,27,30,33,38,42,45,51,56,60,63,,,,,2,,,20,24,,,,,41,,,52,57,64,65',
',25,,31,34,13,40,21,,32,35,,,46,49,134,,143,,67,71,74,5,10,16,,,,,,37',
'44,,,,,,,,,,,,,,,,130,135,,,,151,,,,164,,,72,3,,,,25,,31,34,,40,,142',
'147,150,154,157,159,161,167,129,133,138,141,146,149,153,156,160,163',
'166,128,132,137,140,145,148,152,155,158,162,165,127,131,136,139,144',
'134,,143,,,,,,,,,,,,,,,,,,,,,,,322,,,,,,,130,135,,,,151,,,,164,,,,,',
',,,,,,,,,142,147,150,154,157,159,161,167,129,133,138,141,146,149,153',
'156,160,163,166,128,132,137,140,145,148,152,155,158,162,165,127,131',
'136,139,144,134,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,130,135,,,,151,,,',
'164,,,,,,,,,,,,,,,142,147,150,154,157,159,161,167,129,133,138,141,146',
'149,153,156,160,163,166,128,132,137,140,145,148,152,155,158,162,165',
'127,131,136,139,144,134,,143,,,,,,,,,,,,,,,,,,,,,,,320,,,,,,,130,135',
',,,151,,,,164,,,,,,,,,,,,,,,142,147,150,154,157,159,161,167,129,133',
'138,141,146,149,153,156,160,163,166,128,132,137,140,145,148,152,155',
'158,162,165,127,131,136,139,144,134,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,130,135,,,,151,,,,164,,,,,,,,,,,,,,,142,147,150,154,157,159,161,167',
'129,133,138,141,146,149,153,156,160,163,166,128,132,137,140,145,148',
'152,155,158,162,165,127,131,136,139,144,134,,143,,,,,,,,,,,,,,,,,,,',
',,,271,,,,,,,130,135,,,,151,,,,164,,,,,,,,,,,,,,,142,147,150,154,157',
'159,272,167,129,133,138,141,146,149,153,156,160,163,166,128,132,137',
'140,145,148,152,155,158,162,165,127,131,136,139,144,134,,143,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,130,135,,,,151,,,,164,,,,,,,,,,,,,,,142,147,150',
'154,157,159,161,167,129,133,138,141,146,149,153,156,160,163,166,128',
'132,137,140,145,148,152,155,158,162,165,127,131,136,139,144,134,,143',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,130,135,,,,151,,,,164,,,,,,,,,,,,,,,142',
'147,150,154,157,159,161,167,129,133,138,141,146,149,153,156,160,163',
'166,128,132,137,140,145,148,152,155,158,162,165,127,131,136,139,144',
'134,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,130,135,,,,151,,,,164,,,,,,,,',
',,,,,,142,147,150,154,157,159,161,167,129,133,138,141,146,149,153,156',
'160,163,166,128,132,137,140,145,148,152,155,158,162,165,127,131,136',
'139,144,134,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,130,135,,,,151,,,,164',
',,,,,,,,,,,,,,142,147,150,154,157,159,161,167,129,133,138,141,146,149',
'153,156,160,163,166,128,132,137,140,145,148,152,155,158,162,165,127',
'131,136,139,144,134,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,130,135,,,,151',
',,,164,,,,,,,,,,,,,,,142,147,150,154,157,159,202,167,129,133,138,141',
'146,149,153,156,160,163,166,128,132,137,140,145,148,152,155,158,162',
'165,127,131,136,139,144,134,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,130,135',
',,,151,,,,164,,,,,,,,,,,,,,,142,147,150,154,157,159,161,167,129,133',
'138,141,146,149,153,156,160,163,166,128,132,137,140,145,148,152,155',
'158,162,165,127,131,136,139,144,134,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,130,135,,,,151,,,,164,,,,,,,,,,,,,,,142,147,150,154,157,159,161,167',
'129,133,138,141,146,149,153,156,160,163,166,128,132,137,140,145,148',
'152,155,158,162,165,127,131,136,139,144,134,,143,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,130,135,,,,151,,,,164,,,,,,,,,,,,,,,142,147,150,154,157,159',
'161,167,129,133,138,141,146,149,153,156,160,163,166,128,132,137,140',
'145,148,152,155,158,162,165,127,131,136,139,144,134,,143,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,130,135,,,,151,,,,164,,,,,,,,,,,,,,,142,147,150,154',
'157,159,161,167,129,133,138,141,146,149,153,156,160,163,166,128,132',
'137,140,145,148,152,155,158,162,165,127,131,136,139,144,134,,143,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,130,135,,,,151,,,,164,,,,,,,54,,,,,,,,142',
'147,150,154,157,159,161,167,129,133,138,141,146,149,153,156,160,163',
'166,128,132,137,140,145,148,152,155,158,162,165,127,131,136,139,144',
'134,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,130,135,,,,151,,,,164,,,,,,,54',
',,,,,,,142,147,150,154,157,159,161,167,129,133,138,141,146,149,153,156',
'160,163,166,128,132,137,140,145,148,152,155,158,162,165,127,131,136',
'139,144,134,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,130,135,,,,151,,,,164',
',,,,,,184,,,,,,,,142,147,150,154,157,159,161,167,129,133,138,141,146',
'149,153,156,160,163,166,128,132,137,140,145,148,152,155,158,162,165',
'127,131,136,139,144,134,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,130,135,,',
',151,,,,164,,,,,,,,,,,,,,,142,147,150,154,157,159,161,167,129,133,138',
'141,146,149,153,156,160,163,166,128,132,137,140,145,148,152,155,158',
'162,165,127,131,136,139,144,134,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,130',
'135,,,,151,,,,164,,,,,,,,,,,,,,,142,147,150,154,157,159,161,167,129',
'133,138,141,146,149,153,156,160,163,166,128,132,137,140,145,148,152',
'155,158,162,165,127,131,136,139,144,134,,143,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,130,135,,,,151,,,,164,,,,,,,,,,,,,,,142,147,150,154,157,159,161',
'167,129,133,138,141,146,149,153,156,160,163,166,128,132,137,140,145',
'148,152,155,158,162,165,127,131,136,139,144,134,,143,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,130,135,,,,151,,,,164,,,,,,,,,,,,,,,142,147,150,154,157',
'159,161,167,129,133,138,141,146,149,153,156,160,163,166,128,132,137',
'140,145,148,152,155,158,162,165,127,131,136,139,144,130,135,,,,,,,,164',
',,,,,,,,,,,,,,142,147,150,154,157,159,161,167,129,133,138,141,146,149',
'153,156,160,163,166,128,132,137,140,145,148,152,155,158,162,165,127',
'131,136,139,144,130,135,,,,,,,,164,,,,,,,,,,,,,,,142,147,150,154,157',
'159,161,167,129,133,138,141,146,149,153,156,160,163,166,128,132,137',
'140,145,148,152,155,158,162,165,127,131,136,139,144,130,135,,,,,,,,164',
',,,,,,,,,,,,,,142,147,150,154,157,159,161,167,129,133,138,141,146,149',
'153,156,160,163,166,128,132,137,140,145,148,152,155,158,162,165,127',
'131,136,139,144,135,,,,,,,,164,,,,,,,,,,,,,,,142,147,150,154,157,159',
'161,167,129,133,138,141,146,149,153,156,160,163,166,128,132,137,140',
'145,148,152,155,158,162,165,127,131,136,139,144,135,,,,,,,,164,,,,,',
',,,,,,,,,142,147,150,154,157,159,161,167,129,133,138,141,146,149,153',
'156,160,163,166,128,132,137,140,145,148,152,155,158,162,165,127,131',
'136,139,144,135,,,,,,,,164,,,,,,,,,,,,,,,142,147,150,154,157,159,161',
'167,129,133,138,141,146,149,153,156,160,163,166,128,132,137,140,145',
'148,152,155,158,162,165,127,131,136,139,144,135,,,,,,,,164,,,,,,,,,',
',,,,,142,147,150,154,157,159,161,167,129,133,138,141,146,149,153,156',
'160,163,166,128,132,137,140,145,148,152,155,158,162,165,127,131,136',
'139,144,135,,,,,,,,164,,,,,,,,,,,,,,,142,147,150,154,157,159,161,167',
'129,133,138,141,146,149,153,156,160,163,166,128,132,137,140,145,148',
'152,155,158,162,165,127,131,136,139,144,164,,,,,,,,,,,,,,,142,147,150',
'154,157,159,161,167,129,133,138,141,146,149,153,156,160,163,166,128',
'132,137,140,145,148,152,155,158,162,165,127,131,136,139,144,164,,,,',
',,,,,,,,,,142,147,150,154,157,159,161,167,129,133,138,141,146,149,153',
'156,160,163,166,128,132,137,140,145,148,152,155,158,162,165,127,131',
'136,139,144,164,,,,,,,,,,,,,,,142,147,150,154,157,159,161,167,129,133',
'138,141,146,149,153,156,160,163,166,128,132,137,140,145,148,152,155',
'158,162,165,127,131,136,139,144,142,147,150,154,157,159,161,167,129',
'133,138,141,146,149,153,156,160,163,166,128,132,137,140,145,148,152',
'155,158,162,165,127,131,136,139,144,142,147,150,154,157,159,161,167',
'129,133,138,141,146,149,153,156,160,163,166,128,132,137,140,145,148',
'152,155,158,162,165,127,131,136,139,144,142,147,150,154,157,159,161',
'167,129,133,138,141,146,149,153,156,160,163,166,128,132,137,140,145',
'148,152,155,158,162,165,127,131,136,139,144,142,147,150,154,157,159',
'161,167,129,133,138,141,146,149,153,156,160,163,166,128,132,137,140',
'145,148,152,155,158,162,165,127,131,136,139,144,142,147,150,154,157',
'159,161,167,129,133,138,141,146,149,153,156,160,163,166,128,132,137',
'140,145,148,152,155,158,162,165,127,131,136,139,144,142,147,150,154',
'157,159,161,167,129,133,138,141,146,149,153,156,160,163,166,128,132',
'137,140,145,148,152,155,158,162,165,127,131,136,139,144,142,147,150',
'154,157,159,161,167,129,133,138,141,146,149,153,156,160,163,166,128',
'132,137,140,145,148,152,155,158,162,165,127,131,136,139,144,142,147',
'150,154,157,159,161,167,129,133,138,141,146,149,153,156,160,163,166',
'128,132,137,140,145,148,152,155,158,162,165,127,131,136,139,144' ]
        racc_action_table = arr = Array.new(10897, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'115,207,115,170,170,170,170,170,170,170,170,170,170,70,70,70,82,161',
'255,255,255,184,70,191,70,214,214,255,184,255,170,170,115,115,29,29',
'29,115,214,292,272,115,130,29,70,29,292,170,206,191,98,98,98,65,98,93',
'115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115',
'115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115',
'115,70,78,82,191,191,191,170,203,170,170,154,170,115,154,154,154,154',
'154,154,154,154,154,154,111,296,260,260,154,259,189,154,154,279,203',
'280,190,154,189,261,154,154,154,154,190,186,96,269,154,154,78,154,121',
'154,154,269,211,154,154,243,243,181,181,154,154,154,154,154,154,111',
'111,111,189,296,154,154,111,261,190,203,203,203,245,245,261,53,25,261',
'41,269,186,186,186,94,25,83,83,121,121,126,126,94,257,154,154,124,124',
'69,154,293,154,154,136,154,102,136,136,136,136,136,136,136,136,136,136',
'103,190,190,25,136,25,35,136,136,104,94,205,94,136,310,310,136,136,136',
'136,117,117,174,174,136,136,31,136,202,136,136,236,236,136,136,75,90',
'90,90,136,136,136,136,136,136,90,179,90,116,116,136,136,225,225,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225',
'225,225,225,218,218,114,114,136,136,173,173,309,136,81,136,136,5,136',
'119,5,5,5,5,5,5,5,5,5,5,254,254,254,2,5,288,288,5,5,254,123,254,1,5',
'66,66,5,5,5,5,240,240,85,85,5,5,180,5,247,5,5,88,88,5,5,,89,89,89,5',
'5,5,5,5,5,89,,89,61,61,5,5,241,241,241,241,241,241,241,241,241,241,241',
'241,241,241,241,241,241,241,241,241,241,241,241,,,,,5,5,,,,5,,5,5,7',
'5,,7,7,7,7,7,7,7,7,7,7,,,,,7,,,7,7,,,,,7,,,7,7,7,7,,,,,7,7,,7,,7,7,',
',7,7,,,,,7,7,7,7,7,7,,,,,,7,7,220,220,220,220,220,220,220,220,220,220',
'220,220,220,220,220,220,220,220,220,220,220,220,220,,,,,7,7,,,,7,,7',
'7,10,7,,10,10,10,10,10,10,10,10,10,10,,,,,10,,,10,10,,,,,10,,,10,10',
'10,10,,,,,10,10,,10,,10,10,,,10,10,,,,,10,10,10,10,10,10,,,,,,10,10',
'216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216',
'216,216,216,216,216,216,,,,,10,10,,,,10,,10,10,12,10,,12,12,12,12,12',
'12,12,12,12,12,,,,,12,,,12,12,,,,,12,,,12,12,12,12,,,,,12,12,,12,,12',
'12,,,12,12,,,,,12,12,12,12,12,12,,,,,,12,12,238,238,238,238,238,238',
'238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238',
',,,,12,12,,,,12,,12,12,13,12,,13,13,13,13,13,13,13,13,13,13,,,,,13,',
',13,13,,,,,13,,,13,13,13,13,,,,,13,13,,13,,13,13,,,13,13,,,,,13,13,13',
'13,13,13,,,,,,13,13,232,232,232,232,232,232,232,232,232,232,232,232',
'232,232,232,232,232,232,232,232,232,232,232,,,,,13,13,,,,13,,13,13,16',
'13,,16,16,16,16,16,16,16,16,16,16,,,,,16,,,16,16,,,,,16,,,16,16,16,16',
',,,,16,16,,16,,16,16,,,16,16,,,,,16,16,16,16,16,16,,,,,,16,16,234,234',
'234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234',
'234,234,234,234,,,,,16,16,,,,16,,16,16,135,16,,135,135,135,135,135,135',
'135,135,135,135,,,,,135,,,135,135,,,,,135,,,135,135,135,135,,,,,135',
'135,,135,,135,135,,,135,135,,,,,135,135,135,135,135,135,,,,,,135,135',
'228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228',
'228,228,228,228,228,228,,,,,135,135,,,,135,,135,135,21,135,,21,21,21',
'21,21,21,21,21,21,21,,,,,21,,,21,21,,,,,21,,,21,21,21,21,,,,,21,21,',
'21,,21,21,,,21,21,,,,,21,21,21,21,21,21,,,,,,21,21,249,249,249,249,249',
'249,249,249,249,249,249,249,249,249,249,221,221,221,221,221,221,221',
'221,221,,,,21,21,,,,21,,21,21,134,21,,134,134,134,134,134,134,134,134',
'134,134,,,,,134,,,134,134,,,,,134,,,134,134,134,134,,,,,134,134,,134',
',134,134,,,134,134,,,,,134,134,134,134,134,134,,,,,,134,134,252,252',
'252,252,252,252,252,252,252,252,252,252,252,252,252,229,229,229,229',
'229,229,229,229,229,,,,134,134,,,,134,,134,134,311,134,,311,311,311',
'311,311,311,311,311,311,311,,,,,311,,,311,311,,,,,311,,,311,311,311',
'311,,,,,311,311,,311,,311,311,,,311,311,,,,,311,311,311,311,311,311',
',,,,,311,311,246,246,246,246,246,246,246,246,246,246,246,246,246,246',
'246,233,233,233,233,233,233,233,233,233,,,,311,311,,,,311,,311,311,133',
'311,,133,133,133,133,133,133,133,133,133,133,,,,,133,,,133,133,,,,,133',
',,133,133,133,133,,,,,133,133,,133,,133,133,,,133,133,,,,,133,133,133',
'133,133,133,,,,,,133,133,242,242,242,242,242,242,242,242,242,242,242',
'242,242,242,242,239,239,239,239,239,239,239,239,239,,,,133,133,,,,133',
',133,133,132,133,,132,132,132,132,132,132,132,132,132,132,,,,,132,,',
'132,132,,,,,132,,,132,132,132,132,,,,,132,132,,132,,132,132,,,132,132',
',,,,132,132,132,132,132,132,,,,,,132,132,235,235,235,235,235,235,235',
'235,235,226,226,226,226,226,226,226,226,226,217,217,217,217,217,217',
'217,,,132,132,,,,132,,132,132,32,132,,32,32,32,32,32,32,32,32,32,32',
',,,,32,,,32,32,,,,,32,,,32,32,32,32,,,,,32,32,,32,,32,32,,,32,32,,,',
',32,32,32,32,32,32,,,,,,32,32,253,253,253,253,253,253,253,,,,,,,,,,',
',,,,,,,,,,32,32,,,,32,,32,32,34,32,,34,34,34,34,34,34,34,34,34,34,,',
',,34,,,34,34,,,,,34,,,34,34,34,34,,,,,34,34,,34,,34,34,,,34,34,34,,',
',34,34,34,34,34,34,,,,,,34,34,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,34,,,,34',
',34,34,299,34,,299,299,299,299,299,299,299,299,299,299,,,,,299,,,299',
'299,,,,,299,,,299,299,299,299,,,,,299,299,,299,,299,299,,,299,299,,',
',,299,299,299,299,299,299,,,,,299,299,299,,,,,,,,,,,,,,,,,,,,,,,,,,',
',299,299,,,,299,,299,299,37,299,,37,37,37,37,37,37,37,37,37,37,,,,,37',
',,37,37,,,,,37,,,37,37,37,37,,,,,37,37,,37,,37,37,,,37,37,,,,,37,37',
'37,37,37,37,,,,,,37,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,37,,,,37,,37,37',
'40,37,,40,40,40,40,40,40,40,40,40,40,,,,,40,,,40,40,,,,,40,,,40,40,40',
'40,,,,,40,40,,40,,40,40,,,40,40,,,,,40,40,40,40,40,40,,,,,,40,40,,,',
',,,,,,,,,,,,,,,,,,,,,,,,40,40,,,,40,,40,40,287,40,,287,287,287,287,287',
'287,287,287,287,287,,,,,287,,,287,287,,,,,287,,,287,287,287,287,,,,',
'287,287,,287,,287,287,,,287,287,,,,,287,287,287,287,287,287,,,,,,287',
'287,,,,,,,,,,,,,,,,,,,,,,,,,,,,287,287,,,,287,,287,287,44,287,,44,44',
'44,44,44,44,44,44,44,44,,,,,44,,,44,44,,,,,44,,,44,44,44,44,,,,,44,44',
',44,,44,44,,,44,44,,,,,44,44,44,44,44,44,,,,,,44,44,,,,,,,,,,,,,,,,',
',,,,,,,,,,,44,44,,,,44,,44,44,52,44,,52,52,52,52,52,52,52,52,52,52,',
',,,52,,,52,52,,,,,52,,,52,52,52,52,,,,,52,52,,52,,52,52,,,52,52,,,,',
'52,52,52,52,52,52,,,,,,52,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,52,52,,,,52',
',52,52,286,52,,286,286,286,286,286,286,286,286,286,286,,,,,286,,,286',
'286,,,,,286,,,286,286,286,286,,,,,286,286,,286,,286,286,,,286,286,,',
',,286,286,286,286,286,286,,,,,,286,286,,,,,,,,,,,,,,,,,,,,,,,,,,,,286',
'286,,,,286,,286,286,54,286,,54,54,54,54,54,54,54,54,54,54,,,,,54,,,54',
'54,,,,,54,,,54,54,54,54,,,,,54,54,,54,,54,54,,,54,54,,54,,,54,54,54',
'54,54,54,,,,,,54,54,,,,,,,,,,,,,,,,,,,,,,,,,,,,54,54,,,,54,,54,54,277',
'54,,277,277,277,277,277,277,277,277,277,277,,,,,277,,,277,277,,,,,277',
',,277,277,277,277,,,,,277,277,,277,,277,277,,,277,277,,,,,277,277,277',
'277,277,277,,,,,277,277,277,,,,,,,,,,,,,,,,,,,,,,,,,,,,277,277,,,,277',
',277,277,275,277,,275,275,275,275,275,275,275,275,275,275,,,,,275,,',
'275,275,,,,,275,,,275,275,275,275,,,,,275,275,,275,,275,275,,,275,275',
',,,,275,275,275,275,275,275,,,,,,275,275,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'275,275,,,,275,,275,275,274,275,,274,274,274,274,274,274,274,274,274',
'274,,,,,274,,,274,274,,,,,274,,,274,274,274,274,,,,,274,274,,274,,274',
'274,,,274,274,,,,,274,274,274,274,274,274,,,,,,274,274,,,,,,,,,,,,,',
',,,,,,,,,,,,,,274,274,,,,274,,274,274,67,274,,67,67,67,67,67,67,67,67',
'67,67,,,,,67,,,67,67,,,,,67,,,67,67,67,67,,,,,67,67,,67,,67,67,,,67',
'67,,,,,67,67,67,67,67,67,,,,,,67,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,67',
',,,67,,67,67,262,67,,262,262,262,262,262,262,262,262,262,262,,,,,262',
',,262,262,,,,,262,,,262,262,262,262,,,,,262,262,,262,,262,262,,,262',
'262,,,,,262,262,262,262,262,262,,,,,,262,262,,,,,,,,,,,,,,,,,,,,,,,',
',,,,262,262,,,,262,,262,262,213,262,,213,213,213,213,213,213,213,213',
'213,213,,,,,213,,,213,213,,,,,213,,,213,213,213,213,,,,,213,213,,213',
',213,213,,,213,213,,,,,213,213,213,213,213,213,,,,,,213,213,,,,,,,,',
',,,,,,,,,,,,,,,,,,,213,213,,,,213,,213,213,212,213,,212,212,212,212',
'212,212,212,212,212,212,,,,,212,,,212,212,,,,,212,,,212,212,212,212',
',,,,212,212,,212,,212,212,,,212,212,,,,,212,212,212,212,212,212,,,,',
',212,212,,,,,,,,,,,,,,,,,,,,,,,,,,,,212,212,,,,212,,212,212,71,212,',
'71,71,71,71,71,71,71,71,71,71,,,,,71,,,71,71,,,,,71,,,71,71,71,71,,',
',,71,71,,71,,71,71,,,71,71,,,,,71,71,71,71,71,71,,,,,,71,71,,,,,,,,',
',,,,,,,,,,,,,,,,,,,71,71,,,,71,,71,71,74,71,,74,74,74,74,74,74,74,74',
'74,74,,,,,74,,,74,74,,,,,74,,,74,74,74,74,,,,,74,74,,74,,74,74,,,74',
'74,,,,,74,74,74,74,74,74,,,,,,74,74,,,,,,,,,,,,,,,,,,,,,,,,,,,,74,74',
',,,74,,74,74,201,74,,201,201,201,201,201,201,201,201,201,201,,,,,201',
',,201,201,,,,,201,,,201,201,201,201,,,,,201,201,,201,,201,201,,,201',
'201,201,,,,201,201,201,201,201,201,,,,,,201,201,,,,,,,,,,,,,,,,,,,,',
',,,,,,,201,201,201,201,,201,,201,201,200,201,,200,200,200,200,200,200',
'200,200,200,200,,,,,200,,,200,200,,,,,200,,,200,200,200,200,,,,,200',
'200,,200,,200,200,,,200,200,,,,,200,200,200,200,200,200,,,,,,200,200',
',,,,,,,,,,,,,,,,,,,,,,,,,,,200,200,,,,200,,200,200,131,200,,131,131',
'131,131,131,131,131,131,131,131,,,,,131,,,131,131,,,,,131,,,131,131',
'131,131,,,,,131,131,,131,,131,131,,,131,131,,,,,131,131,131,131,131',
'131,,,,,,131,131,,,,,,,,,,,,,,,,,,,,,,,,,,,,131,131,,,,131,,131,131',
'187,131,,187,187,187,187,187,187,187,187,187,187,,,,,187,,,187,187,',
',,,187,,,187,187,187,187,,,,,187,187,,187,,187,187,,,187,187,,,,,187',
'187,187,187,187,187,,,,,,187,187,,,,,,,,,,,,,,,,,,,,,,,,,,,,187,187',
',,,187,,187,187,185,187,,185,185,185,185,185,185,185,185,185,185,,,',
',185,,,185,185,,,,,185,,,185,185,185,185,,,,,185,185,,185,,185,185,',
',185,185,,,,,185,185,185,185,185,185,,,,,,185,185,,,,,,,,,,,,,,,,,,',
',,,,,,,,,185,185,,,,185,,185,185,171,185,,171,171,171,171,171,171,171',
'171,171,171,,,,,171,,,171,171,,,,,171,,,171,171,171,171,,,,,171,171',
',171,,171,171,,,171,171,,,,,171,171,171,171,171,171,,,,,,171,171,,,',
',,,,,,,,,,,,,,,,,,,,,,,,171,171,,,,171,,171,171,138,171,,138,138,138',
'138,138,138,138,138,138,138,,,,,138,,,138,138,,,,,138,,,138,138,138',
'138,,,,,138,138,,138,,138,138,,,138,138,,,,,138,138,138,138,138,138',
',,,,,138,138,,,,,,,,,,,,,,,,,,,,,,,,,,,,138,138,,,,138,,138,138,167',
'138,,167,167,167,167,167,167,167,167,167,167,,,,,167,,,167,167,,,,,167',
',,167,167,167,167,,,,,167,167,,167,,167,167,,,167,167,,,,,167,167,167',
'167,167,167,,,,,,167,167,,,,,,,,,,,,,,,,,,,,,,,,,,,,167,167,,,,167,',
'167,167,128,167,,128,128,128,128,128,128,128,128,128,128,,,,,128,,,128',
'128,,,,,128,,,128,128,128,128,,,,,128,128,,128,,128,128,,,128,128,,',
',,128,128,128,128,128,128,,,,,,128,128,,,,,,,,,,,,,,,,,,,,,,,,,,,,128',
'128,,,,128,,128,128,165,128,,165,165,165,165,165,165,165,165,165,165',
',,,,165,,,165,165,,,,,165,,,165,165,165,165,,,,,165,165,,165,,165,165',
',,165,165,,,,,165,165,165,165,165,165,,,,,,165,165,,,,,,,,,,,,,,,,,',
',,,,,,,,,,165,165,,,,165,,165,165,164,165,,164,164,164,164,164,164,164',
'164,164,164,,,,,164,,,164,164,,,,,164,,,164,164,164,164,,,,,164,164',
',164,,164,164,,,164,164,,,,,164,164,164,164,164,164,,,,,,164,164,,,',
',,,,,,,,,,,,,,,,,,,,,,,,164,164,,,,164,,164,164,163,164,,163,163,163',
'163,163,163,163,163,163,163,,,,,163,,,163,163,,,,,163,,,163,163,163',
'163,,,,,163,163,,163,,163,163,,,163,163,,,,,163,163,163,163,163,163',
',,,,,163,163,,,,,,,,,,,,,,,,,,,,,,,,,,,,163,163,,,,163,,163,163,162',
'163,,162,162,162,162,162,162,162,162,162,162,,,,,162,,,162,162,,,,,162',
',,162,162,162,162,,,,,162,162,,162,,162,162,,,162,162,,,,,162,162,162',
'162,162,162,,,,,,162,162,,,,,,,,,,,,,,,,,,,,,,,,,,,,162,162,,,,162,',
'162,162,160,162,,160,160,160,160,160,160,160,160,160,160,,,,,160,,,160',
'160,,,,,160,,,160,160,160,160,,,,,160,160,,160,,160,160,,,160,160,,',
',,160,160,160,160,160,160,,,,,,160,160,,,,,,,,,,,,,,,,,,,,,,,,,,,,160',
'160,,,,160,,160,160,129,160,,129,129,129,129,129,129,129,129,129,129',
',,,,129,,,129,129,,,,,129,,,129,129,129,129,,,,,129,129,,129,,129,129',
',,129,129,,,,,129,129,129,129,129,129,,,,,,129,129,,,,,,,,,,,,,,,,,',
',,,,,,,,,,129,129,,,,129,,129,129,158,129,,158,158,158,158,158,158,158',
'158,158,158,,,,,158,,,158,158,,,,,158,,,158,158,158,158,,,,,158,158',
',158,,158,158,,,158,158,,,,,158,158,158,158,158,158,,,,,,158,158,,,',
',,,,,,,,,,,,,,,,,,,,,,,,158,158,,,,158,,158,158,157,158,,157,157,157',
'157,157,157,157,157,157,157,,,,,157,,,157,157,,,,,157,,,157,157,157',
'157,,,,,157,157,,157,,157,157,,,157,157,,,,,157,157,157,157,157,157',
',,,,,157,157,,,,,,,,,,,,,,,,,,,,,,,,,,,,157,157,,,,157,,157,157,156',
'157,,156,156,156,156,156,156,156,156,156,156,,,,,156,,,156,156,,,,,156',
',,156,156,156,156,,,,,156,156,,156,,156,156,,,156,156,,,,,156,156,156',
'156,156,156,,,,,,156,156,,,,,,,,,,,,,,,,,,,,,,,,,,,,156,156,,,,156,',
'156,156,100,156,,100,100,100,100,100,100,100,100,100,100,,,,,100,,,100',
'100,,,,,100,,,100,100,100,100,,,,,100,100,,100,,100,100,,,100,100,100',
',,,100,100,100,100,100,100,,,,,,100,100,,,,,,,,,,,,,,,,,,,,,,,,,,,,100',
'100,,,,100,,100,100,101,100,,101,101,101,101,101,101,101,101,101,101',
',,,,101,,,101,101,,,,,101,,,101,101,101,101,,,,,101,101,,101,,101,101',
',,101,101,,,,,101,101,101,101,101,101,,,,,,101,101,,,,,,,,,,,,,,,,,',
',,,,,,,,,,101,101,,,,101,,101,101,155,101,,155,155,155,155,155,155,155',
'155,155,155,,,,,155,,,155,155,,,,,155,,,155,155,155,155,,,,,155,155',
',155,,155,155,,,155,155,,,,,155,155,155,155,155,155,,,,,,155,155,,,',
',,,,,,,,,,,,,,,,,,,,,,,,155,155,,,,155,,155,155,137,155,,137,137,137',
'137,137,137,137,137,137,137,,,,,137,,,137,137,,,,,137,,,137,137,137',
'137,,,,,137,137,,137,,137,137,,,137,137,,,,,137,137,137,137,137,137',
',,,,,137,137,,,,,,,,,,,,,,,,,,,,,,,,,,,,137,137,,,,137,,137,137,153',
'137,,153,153,153,153,153,153,153,153,153,153,,,,,153,,,153,153,,,,,153',
',,153,153,153,153,,,,,153,153,,153,,153,153,,,153,153,,,,,153,153,153',
'153,153,153,,,,,,153,153,,,,,,,,,,,,,,,,,,,,,,,,,,,,153,153,,,,153,',
'153,153,152,153,,152,152,152,152,152,152,152,152,152,152,,,,,152,,,152',
'152,,,,,152,,,152,152,152,152,,,,,152,152,,152,,152,152,,,152,152,,',
',,152,152,152,152,152,152,,,,,,152,152,,,,,,,,,,,,,,,,,,,,,,,,,,,,152',
'152,,,,152,,152,152,110,152,,110,110,110,110,110,110,110,110,110,110',
',,,,110,,,110,110,,,,,110,,,110,110,110,110,,,,,110,110,,110,,110,110',
',,110,110,,,,,110,110,110,110,110,110,,,,,,110,110,,,,,,,,,,,,,,,,,',
',,,,,,,,,,110,110,,,,110,,110,110,151,110,,151,151,151,151,151,151,151',
'151,151,151,,,,,151,,,151,151,,,,,151,,,151,151,151,151,,,,,151,151',
',151,,151,151,,,151,151,,,,,151,151,151,151,151,151,,,,,,151,151,,,',
',,,,,,,,,,,,,,,,,,,,,,,,151,151,,,,151,,151,151,150,151,,150,150,150',
'150,150,150,150,150,150,150,,,,,150,,,150,150,,,,,150,,,150,150,150',
'150,,,,,150,150,,150,,150,150,,,150,150,,,,,150,150,150,150,150,150',
',,,,,150,150,,,,,,,,,,,,,,,,,,,,,,,,,,,,150,150,,,,150,,150,150,113',
'150,,113,113,113,113,113,113,113,113,113,113,,,,,113,,,113,113,,,,,113',
',,113,113,113,113,,,,,113,113,,113,,113,113,,,113,113,113,,,,113,113',
'113,113,113,113,,,,,,113,113,,,,,,,,,,,,,,,,,,,,,,,,,,,,113,113,,,,113',
',113,113,149,113,,149,149,149,149,149,149,149,149,149,149,,,,,149,,',
'149,149,,,,,149,,,149,149,149,149,,,,,149,149,,149,,149,149,,,149,149',
',,,,149,149,149,149,149,149,,,,,,149,149,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'149,149,,,,149,,149,149,0,149,,0,0,0,0,0,0,0,0,0,0,,,,,0,,,0,0,,,,,0',
',,0,0,0,0,,,,,0,0,,0,,0,0,,,0,0,0,,,,0,0,0,0,0,0,,,,,,0,0,,,,,,,,,,',
',,,,,,,,,,,,,,,,,0,0,0,0,,0,,0,0,148,0,,148,148,148,148,148,148,148',
'148,148,148,,,,,148,,,148,148,,,,,148,,,148,148,148,148,,,,,148,148',
',148,,148,148,,,148,148,,,,,148,148,148,148,148,148,,,,,,148,148,,,',
',,,,,,,,,,,,,,,,,,,,,,,,148,148,,,,148,,148,148,146,148,,146,146,146',
'146,146,146,146,146,146,146,,,,,146,,,146,146,,,,,146,,,146,146,146',
'146,,,,,146,146,,146,,146,146,,,146,146,,,,,146,146,146,146,146,146',
',,,,,146,146,,,,,,,,,,,,,,,,,,,,,,,,,,,,146,146,,,,146,,146,146,145',
'146,,145,145,145,145,145,145,145,145,145,145,,,,,145,,,145,145,,,,,145',
',,145,145,145,145,,,,,145,145,,145,,145,145,,,145,145,,,,,145,145,145',
'145,145,145,,,,,,145,145,,,,,,,,,,,,,,,,,,,,,,,,,,,,145,145,,,,145,',
'145,145,144,145,,144,144,144,144,144,144,144,144,144,144,,,,,144,,,144',
'144,,,,,144,,,144,144,144,144,,,,,144,144,,144,,144,144,,,144,144,,',
',,144,144,144,144,144,144,,,,,,144,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,144',
'144,,,,144,,144,144,143,144,,143,143,143,143,143,143,143,143,143,143',
',,,,143,,,143,143,,,,,143,,,143,143,143,143,,,,,143,143,,143,,143,143',
',,143,143,,,,,143,143,143,143,143,143,,,,,,143,143,,,,,,,,,,,,,,,,,',
',,,,,,,,,,143,143,,,,143,,143,143,122,143,,122,122,122,122,122,122,122',
'122,122,122,,,,,122,,,122,122,,,,,122,,,122,122,122,122,,,,,122,122',
',122,,122,122,,,122,122,,,,,122,122,122,122,122,122,,,,,,122,122,,,',
',,,,,,,,,,,,,,,,,,,,,,,,122,122,,,,122,,122,122,141,122,,141,141,141',
'141,141,141,141,141,141,141,,,,,141,,,141,141,,,,,141,,,141,141,141',
'141,,,,,141,141,,141,,141,141,,,141,141,,,,,141,141,141,141,141,141',
',,,,,141,141,,,,,,,,,,,,,,,,,,,,,,,,,,,,141,141,,,,141,,141,141,140',
'141,,140,140,140,140,140,140,140,140,140,140,,,,,140,,,140,140,,,,,140',
',,140,140,140,140,,,,,140,140,,140,,140,140,,,140,140,,,,,140,140,140',
'140,140,140,,,,,,140,140,,,,,,,,,,,,,,,,,,,,,,,,,,,,140,140,,,,140,',
'140,140,139,140,,139,139,139,139,139,139,139,139,139,139,,,,,139,,,139',
'139,,,,,139,,,139,139,139,139,,,,,139,139,,139,,139,139,,,139,139,,',
',,139,139,139,139,139,139,,,,,,139,139,,,,,,,,,,,,,,,,,,,,,,,,,,,,139',
'139,,,,139,,139,139,127,139,,127,127,127,127,127,127,127,127,127,127',
',,,,127,,,127,127,,,,,127,,,127,127,127,127,,,,,127,127,,127,,127,127',
',,127,127,,,,,127,127,127,127,127,127,,,,,,127,127,,,,,,,,,,,,,,,,,',
',,,,,,,,,,127,127,,,,127,,127,127,166,127,,166,166,166,166,166,166,166',
'166,166,166,,,,,166,,,166,166,,,,,166,,,166,166,166,166,,,,,166,166',
',166,,166,166,,,166,166,314,,314,,166,166,166,166,166,166,,,,,,166,166',
',,,,,,,,,,,,,,,314,314,,,,314,,,,314,,,166,166,,,,166,,166,166,,166',
',314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314',
'314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314',
'314,303,,303,,,,,,,,314,,,,,,,,,,,,,,,,,,,,,,303,303,,,,303,,,,303,',
',,,,,,,,,,,,,303,303,303,303,303,303,303,303,303,303,303,303,303,303',
'303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303',
'303,303,303,303,159,159,159,159,159,159,159,159,159,159,303,,,,159,',
',159,159,,,,,159,,,159,159,159,,,,,,,159,,159,,159,159,,,159,159,,,',
',159,159,159,159,159,159,,,,,,,,,,,302,302,302,302,302,302,302,302,302',
'302,,,,,302,,,302,302,,,,,302,159,159,302,302,302,159,,159,159,,159',
'302,,302,,302,302,,,302,302,,,,,302,302,302,302,302,302,,,,,,,,,,,312',
'312,312,312,312,312,312,312,312,312,,,,,312,,,312,312,,,,,312,302,302',
'312,312,312,302,,302,302,,302,312,,312,,312,312,,,312,312,,,,,312,312',
'312,312,312,312,,20,20,20,20,20,20,20,20,20,20,,,,,,,,,,,,,,,,,,20,20',
',,,,312,312,,,,312,,312,312,,312,20,,,,,,,,,,,,,,,,,,,24,24,24,24,24',
'24,24,24,24,24,,,,,24,,,24,24,,,,,24,,,24,24,24,24,,20,,20,20,24,20',
'24,,24,24,,,24,24,273,,273,,24,24,24,24,24,24,,,,,,24,24,,,,,,,,,,,',
',,,,273,273,,,,273,,,,273,,,24,24,,,,24,,24,24,,24,,273,273,273,273',
'273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273',
'273,273,273,273,273,273,273,273,273,273,273,273,273,273,319,,319,,,',
',,,,,,,,,,,,,,,,,,,319,,,,,,,319,319,,,,319,,,,319,,,,,,,,,,,,,,,319',
'319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319',
'319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319',
'318,,318,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,318,318,,,,318,,,,318,,,,,,,,',
',,,,,,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318',
'318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318',
'318,318,313,,313,,,,,,,,,,,,,,,,,,,,,,,313,,,,,,,313,313,,,,313,,,,313',
',,,,,,,,,,,,,,313,313,313,313,313,313,313,313,313,313,313,313,313,313',
'313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313',
'313,313,313,313,197,,197,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,197,197,,,,197',
',,,197,,,,,,,,,,,,,,,197,197,197,197,197,197,197,197,197,197,197,197',
'197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197',
'197,197,197,197,197,197,193,,193,,,,,,,,,,,,,,,,,,,,,,,193,,,,,,,193',
'193,,,,193,,,,193,,,,,,,,,,,,,,,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,192,,192,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,192,192,,,,192,,,,192,,,,,,,,,,,,,,,192,192,192,192,192,192,192',
'192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192',
'192,192,192,192,192,192,192,192,192,192,192,237,,237,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,237,237,,,,237,,,,237,,,,,,,,,,,,,,,237,237,237,237,237',
'237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237',
'237,237,237,237,237,237,237,237,237,237,237,237,237,230,,230,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,230,230,,,,230,,,,230,,,,,,,,,,,,,,,230,230,230',
'230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230',
'230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,301,,301',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,301,301,,,,301,,,,301,,,,,,,,,,,,,,,301',
'301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301',
'301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301,301',
'112,,112,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,112,,,,112,,,,112,,,,,,,,',
',,,,,,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112',
'112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112',
'112,112,210,,210,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,210,210,,,,210,,,,210',
',,,,,,,,,,,,,,210,210,210,210,210,210,210,210,210,210,210,210,210,210',
'210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210',
'210,210,210,210,222,,222,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,222,222,,,,222',
',,,222,,,,,,,,,,,,,,,222,222,222,222,222,222,222,222,222,222,222,222',
'222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222',
'222,222,222,222,222,222,300,,300,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,300,300',
',,,300,,,,300,,,,,,,,,,,,,,,300,300,300,300,300,300,300,300,300,300',
'300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300',
'300,300,300,300,300,300,300,300,297,,297,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,297,297,,,,297,,,,297,,,,,,,,,,,,,,,297,297,297,297,297,297,297,297',
'297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297',
'297,297,297,297,297,297,297,297,297,297,84,,84,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,84,84,,,,84,,,,84,,,,,,,84,,,,,,,,84,84,84,84,84,84,84,84,84',
'84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84',
'84,84,84,86,,86,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,86,86,,,,86,,,,86,,,,,',
',86,,,,,,,,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86',
'86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,87,,87,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,87,87,,,,87,,,,87,,,,,,,87,,,,,,,,87,87,87,87,87,87',
'87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87',
'87,87,87,87,87,87,68,,68,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,68,68,,,,68,,',
',68,,,,,,,,,,,,,,,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68',
'68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,276,,276,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,276,276,,,,276,,,,276,,,,,,,,,,,,,,,276,276',
'276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276',
'276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,266',
',266,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,266,266,,,,266,,,,266,,,,,,,,,,,,',
',,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266',
'266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266',
'266,264,,264,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,264,264,,,,264,,,,264,,,,',
',,,,,,,,,,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264',
'264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264',
'264,264,264,118,118,,,,,,,,118,,,,,,,,,,,,,,,118,118,118,118,118,118',
'118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118',
'118,118,118,118,118,118,118,118,118,118,118,118,92,92,,,,,,,,92,,,,',
',,,,,,,,,,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92',
'92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,256,256,,,,,,,,256,,,,',
',,,,,,,,,,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256',
'256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256',
'256,256,256,307,,,,,,,,307,,,,,,,,,,,,,,,307,307,307,307,307,307,307',
'307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307',
'307,307,307,307,307,307,307,307,307,307,307,283,,,,,,,,283,,,,,,,,,',
',,,,,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283',
'283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283',
'283,283,284,,,,,,,,284,,,,,,,,,,,,,,,284,284,284,284,284,284,284,284',
'284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284,284',
'284,284,284,284,284,284,284,284,284,284,223,,,,,,,,223,,,,,,,,,,,,,',
',223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223',
'223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,223',
'223,306,,,,,,,,306,,,,,,,,,,,,,,,306,306,306,306,306,306,306,306,306',
'306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306',
'306,306,306,306,306,306,306,306,306,250,,,,,,,,,,,,,,,250,250,250,250',
'250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250',
'250,250,250,250,250,250,250,250,250,250,250,250,250,250,91,,,,,,,,,',
',,,,,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91',
'91,91,91,91,91,91,91,91,91,91,91,91,91,91,109,,,,,,,,,,,,,,,109,109',
'109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109',
'109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,251',
'251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251',
'251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251',
'219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219',
'219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219',
'219,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231',
'231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231',
'231,231,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248',
'248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248',
'248,248,248,215,215,215,215,215,215,215,215,215,215,215,215,215,215',
'215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215',
'215,215,215,215,224,224,224,224,224,224,224,224,224,224,224,224,224',
'224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224',
'224,224,224,224,224,227,227,227,227,227,227,227,227,227,227,227,227',
'227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227',
'227,227,227,227,227,227,244,244,244,244,244,244,244,244,244,244,244',
'244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244',
'244,244,244,244,244,244,244' ]
        racc_action_check = arr = Array.new(10897, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  6361,   325,   299,   nil,   nil,   301,   nil,   402,   nil,   nil,
   503,   nil,   604,   705,   nil,   nil,   806,   nil,   nil,   nil,
  7885,  1008,   nil,   nil,  7948,   170,   nil,   nil,   nil,    19,
   nil,   227,  1513,   nil,  1614,   197,   nil,  1816,   nil,   nil,
  1917,   128,   nil,   nil,  2119,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  2220,   175,  2422,   nil,   nil,   nil,   nil,   nil,
   nil,   268,   nil,   nil,   nil,    39,   234,  2826,  9634,   147,
    -2,  3230,   nil,   nil,  3331,   247,   nil,   nil,    90,   nil,
   nil,   236,    -5,   127,  9361,   280,  9452,  9543,   289,   337,
   236, 10474, 10025,   -38,   177,   nil,    43,   nil,   -46,   nil,
  5250,  5351,   190,   201,   210,   nil,   nil,   nil,   nil, 10524,
  5856,    63,  8906,  6159,   234,    -2,   234,   177,  9966,   305,
   nil,    91,  6967,   228,   160,   nil,   131,  7371,  4240,  4846,
    28,  3634,  1412,  1311,  1109,   907,   200,  5553,  4038,  7270,
  7169,  7068,   nil,  6866,  6765,  6664,  6563,   nil,  6462,  6260,
  6058,  5957,  5755,  5654,    99,  5452,  5149,  5048,  4947,  7699,
  4745,   -47,  4644,  4543,  4442,  4341,  7472,  4139,   nil,   nil,
    -2,  3937,   nil,   238,   179,   nil,   nil,   nil,   nil,   197,
   322,    57,   nil,   nil,   -20,  3836,    84,  3735,   nil,   114,
   120,    -2,  8542,  8451,   nil,   nil,   nil,  8360,   nil,   nil,
  3533,  3432,   179,    73,   nil,   196,    34,   -49,   nil,   nil,
  8997,   132,  3129,  3028,   -12, 10699,   512,  1439,   255, 10594,
   411,  1032,  9088, 10316, 10734,   209,  1430, 10769,   916,  1133,
  8724, 10629,   714,  1234,   815,  1421,   188,  8633,   613,  1335,
   278,   310,  1320,    91, 10804,   114,  1219,   280, 10664,  1017,
 10424, 10559,  1118,  1522,   301,     3, 10084,   128,   nil,    69,
    20,   126,  2927,   nil,  9907,   nil,  9816,   nil,   nil,   131,
   nil,   nil,   -24,  7996,  2725,  2624,  9725,  2523,   nil,    73,
    75,   nil,   nil, 10200, 10258,   nil,  2321,  2018,   284,   nil,
   nil,   nil,    -2,   149,   nil,   nil,    65,  9270,   nil,  1715,
  9179,  8815,  7764,  7611,   nil,   nil, 10374, 10142,   nil,   247,
   133,  1210,  7829,  8269,  7520,   nil,   nil,   nil,  8178,  8087,
   nil,   nil,   nil ]

racc_action_default = [
    -1,  -178,  -185,   -97,   -10,  -185,  -105,  -185,   -26,   -11,
  -185,  -106,  -185,  -185,   -27,   -12,  -185,  -107,   -13,  -108,
  -185,  -185,   -14,  -109,   -45,  -119,   -15,   -28,   -16,  -125,
   -29,  -133,  -185,   -31,  -140,  -185,   -17,  -185,   -34,   -18,
  -185,  -185,   -35,   -19,  -185,   -36,   -46,   -20,  -127,   -30,
   -21,   -37,  -185,  -185,  -185,   -22,   -38,   -32,    -2,   -23,
   -39,    -3,  -104,  -103,   -33,  -185,  -185,  -185,    -5,  -185,
    -8,  -185,   -96,    -9,  -185,  -178,  -180,  -182,  -185,  -176,
   -98,  -100,  -185,   -52,  -157,   -54,  -185,  -185,   -53,  -185,
  -126,   -55,   -44,  -185,  -119,   -43,  -185,  -120,  -185,  -130,
  -140,  -185,  -185,  -185,  -185,  -111,  -115,  -116,  -134,   -56,
  -185,  -185,  -141,  -140,   -50,  -185,  -185,   -49,  -154,  -185,
   -25,  -185,    -7,  -161,  -185,    -4,   -51,  -185,  -185,  -185,
  -185,  -185,  -185,  -185,  -185,  -185,  -185,  -185,  -185,  -185,
  -185,  -185,   -58,  -185,  -185,  -185,  -185,   -57,  -185,  -185,
  -185,  -185,  -185,  -185,  -185,  -185,  -185,  -185,  -185,   -93,
  -185,  -185,  -185,  -185,  -185,  -185,  -185,  -185,   -95,  -129,
  -185,  -185,  -110,   -47,   -48,  -181,  -177,  -179,  -175,  -185,
  -185,  -185,  -156,  -174,  -185,  -185,  -185,  -185,  -118,  -185,
  -185,  -185,  -141,  -185,  -112,  -113,  -114,  -142,  -139,  -147,
  -185,  -185,  -185,  -185,  -155,  -150,  -185,  -185,   323,   -24,
    -6,  -185,  -185,  -185,  -185,   -86,   -74,   -63,  -185,   -87,
   -75,   -64,  -183,   -92,   -88,   -76,   -65,   -89,   -77,   -66,
  -184,   -90,   -78,   -67,   -79,   -68,   -59,  -158,   -80,   -69,
   -60,   -81,   -70,   -61,   -83,   -82,   -71,  -185,   -84,   -72,
   -91,   -85,   -73,   -62,  -128,  -185,   -40,  -185,   -99,  -185,
  -185,  -185,  -185,  -169,   -41,  -124,   -42,  -122,  -121,  -185,
  -131,  -117,  -185,  -144,  -185,  -185,  -143,  -185,  -132,  -185,
  -185,  -151,  -162,  -163,  -164,  -160,  -185,  -185,  -159,  -102,
  -101,   -94,  -185,  -185,  -167,  -170,  -185,  -148,  -123,  -185,
  -146,  -145,  -102,  -185,  -152,  -153,  -166,  -165,  -173,  -185,
  -171,  -185,  -102,  -185,  -185,  -135,  -168,  -172,  -149,  -185,
  -137,  -136,  -138 ]

racc_goto_table = [
    58,    83,    80,    84,   172,    95,    85,   169,    86,    87,
   214,   263,    88,   267,   268,    89,    90,    91,    76,   124,
    92,    66,    98,   172,    61,    53,   169,    79,   109,   111,
   112,   296,   261,   114,   205,   178,   115,   259,    75,    82,
   117,    77,   nil,   nil,   nil,   nil,   nil,   nil,   118,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   122,   116,   126,   nil,   nil,   125,   173,   nil,   nil,
   174,   nil,   nil,   nil,    95,   nil,   nil,   nil,   121,   nil,
   nil,   nil,   nil,   nil,   218,   nil,   nil,   nil,   295,   nil,
   168,   186,   175,   298,   nil,   191,   192,   193,   189,   177,
   nil,   176,   nil,   nil,   288,   182,   197,   183,   203,   192,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   210,   308,
   nil,   122,   nil,   215,   216,   217,   nil,   219,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   nil,   230,
   231,   232,   233,   nil,   234,   235,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   nil,   248,   249,
   250,   251,   252,   253,   260,   254,   255,   256,   nil,    95,
    95,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   258,   264,   nil,   266,   nil,   nil,   189,   nil,   172,   nil,
   269,   169,   nil,   nil,   nil,   nil,   273,   276,   nil,   nil,
   nil,   275,   nil,   nil,   nil,   nil,   nil,   nil,   283,   284,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   281,   nil,
   nil,   nil,   nil,   nil,   nil,   285,   nil,   nil,   nil,   nil,
   nil,   260,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    95,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   297,   nil,
   292,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   300,   301,   260,   303,   nil,   nil,   nil,   nil,   nil,   nil,
   291,   nil,   306,   307,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   313,   nil,   nil,   314,   nil,
   304,   305,   nil,   nil,   nil,   nil,   nil,   318,   319,   nil,
   317,   nil,   nil,   nil,   309,   nil,   nil,   310 ]

racc_goto_check = [
     2,     5,    26,     5,    32,    21,     5,    38,     5,     5,
    43,    45,     5,    23,    23,     6,    33,     5,    49,    42,
     5,     4,    36,    32,     3,     1,    38,    47,     5,    39,
     5,    40,    44,     5,    41,    46,     5,    25,    48,    24,
     5,    50,   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,     4,     5,   nil,   nil,     2,     5,   nil,   nil,
     5,   nil,   nil,   nil,    21,   nil,   nil,   nil,     3,   nil,
   nil,   nil,   nil,   nil,    42,   nil,   nil,   nil,    45,   nil,
     4,    36,    49,    23,   nil,    39,     5,     5,     2,     4,
   nil,    47,   nil,   nil,    43,     4,     5,     4,    39,     5,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,    45,
   nil,     2,   nil,     5,     5,     5,   nil,     5,     5,     5,
     5,     5,     5,     5,     5,     5,     5,     5,   nil,     5,
     5,     5,     5,   nil,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     5,     5,     5,   nil,     5,     5,
     5,     5,     5,     5,    21,     6,    33,     5,   nil,    21,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    26,     5,   nil,     5,   nil,   nil,     2,   nil,    32,   nil,
     2,    38,   nil,   nil,   nil,   nil,     5,     5,   nil,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,     5,     5,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,
   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil,
     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     5,     5,    21,     5,   nil,   nil,   nil,   nil,   nil,   nil,
     4,   nil,     5,     5,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,     5,   nil,
     4,     4,   nil,   nil,   nil,   nil,   nil,     5,     5,   nil,
     2,   nil,   nil,   nil,     4,   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,    25,     0,    24,    21,    -4,    -5,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -20,   nil,  -176,    37,  -144,     0,   nil,   nil,   nil,
   nil,   nil,   -66,    -4,   nil,   nil,    -3,   nil,   -63,    -5,
  -231,   -82,   -46,  -114,  -152,  -173,   -43,    26,    37,    17,
    40 ]

racc_goto_default = [
   nil,   nil,   200,   nil,   nil,    68,    70,    73,     4,     9,
    15,    18,    22,    26,    28,    36,    39,    43,    47,    50,
    55,    59,    62,    97,   nil,    69,   nil,     6,    11,    17,
    19,    23,   105,    29,   106,   107,   nil,    48,    99,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     1,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 107, :_reduce_1,
  1, 107, :_reduce_2,
  1, 107, :_reduce_3,
  2, 107, :_reduce_4,
  1, 109, :_reduce_5,
  3, 109, :_reduce_6,
  2, 109, :_reduce_7,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  3, 110, :_reduce_24,
  2, 110, :_reduce_25,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 128, :_reduce_28,
  1, 128, :_reduce_29,
  1, 128, :_reduce_30,
  1, 128, :_reduce_31,
  1, 128, :_reduce_32,
  1, 128, :_reduce_33,
  1, 128, :_reduce_34,
  1, 128, :_reduce_35,
  1, 128, :_reduce_36,
  1, 128, :_reduce_37,
  1, 128, :_reduce_38,
  1, 128, :_reduce_39,
  3, 116, :_reduce_40,
  3, 129, :_reduce_41,
  3, 129, :_reduce_42,
  1, 129, :_reduce_43,
  2, 120, :_reduce_44,
  1, 120, :_reduce_45,
  1, 127, :_reduce_46,
  2, 115, :_reduce_47,
  2, 115, :_reduce_48,
  2, 115, :_reduce_49,
  2, 115, :_reduce_50,
  2, 115, :_reduce_51,
  2, 115, :_reduce_52,
  2, 115, :_reduce_53,
  2, 115, :_reduce_54,
  2, 115, :_reduce_55,
  2, 115, :_reduce_56,
  2, 115, :_reduce_57,
  2, 115, :_reduce_58,
  3, 115, :_reduce_59,
  3, 115, :_reduce_60,
  3, 115, :_reduce_61,
  3, 115, :_reduce_62,
  3, 115, :_reduce_63,
  3, 115, :_reduce_64,
  3, 115, :_reduce_65,
  3, 115, :_reduce_66,
  3, 115, :_reduce_67,
  3, 115, :_reduce_68,
  3, 115, :_reduce_69,
  3, 115, :_reduce_70,
  3, 115, :_reduce_71,
  3, 115, :_reduce_72,
  3, 115, :_reduce_73,
  3, 115, :_reduce_74,
  3, 115, :_reduce_75,
  3, 115, :_reduce_76,
  3, 115, :_reduce_77,
  3, 115, :_reduce_78,
  3, 115, :_reduce_79,
  3, 115, :_reduce_80,
  3, 115, :_reduce_81,
  3, 115, :_reduce_82,
  3, 115, :_reduce_83,
  3, 115, :_reduce_84,
  3, 115, :_reduce_85,
  3, 115, :_reduce_86,
  3, 115, :_reduce_87,
  3, 115, :_reduce_88,
  3, 115, :_reduce_89,
  3, 115, :_reduce_90,
  3, 115, :_reduce_91,
  3, 115, :_reduce_92,
  2, 126, :_reduce_93,
  5, 114, :_reduce_94,
  2, 114, :_reduce_95,
  1, 131, :_reduce_96,
  1, 131, :_reduce_97,
  1, 130, :_reduce_98,
  3, 130, :_reduce_99,
  1, 132, :_reduce_none,
  4, 132, :_reduce_101,
  4, 125, :_reduce_102,
  1, 112, :_reduce_103,
  1, 112, :_reduce_104,
  1, 112, :_reduce_105,
  1, 112, :_reduce_106,
  1, 112, :_reduce_107,
  1, 112, :_reduce_108,
  1, 112, :_reduce_109,
  2, 112, :_reduce_110,
  2, 112, :_reduce_111,
  2, 138, :_reduce_112,
  2, 138, :_reduce_113,
  2, 138, :_reduce_114,
  1, 138, :_reduce_115,
  1, 138, :_reduce_116,
  3, 140, :_reduce_117,
  3, 134, :_reduce_118,
  0, 142, :_reduce_119,
  1, 142, :_reduce_120,
  3, 142, :_reduce_121,
  3, 142, :_reduce_122,
  4, 142, :_reduce_123,
  3, 142, :_reduce_124,
  1, 113, :_reduce_125,
  2, 113, :_reduce_126,
  1, 113, :_reduce_127,
  3, 124, :_reduce_128,
  2, 139, :_reduce_129,
  2, 139, :_reduce_130,
  3, 144, :_reduce_131,
  4, 143, :_reduce_132,
  1, 137, :_reduce_133,
  2, 137, :_reduce_134,
  6, 136, :_reduce_135,
  7, 136, :_reduce_136,
  6, 141, :_reduce_137,
  7, 141, :_reduce_138,
  3, 133, :_reduce_139,
  0, 145, :_reduce_140,
  1, 145, :_reduce_141,
  2, 145, :_reduce_142,
  3, 145, :_reduce_143,
  3, 145, :_reduce_144,
  4, 145, :_reduce_145,
  4, 145, :_reduce_146,
  2, 145, :_reduce_147,
  1, 146, :_reduce_148,
  3, 146, :_reduce_149,
  3, 118, :_reduce_150,
  4, 118, :_reduce_151,
  5, 118, :_reduce_152,
  3, 147, :_reduce_153,
  2, 119, :_reduce_154,
  3, 135, :_reduce_155,
  3, 121, :_reduce_156,
  2, 121, :_reduce_157,
  3, 121, :_reduce_158,
  4, 122, :_reduce_159,
  4, 122, :_reduce_160,
  1, 148, :_reduce_161,
  3, 148, :_reduce_162,
  2, 149, :_reduce_163,
  2, 149, :_reduce_164,
  3, 149, :_reduce_165,
  3, 149, :_reduce_166,
  5, 123, :_reduce_167,
  7, 123, :_reduce_168,
  1, 150, :_reduce_169,
  2, 150, :_reduce_170,
  3, 151, :_reduce_171,
  4, 151, :_reduce_172,
  3, 151, :_reduce_173,
  3, 152, :_reduce_174,
  2, 153, :_reduce_175,
  1, 154, :_reduce_176,
  2, 154, :_reduce_177,
  0, 155, :_reduce_178,
  2, 155, :_reduce_179,
  1, 156, :_reduce_180,
  2, 156, :_reduce_181,
  2, 117, :_reduce_182,
  3, 117, :_reduce_183,
  3, 117, :_reduce_184 ]

racc_reduce_n = 185

racc_shift_n = 323

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :UNLESS => 4,
  :NUMBER => 5,
  :STRING => 6,
  :REGEX => 7,
  :TRUE => 8,
  :FALSE => 9,
  :YES => 10,
  :NO => 11,
  :ON => 12,
  :OFF => 13,
  :IDENTIFIER => 14,
  :PROPERTY_ACCESS => 15,
  :PROTOTYPE_ACCESS => 16,
  :SOAK_ACCESS => 17,
  :CODE => 18,
  :PARAM_START => 19,
  :PARAM => 20,
  :PARAM_END => 21,
  :NEW => 22,
  :RETURN => 23,
  :CALL_START => 24,
  :CALL_END => 25,
  :INDEX_START => 26,
  :INDEX_END => 27,
  :TRY => 28,
  :CATCH => 29,
  :FINALLY => 30,
  :THROW => 31,
  :BREAK => 32,
  :CONTINUE => 33,
  :FOR => 34,
  :IN => 35,
  :OF => 36,
  :BY => 37,
  :WHEN => 38,
  :WHILE => 39,
  :SWITCH => 40,
  :LEADING_WHEN => 41,
  :DELETE => 42,
  :INSTANCEOF => 43,
  :TYPEOF => 44,
  :SUPER => 45,
  :EXTENDS => 46,
  :NEWLINE => 47,
  :COMMENT => 48,
  :JS => 49,
  :INDENT => 50,
  :OUTDENT => 51,
  :UMINUS => 52,
  :UPLUS => 53,
  :NOT => 54,
  "!" => 55,
  "!!" => 56,
  "~" => 57,
  "++" => 58,
  "--" => 59,
  "*" => 60,
  "/" => 61,
  "%" => 62,
  "?" => 63,
  "." => 64,
  "+" => 65,
  "-" => 66,
  "<<" => 67,
  ">>" => 68,
  ">>>" => 69,
  "&" => 70,
  "|" => 71,
  "^" => 72,
  "<=" => 73,
  "<" => 74,
  ">" => 75,
  ">=" => 76,
  "==" => 77,
  "!=" => 78,
  :IS => 79,
  :ISNT => 80,
  "&&" => 81,
  "||" => 82,
  :AND => 83,
  :OR => 84,
  "-=" => 85,
  "+=" => 86,
  "/=" => 87,
  "*=" => 88,
  "%=" => 89,
  "||=" => 90,
  "&&=" => 91,
  "?=" => 92,
  :ASSIGN => 93,
  "->" => 94,
  "=>" => 95,
  "\n" => 96,
  ";" => 97,
  "," => 98,
  "{" => 99,
  "}" => 100,
  "@" => 101,
  "[" => 102,
  "]" => 103,
  "(" => 104,
  ")" => 105 }

racc_nt_base = 106

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "UNLESS",
  "NUMBER",
  "STRING",
  "REGEX",
  "TRUE",
  "FALSE",
  "YES",
  "NO",
  "ON",
  "OFF",
  "IDENTIFIER",
  "PROPERTY_ACCESS",
  "PROTOTYPE_ACCESS",
  "SOAK_ACCESS",
  "CODE",
  "PARAM_START",
  "PARAM",
  "PARAM_END",
  "NEW",
  "RETURN",
  "CALL_START",
  "CALL_END",
  "INDEX_START",
  "INDEX_END",
  "TRY",
  "CATCH",
  "FINALLY",
  "THROW",
  "BREAK",
  "CONTINUE",
  "FOR",
  "IN",
  "OF",
  "BY",
  "WHEN",
  "WHILE",
  "SWITCH",
  "LEADING_WHEN",
  "DELETE",
  "INSTANCEOF",
  "TYPEOF",
  "SUPER",
  "EXTENDS",
  "NEWLINE",
  "COMMENT",
  "JS",
  "INDENT",
  "OUTDENT",
  "UMINUS",
  "UPLUS",
  "NOT",
  "\"!\"",
  "\"!!\"",
  "\"~\"",
  "\"++\"",
  "\"--\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"?\"",
  "\".\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\">>>\"",
  "\"&\"",
  "\"|\"",
  "\"^\"",
  "\"<=\"",
  "\"<\"",
  "\">\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "IS",
  "ISNT",
  "\"&&\"",
  "\"||\"",
  "AND",
  "OR",
  "\"-=\"",
  "\"+=\"",
  "\"/=\"",
  "\"*=\"",
  "\"%=\"",
  "\"||=\"",
  "\"&&=\"",
  "\"?=\"",
  "ASSIGN",
  "\"->\"",
  "\"=>\"",
  "\"\\n\"",
  "\";\"",
  "\",\"",
  "\"{\"",
  "\"}\"",
  "\"@\"",
  "\"[\"",
  "\"]\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Root",
  "Terminator",
  "Expressions",
  "Block",
  "Expression",
  "Value",
  "Call",
  "Code",
  "Operation",
  "Assign",
  "If",
  "Try",
  "Throw",
  "Return",
  "While",
  "For",
  "Switch",
  "Extends",
  "Splat",
  "Existence",
  "Comment",
  "Literal",
  "AssignObj",
  "ParamList",
  "FuncGlyph",
  "Param",
  "Array",
  "Object",
  "Parenthetical",
  "Range",
  "This",
  "Accessor",
  "Invocation",
  "Index",
  "Slice",
  "AssignList",
  "Super",
  "Arguments",
  "ArgList",
  "SimpleArgs",
  "Catch",
  "ForVariables",
  "ForSource",
  "Whens",
  "When",
  "IfBlock",
  "ElsIf",
  "ElsIfs",
  "ElseBody",
  "IfEnd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 44)
  def _reduce_1(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_2(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_5(val, _values, result)
     result = Expressions.wrap(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_6(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_24(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_25(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_28(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_29(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_30(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_31(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_32(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_33(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_34(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_35(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_36(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_37(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_38(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_39(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_40(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_41(val, _values, result)
     result = AssignNode.new(ValueNode.new(val[0]), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_42(val, _values, result)
     result = AssignNode.new(ValueNode.new(LiteralNode.new(val[0])), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_43(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 121)
  def _reduce_44(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 122)
  def _reduce_45(val, _values, result)
     result = ReturnNode.new(ValueNode.new(Value.new('null'))) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 127)
  def _reduce_46(val, _values, result)
     result = CommentNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 134)
  def _reduce_47(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_48(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 136)
  def _reduce_49(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_50(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_51(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_52(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 140)
  def _reduce_53(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_54(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_55(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_56(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_57(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_58(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_59(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_60(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_61(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_62(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_63(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 154)
  def _reduce_64(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_65(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_66(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_67(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_68(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_69(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_70(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_71(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_72(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 165)
  def _reduce_73(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_74(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_75(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_76(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 170)
  def _reduce_77(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_78(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_79(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_80(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_81(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_82(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_83(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_84(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_85(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 181)
  def _reduce_86(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_87(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_88(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_89(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_90(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 187)
  def _reduce_91(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 188)
  def _reduce_92(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 193)
  def _reduce_93(val, _values, result)
     result = ExistenceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 199)
  def _reduce_94(val, _values, result)
     result = CodeNode.new(val[1], val[4], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 200)
  def _reduce_95(val, _values, result)
     result = CodeNode.new([], val[1], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 205)
  def _reduce_96(val, _values, result)
     result = :func 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 206)
  def _reduce_97(val, _values, result)
     result = :boundfunc 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 211)
  def _reduce_98(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 212)
  def _reduce_99(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'grammar.y', 218)
  def _reduce_101(val, _values, result)
     result = SplatNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 223)
  def _reduce_102(val, _values, result)
     result = SplatNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 228)
  def _reduce_103(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 229)
  def _reduce_104(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 230)
  def _reduce_105(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 231)
  def _reduce_106(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 232)
  def _reduce_107(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_108(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_109(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 235)
  def _reduce_110(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_111(val, _values, result)
     result = ValueNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 241)
  def _reduce_112(val, _values, result)
     result = AccessorNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 242)
  def _reduce_113(val, _values, result)
     result = AccessorNode.new(val[1], :prototype) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 243)
  def _reduce_114(val, _values, result)
     result = AccessorNode.new(val[1], :soak) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_115(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_116(val, _values, result)
     result = SliceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 250)
  def _reduce_117(val, _values, result)
     result = IndexNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 255)
  def _reduce_118(val, _values, result)
     result = ObjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 260)
  def _reduce_119(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 261)
  def _reduce_120(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_121(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_122(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 265)
  def _reduce_123(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 266)
  def _reduce_124(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 271)
  def _reduce_125(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 272)
  def _reduce_126(val, _values, result)
     result = val[1].new_instance 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 273)
  def _reduce_127(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 278)
  def _reduce_128(val, _values, result)
     result = ExtendsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 283)
  def _reduce_129(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 284)
  def _reduce_130(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 289)
  def _reduce_131(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 294)
  def _reduce_132(val, _values, result)
     result = CallNode.new(Value.new('super'), val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 299)
  def _reduce_133(val, _values, result)
     result = ThisNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 300)
  def _reduce_134(val, _values, result)
     result = ThisNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_135(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 308)
  def _reduce_136(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 314)
  def _reduce_137(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_138(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 321)
  def _reduce_139(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 326)
  def _reduce_140(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 327)
  def _reduce_141(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 328)
  def _reduce_142(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 329)
  def _reduce_143(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 330)
  def _reduce_144(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 331)
  def _reduce_145(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 332)
  def _reduce_146(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 333)
  def _reduce_147(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 338)
  def _reduce_148(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 339)
  def _reduce_149(val, _values, result)
     result = ([val[0]] << val[2]).flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 344)
  def _reduce_150(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 345)
  def _reduce_151(val, _values, result)
     result = TryNode.new(val[1], nil, nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 347)
  def _reduce_152(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 352)
  def _reduce_153(val, _values, result)
     result = [val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 357)
  def _reduce_154(val, _values, result)
     result = ThrowNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 362)
  def _reduce_155(val, _values, result)
     result = ParentheticalNode.new(val[1], val[0].line) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 367)
  def _reduce_156(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 368)
  def _reduce_157(val, _values, result)
     result = WhileNode.new(val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 369)
  def _reduce_158(val, _values, result)
     result = WhileNode.new(val[2], Expressions.wrap(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 376)
  def _reduce_159(val, _values, result)
     result = ForNode.new(val[0], val[3], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 377)
  def _reduce_160(val, _values, result)
     result = ForNode.new(val[3], val[2], val[1][0], val[1][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 382)
  def _reduce_161(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 383)
  def _reduce_162(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 388)
  def _reduce_163(val, _values, result)
     result = {:source => val[1]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 389)
  def _reduce_164(val, _values, result)
     result = {:source => val[1], :object => true} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 391)
  def _reduce_165(val, _values, result)
     result = val[0].merge(:filter => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 393)
  def _reduce_166(val, _values, result)
     result = val[0].merge(:step => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 399)
  def _reduce_167(val, _values, result)
     result = val[3].rewrite_condition(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 401)
  def _reduce_168(val, _values, result)
     result = val[3].rewrite_condition(val[1]).add_else(val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 406)
  def _reduce_169(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 407)
  def _reduce_170(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 412)
  def _reduce_171(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 414)
  def _reduce_172(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 415)
  def _reduce_173(val, _values, result)
     result = val[2].add_comment(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 420)
  def _reduce_174(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 425)
  def _reduce_175(val, _values, result)
     result = val[1].force_statement 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 430)
  def _reduce_176(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 431)
  def _reduce_177(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 436)
  def _reduce_178(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 437)
  def _reduce_179(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 442)
  def _reduce_180(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 443)
  def _reduce_181(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 448)
  def _reduce_182(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 449)
  def _reduce_183(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 450)
  def _reduce_184(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true, :invert => true}) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
