#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

module CoffeeScript

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 418)
  # Lex and parse a CoffeeScript.
  def parse(code)
    # Uncomment the following line to enable grammar debugging, in combination
    # with the -g flag in the Rake build task.
    # @yydebug = true
    @tokens = Lexer.new.tokenize(code)
    do_parse
  end

  # Retrieve the next token from the list.
  def next_token
    @tokens.shift
  end

  # Raise a custom error class that knows about line numbers.
  def on_error(error_token_id, error_value, value_stack)
    raise ParseError.new(token_to_str(error_token_id), error_value, value_stack)
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'93,264,99,17,21,24,30,35,40,48,52,55,59,253,246,66,69,247,132,246,6',
'133,247,22,25,102,79,36,41,233,36,41,89,231,106,110,111,166,11,-166',
'-166,-166,128,79,36,41,233,106,110,111,116,119,122,88,92,96,98,101,105',
'109,113,115,118,121,87,91,95,97,100,104,108,112,114,117,120,86,90,94',
'128,128,103,107,31,137,128,128,72,128,60,8,63,236,17,21,24,30,35,40',
'48,52,55,59,228,128,66,69,1,4,9,126,230,18,22,25,29,123,79,44,49,125',
'61,156,64,67,241,240,6,11,79,153,8,234,27,33,38,43,46,51,221,57,156',
'168,169,71,81,36,41,229,153,226,220,123,123,129,6,125,125,123,123,162',
'123,125,125,79,125,220,156,36,41,79,254,31,79,6,153,53,123,60,8,63,125',
'17,21,24,30,35,40,48,52,55,59,228,249,66,69,1,4,9,79,6,18,22,25,29,228',
'156,44,49,215,61,79,64,67,153,272,6,11,36,41,36,41,27,33,38,43,46,51',
'75,57,-166,-166,-166,71,163,36,41,229,81,6,284,157,238,265,253,-166',
'-166,-166,36,41,229,6,66,69,273,137,244,-166,-166,-166,,31,-166,-166',
'-166,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22',
'25,29,,156,44,49,,61,,64,67,153,,6,11,-166,-166,-166,,27,33,38,43,46',
'51,,57,-166,-166,-166,71,106,110,111,,,6,,157,106,110,111,116,119,122',
'88,92,96,98,101,105,109,113,106,110,111,,,31,,,,53,,60,8,63,,17,21,24',
'30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67',
',,6,11,,,,,27,33,38,43,46,51,,57,,,,71,106,110,111,116,119,122,88,92',
'96,98,101,105,109,113,115,118,121,87,91,95,97,100,,,,,,31,,,,53,,60',
'8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44',
'49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,106,110,111,116',
'119,122,88,92,96,98,101,105,109,113,115,118,121,87,91,95,97,100,,,,',
',31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18',
'22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,106',
'110,111,116,119,122,88,92,96,98,101,105,109,113,115,118,121,87,91,95',
'97,100,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69',
'1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51',
',57,,,,71,106,110,111,116,119,122,88,92,96,98,101,105,109,113,115,118',
'121,87,91,95,97,100,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52',
'55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33',
'38,43,46,51,,57,,,,71,106,110,111,116,119,122,88,92,96,98,101,105,109',
'113,115,118,121,87,91,95,97,100,,276,,,,31,,,,53,,60,8,63,,17,21,24',
'30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67',
',,6,11,,,,,27,33,38,43,46,51,,57,,,,71,106,110,111,116,119,122,88,92',
'96,98,101,105,109,113,115,118,121,87,91,95,97,100,,,,,,31,,,,53,,60',
'8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44',
'49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,106,110,111,116',
'119,122,88,92,96,98,101,105,109,113,115,118,121,87,91,95,97,100,,,,',
',31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18',
'22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,106',
'110,111,116,119,122,88,92,96,98,101,105,109,113,115,118,121,87,91,95',
'97,100,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69',
'1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51',
',57,,,,71,106,110,111,116,119,122,88,92,96,98,101,105,109,113,106,110',
'111,116,119,122,88,92,96,98,101,,,31,,,,53,,60,8,63,,17,21,24,30,35',
'40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11',
',,,,27,33,38,43,46,51,,57,,,,71,106,110,111,116,119,122,88,92,96,98',
'101,105,109,113,106,110,111,116,119,122,88,92,96,98,101,,,31,,,,53,',
'60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,',
',44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,106,110,111',
'116,119,122,88,92,96,98,101,105,109,113,106,110,111,116,119,122,88,92',
'96,98,101,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69',
'1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51',
',57,,,,71,106,110,111,116,119,122,88,92,106,110,111,116,119,122,88,92',
'106,110,111,116,119,122,88,92,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40',
'48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,',
',,27,33,38,43,46,51,,57,,,,71,106,110,111,116,119,122,106,110,111,116',
'119,122,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55',
'59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38',
'43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17',
'21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,',
'64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,',
',,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,',
',18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,',
'71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48',
'52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27',
'33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63',
',17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,',
'61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,',
',,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4',
'9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57',
',,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40',
'48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,149',
',,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,',
'60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,',
',44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,',
',,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66',
'69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,258,,,,27,33,38,43',
'46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,36,41,,53,,60,8,63,,17',
'21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,',
'64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,',
',,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,',
',18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,',
'71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48',
'52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27',
'33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63',
',17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,',
'61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,',
',,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4',
'9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57',
',,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40',
'48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,',
',,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60',
'8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44',
'49,,61,,64,67,,,6,11,149,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,',
',,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66',
'69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46',
'51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24',
'30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67',
',,6,11,149,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,',
',31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18',
'22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,',
',,,,,,,,,,,,,,,,,,,,,,,,,,31,36,41,,53,,60,8,63,,17,21,24,30,35,40,48',
'52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27',
'33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63',
',17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,',
'61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,',
',,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4',
'9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57',
',,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40',
'48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,172',
',,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60',
'8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44',
'49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,',
',,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69',
'1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51',
',57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30',
'35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6',
'11,149,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31',
',,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22',
'25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,,,,',
',,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55',
'59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38',
'43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17',
'21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,',
'64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,',
',,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,',
',18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,',
'71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48',
'52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27',
'33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63',
',17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,',
'61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,',
',,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4',
'9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57',
',,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40',
'48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,',
',,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60',
'8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44',
'49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,',
',,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69',
'1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51',
',57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30',
'35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6',
'11,,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,',
'53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25',
'29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,',
',,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59',
',,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43',
'46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21',
'24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64',
'67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,',
',31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18',
'22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,',
',,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52',
'55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33',
'38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,',
'17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61',
',64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,',
',,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9',
',,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,',
',71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40',
'48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,',
',,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60',
'8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44',
'49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,',
',,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69',
'1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51',
',57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30',
'35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6',
'11,,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,',
'53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25',
'29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,',
',,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59',
',,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43',
'46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21',
'24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64',
'67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,',
',31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18',
'22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33,38,43,46,51,,57,,,,71,',
',,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,,17,21,24,30,35,40,48,52',
'55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61,,64,67,,,6,11,,,,,27,33',
'38,43,46,51,,57,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,31,,,,53,,60,8,63,',
'17,21,24,30,35,40,48,52,55,59,,,66,69,1,4,9,,,18,22,25,29,,,44,49,,61',
',64,67,,,6,11,,,,,27,33,38,43,46,51,93,57,99,,,71,,17,21,24,30,35,40',
'48,52,55,59,,,,,,,,,102,,22,25,,,,89,31,,,,53,,60,,63,11,,,,,106,110',
'111,116,119,122,88,92,96,98,101,105,109,113,115,118,121,87,91,95,97',
'100,104,108,112,114,117,120,86,90,94,224,,103,107,93,,99,,,243,,,72',
',60,,63,,,,,,,,,,,,,102,,,,,,,89,,,,,,,,,,,,,,,106,110,111,116,119,122',
'88,92,96,98,101,105,109,113,115,118,121,87,91,95,97,100,104,108,112',
'114,117,120,86,90,94,,,103,107,93,,99,,,282,17,21,24,30,35,40,48,52',
'55,59,,,,,,,,,,102,22,25,,,,,89,,,,,,,,,11,,,,,,106,110,111,116,119',
'122,88,92,96,98,101,105,109,113,115,118,121,87,91,95,97,100,104,108',
'112,114,117,120,86,90,94,,,103,107,93,,99,,,286,,72,,60,,63,,,,,,,,',
',,,,,102,,,,,,,89,,,,,,,,,,,,,,,106,110,111,116,119,122,88,92,96,98',
'101,105,109,113,115,118,121,87,91,95,97,100,104,108,112,114,117,120',
'86,90,94,,,103,107,93,,99,,,,,,,,,,,,,,,,,,,,,,,102,,,,,,,89,,,,,,,',
',,,,,,,106,110,111,116,119,122,88,92,96,98,101,105,109,113,115,118,121',
'87,91,95,97,100,104,108,112,114,117,120,86,90,94,,,103,107,93,,99,,',
',,,,,,,,,,,,,,,,,,,,102,,,,,,,89,,,,,,,,,,,,,,,106,110,111,116,119,122',
'88,92,96,98,101,105,109,113,115,118,121,87,91,95,97,100,104,108,112',
'114,117,120,86,90,94,,,103,107,93,,99,,,,,,,,,,,,,,,,,,,,,,,102,,,,',
',,89,,,,,,,79,,,,,,,,106,110,111,116,119,122,88,92,96,98,101,105,109',
'113,115,118,121,87,91,95,97,100,104,108,112,114,117,120,86,90,94,,,103',
'107,93,,99,,,,,,,,,,,,,,,,,,,,,,,102,,,,,,,89,,,,,,,223,,,,,,,,106,110',
'111,116,119,122,88,92,96,98,101,105,109,113,115,118,121,87,91,95,97',
'100,104,108,112,114,117,120,86,90,94,,,103,107,93,,99,,,,,,,,,,,,,,',
',,,,,,,,102,,,,,,,89,,,,,,,,,,,,,,,106,110,111,116,119,122,88,92,96',
'98,101,105,109,113,115,118,121,87,91,95,97,100,104,108,112,114,117,120',
'86,90,94,,,103,107,93,,99,,,,,,,,,,,,,,,,,,,,,,,102,,,,,,,89,,,,,,,',
',,,,,,,106,110,111,116,119,122,88,92,96,98,101,105,109,113,115,118,121',
'87,91,95,97,100,104,108,112,114,117,120,86,90,94,,,103,107,93,,99,,',
',,,,,,,,,,,,,,,,,,,,102,,,,,,,89,,,,,,,,,,,,,,,106,110,111,116,119,122',
'88,92,96,98,101,105,109,113,115,118,121,87,91,95,97,100,104,108,112',
'114,117,120,86,90,94,,,103,107,93,,99,,,,,,,,,,,,,,,,,,,,,,,102,,,,',
',,89,,,,,,,,,,,,,,,106,110,111,116,119,122,88,92,96,98,101,105,109,113',
'115,118,121,87,91,95,97,100,104,108,112,114,117,120,86,90,94,,,103,107',
'93,,99,,,,,,,,,,,,,,,,,,,,,,,102,,,,,,,89,,,,,,,,,,,,,,,106,110,111',
'116,119,122,88,92,96,98,101,105,109,113,115,118,121,87,91,95,97,100',
'104,108,112,114,117,120,86,90,94,,,103,107,93,,99,,,,,,,,,,,,,,,,,,',
',,,,102,,,,,,,89,,,,,,,,,,,,,,,106,110,111,116,119,122,88,92,96,98,101',
'105,109,113,115,118,121,87,91,95,97,100,104,108,112,114,117,120,86,90',
'94,,,103,107,93,,99,,,,,,,,,,,,,,,,,,,,,,,102,,,,,,,89,,,,,,,,,,,,,',
',106,110,111,116,119,122,88,92,96,98,101,105,109,113,115,118,121,87',
'91,95,97,100,104,108,112,114,117,120,86,90,94,,,103,107,93,,99,,,,,',
',,,,,,,,,,,,,,,,,102,,,,,,,89,,,,,,,79,,,,,,,,106,110,111,116,119,122',
'88,92,96,98,101,105,109,113,115,118,121,87,91,95,97,100,104,108,112',
'114,117,120,86,90,94,,,103,107,93,,99,,,,,,,,,,,,,,,,,,,,,,,102,,,,',
',,89,,,,,,,,,,,,,,,106,110,111,116,119,122,88,92,96,98,101,105,109,113',
'115,118,121,87,91,95,97,100,104,108,112,114,117,120,86,90,94,224,,103',
'107,93,,99,,,,,,,,,,,,,,,,,,,,,,,102,,,,,,,89,,,,,,,79,,,,,,,,106,110',
'111,116,119,122,88,92,96,98,101,105,109,113,115,118,121,87,91,95,97',
'100,104,108,112,114,117,120,86,90,94,,,103,107,93,,99,,,,,,,,,,,,,,',
',,,,,,,,102,,,,,,,89,,,,,,,,,,,,,,,106,110,111,116,119,122,88,92,96',
'98,101,105,109,113,115,118,121,87,91,95,97,100,104,108,112,114,117,120',
'86,90,94,,,103,107,93,,99,,,,,,,,,,,,,,,,,,,,,,,102,,,,,,,89,,,,,,,',
',,,,,,,106,110,111,116,119,122,88,92,96,98,101,105,109,113,115,118,121',
'87,91,95,97,100,104,108,112,114,117,120,86,90,94,93,,99,,,,,,,,,,,,',
',,,,,,,,,,102,,,,,,,89,,,,,,,,,,,,,,,106,110,111,116,119,122,88,92,96',
'98,101,105,109,113,115,118,121,87,91,95,97,100,104,108,112,114,117,120',
'86,90,94,93,,99,,,,,,,,,,,,,,,,,,,,,,,102,,,,,,,89,,,,,,,,,,,,,,,106',
'110,111,116,119,122,88,92,96,98,101,105,109,113,115,118,121,87,91,95',
'97,100,104,108,112,114,117,120,86,90,94,102,,,,,,,89,,,,,,,,,,,,,,,106',
'110,111,116,119,122,88,92,96,98,101,105,109,113,115,118,121,87,91,95',
'97,100,104,108,112,114,117,120,86,90,94,102,,,,,,,89,,,,,,,,,,,,,,,106',
'110,111,116,119,122,88,92,96,98,101,105,109,113,115,118,121,87,91,95',
'97,100,104,108,112,114,117,120,86,90,94,102,,,,,,,89,,,,,,,,,,,,,,,106',
'110,111,116,119,122,88,92,96,98,101,105,109,113,115,118,121,87,91,95',
'97,100,104,108,112,114,117,120,86,90,94,89,,,,,,,,,,,,,,,106,110,111',
'116,119,122,88,92,96,98,101,105,109,113,115,118,121,87,91,95,97,100',
'104,108,112,114,117,120,86,90,94,89,,,,,,,,,,,,,,,106,110,111,116,119',
'122,88,92,96,98,101,105,109,113,115,118,121,87,91,95,97,100,104,108',
'112,114,117,120,86,90,94,89,,,,,,,,,,,,,,,106,110,111,116,119,122,88',
'92,96,98,101,105,109,113,115,118,121,87,91,95,97,100,104,108,112,114',
'117,120,86,90,94,89,,,,,,,,,,,,,,,106,110,111,116,119,122,88,92,96,98',
'101,105,109,113,115,118,121,87,91,95,97,100,104,108,112,114,117,120',
'86,90,94,89,,,,,,,,,,,,,,,106,110,111,116,119,122,88,92,96,98,101,105',
'109,113,115,118,121,87,91,95,97,100,104,108,112,114,117,120,86,90,94',
'89,,,,,,,,,,,,,,,106,110,111,116,119,122,88,92,96,98,101,105,109,113',
'115,118,121,87,91,95,97,100,104,108,112,114,117,120,86,90,94,106,110',
'111,116,119,122,88,92,96,98,101,105,109,113,115,118,121,87,91,95,97',
'100,104,108,112,114,117,120,86,90,94,106,110,111,116,119,122,88,92,96',
'98,101,105,109,113,115,118,121,87,91,95,97,100,104,108,112,114,117,120',
'86,90,94,106,110,111,116,119,122,88,92,96,98,101,105,109,113,115,118',
'121,87,91,95,97,100,104,108,112,114,117,120,86,90,94,106,110,111,116',
'119,122,88,92,96,98,101,105,109,113,115,118,121,87,91,95,97,100,104',
'108,112,114,117,120,86,90,94,106,110,111,116,119,122,88,92,96,98,101',
'105,109,113,115,118,121,87,91,95,97,100,104,108,112,114,117,120,86,90',
'94' ]
        racc_action_table = arr = Array.new(8661, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'160,235,160,126,126,126,126,126,126,126,126,126,126,223,219,244,244',
'219,16,242,223,16,242,126,126,160,219,155,155,155,281,281,160,155,211',
'211,211,75,126,164,164,164,74,238,235,235,235,160,160,160,160,160,160',
'160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160',
'160,160,160,160,160,160,160,160,151,152,160,160,244,29,73,47,126,15',
'126,95,126,160,95,95,95,95,95,95,95,95,95,95,150,214,95,95,95,95,95',
'15,153,95,95,95,95,74,240,95,95,74,95,232,95,95,171,170,95,95,31,232',
'81,156,95,95,95,95,95,95,137,95,233,78,78,95,12,150,150,150,233,150',
'136,151,152,15,232,151,152,73,47,67,15,73,47,169,15,194,261,171,171',
'81,224,95,132,233,261,95,214,95,276,95,214,276,276,276,276,276,276,276',
'276,276,276,237,221,276,276,276,276,276,272,261,276,276,276,276,213',
'157,276,276,128,276,9,276,276,157,250,276,276,10,10,233,233,276,276',
'276,276,276,276,2,276,141,141,141,276,69,237,237,237,83,157,280,157',
'168,237,250,135,135,135,213,213,213,250,133,133,250,102,213,143,143',
'143,,276,147,147,147,276,,276,4,276,,4,4,4,4,4,4,4,4,4,4,,,4,4,4,4,4',
',,4,4,4,4,,60,4,4,,4,,4,4,60,,4,4,139,139,139,,4,4,4,4,4,4,,4,140,140',
'140,4,205,205,205,,,60,,60,179,179,179,179,179,179,179,179,179,179,179',
'179,179,179,208,208,208,,,4,,,,4,,4,8,4,,8,8,8,8,8,8,8,8,8,8,,,8,8,8',
'8,8,,,8,8,8,8,,,8,8,,8,,8,8,,,8,8,,,,,8,8,8,8,8,8,,8,,,,8,192,192,192',
'192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192',
'192,192,,,,,,8,,,,8,,8,120,8,,120,120,120,120,120,120,120,120,120,120',
',,120,120,120,120,120,,,120,120,120,120,,,120,120,,120,,120,120,,,120',
'120,,,,,120,120,120,120,120,120,,120,,,,120,203,203,203,203,203,203',
'203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,,,,',
',120,,,,120,,120,258,120,,258,258,258,258,258,258,258,258,258,258,,',
'258,258,258,258,258,,,258,258,258,258,,,258,258,,258,,258,258,,,258',
'258,,,,,258,258,258,258,258,258,,258,,,,258,183,183,183,183,183,183',
'183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,,,,',
',258,,,,258,,258,256,258,,256,256,256,256,256,256,256,256,256,256,,',
'256,256,256,256,256,,,256,256,256,256,,,256,256,,256,,256,256,,,256',
'256,,,,,256,256,256,256,256,256,,256,,,,256,196,196,196,196,196,196',
'196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,,,,',
',256,,,,256,,256,254,256,,254,254,254,254,254,254,254,254,254,254,,',
'254,254,254,254,254,,,254,254,254,254,,,254,254,,254,,254,254,,,254',
'254,,,,,254,254,254,254,254,254,,254,,,,254,189,189,189,189,189,189',
'189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,,254',
',,,254,,,,254,,254,253,254,,253,253,253,253,253,253,253,253,253,253',
',,253,253,253,253,253,,,253,253,253,253,,,253,253,,253,,253,253,,,253',
'253,,,,,253,253,253,253,253,253,,253,,,,253,187,187,187,187,187,187',
'187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,,,,',
',253,,,,253,,253,247,253,,247,247,247,247,247,247,247,247,247,247,,',
'247,247,247,247,247,,,247,247,247,247,,,247,247,,247,,247,247,,,247',
'247,,,,,247,247,247,247,247,247,,247,,,,247,201,201,201,201,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,,,,',
',247,,,,247,,247,18,247,,18,18,18,18,18,18,18,18,18,18,,,18,18,18,18',
'18,,,18,18,18,18,,,18,18,,18,,18,18,,,18,18,,,,,18,18,18,18,18,18,,18',
',,,18,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199',
'199,199,199,199,199,199,,,,,,18,,,,18,,18,27,18,,27,27,27,27,27,27,27',
'27,27,27,,,27,27,27,27,27,,,27,27,27,27,,,27,27,,27,,27,27,,,27,27,',
',,,27,27,27,27,27,27,,27,,,,27,210,210,210,210,210,210,210,210,210,210',
'210,210,210,210,200,200,200,200,200,200,200,200,200,200,200,,,27,,,',
'27,,27,246,27,,246,246,246,246,246,246,246,246,246,246,,,246,246,246',
'246,246,,,246,246,246,246,,,246,246,,246,,246,246,,,246,246,,,,,246',
'246,246,246,246,246,,246,,,,246,204,204,204,204,204,204,204,204,204',
'204,204,204,204,204,202,202,202,202,202,202,202,202,202,202,202,,,246',
',,,246,,246,234,246,,234,234,234,234,234,234,234,234,234,234,,,234,234',
'234,234,234,,,234,234,234,234,,,234,234,,234,,234,234,,,234,234,,,,',
'234,234,234,234,234,234,,234,,,,234,207,207,207,207,207,207,207,207',
'207,207,207,207,207,207,197,197,197,197,197,197,197,197,197,197,197',
',,234,,,,234,,234,33,234,,33,33,33,33,33,33,33,33,33,33,,,33,33,33,33',
'33,,,33,33,33,33,,,33,33,,33,,33,33,,,33,33,,,,,33,33,33,33,33,33,,33',
',,,33,193,193,193,193,193,193,193,193,188,188,188,188,188,188,188,188',
'190,190,190,190,190,190,190,190,,,,33,,,,33,,33,38,33,,38,38,38,38,38',
'38,38,38,38,38,,,38,38,38,38,38,,,38,38,38,38,,,38,38,,38,,38,38,,,38',
'38,,,,,38,38,38,38,38,38,,38,,,,38,180,180,180,180,180,180,184,184,184',
'184,184,184,,,,,,,,,,,,,,,,38,,,,38,,38,43,38,,43,43,43,43,43,43,43',
'43,43,43,,,43,43,43,43,43,,,43,43,43,43,,,43,43,,43,,43,43,,,43,43,',
',,,43,43,43,43,43,43,,43,,,,43,,,,,,,,,,,,,,,,,,,,,,,,,,,,43,,,,43,',
'43,44,43,,44,44,44,44,44,44,44,44,44,44,,,44,44,44,44,44,,,44,44,44',
'44,,,44,44,,44,,44,44,,,44,44,,,,,44,44,44,44,44,44,,44,,,,44,,,,,,',
',,,,,,,,,,,,,,,,,,,,,44,,,,44,,44,46,44,,46,46,46,46,46,46,46,46,46',
'46,,,46,46,46,46,46,,,46,46,46,46,,,46,46,,46,,46,46,,,46,46,,,,,46',
'46,46,46,46,46,,46,,,,46,,,,,,,,,,,,,,,,,,,,,,,,,,,,46,,,,46,,46,230',
'46,,230,230,230,230,230,230,230,230,230,230,,,230,230,230,230,230,,',
'230,230,230,230,,,230,230,,230,,230,230,,,230,230,,,,,230,230,230,230',
'230,230,,230,,,,230,,,,,,,,,,,,,,,,,,,,,,,,,,,,230,,,,230,,230,49,230',
',49,49,49,49,49,49,49,49,49,49,,,49,49,49,49,49,,,49,49,49,49,,,49,49',
',49,,49,49,,,49,49,,,,,49,49,49,49,49,49,,49,,,,49,,,,,,,,,,,,,,,,,',
',,,,,,,,,,49,,,,49,,49,51,49,,51,51,51,51,51,51,51,51,51,51,,,51,51',
'51,51,51,,,51,51,51,51,,,51,51,,51,,51,51,,,51,51,,,,,51,51,51,51,51',
'51,,51,,,,51,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,,,,51,,51,53,51,,53,53,53',
'53,53,53,53,53,53,53,,,53,53,53,53,53,,,53,53,53,53,,,53,53,,53,,53',
'53,,,53,53,53,,,,53,53,53,53,53,53,,53,,,,53,,,,,,,,,,,,,,,,,,,,,,,',
',,,,53,,,,53,,53,119,53,,119,119,119,119,119,119,119,119,119,119,,,119',
'119,119,119,119,,,119,119,119,119,,,119,119,,119,,119,119,,,119,119',
',,,,119,119,119,119,119,119,,119,,,,119,,,,,,,,,,,,,,,,,,,,,,,,,,,,119',
',,,119,,119,229,119,,229,229,229,229,229,229,229,229,229,229,,,229,229',
'229,229,229,,,229,229,229,229,,,229,229,,229,,229,229,,,229,229,229',
',,,229,229,229,229,229,229,,229,,,,229,,,,,,,,,,,,,,,,,,,,,,,,,,,,229',
'229,229,,229,,229,61,229,,61,61,61,61,61,61,61,61,61,61,,,61,61,61,61',
'61,,,61,61,61,61,,,61,61,,61,,61,61,,,61,61,,,,,61,61,61,61,61,61,,61',
',,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,61,,,,61,,61,63,61,,63,63,63,63,63',
'63,63,63,63,63,,,63,63,63,63,63,,,63,63,63,63,,,63,63,,63,,63,63,,,63',
'63,,,,,63,63,63,63,63,63,,63,,,,63,,,,,,,,,,,,,,,,,,,,,,,,,,,,63,,,',
'63,,63,64,63,,64,64,64,64,64,64,64,64,64,64,,,64,64,64,64,64,,,64,64',
'64,64,,,64,64,,64,,64,64,,,64,64,,,,,64,64,64,64,64,64,,64,,,,64,,,',
',,,,,,,,,,,,,,,,,,,,,,,,64,,,,64,,64,227,64,,227,227,227,227,227,227',
'227,227,227,227,,,227,227,227,227,227,,,227,227,227,227,,,227,227,,227',
',227,227,,,227,227,,,,,227,227,227,227,227,227,,227,,,,227,,,,,,,,,',
',,,,,,,,,,,,,,,,,,227,,,,227,,227,220,227,,220,220,220,220,220,220,220',
'220,220,220,,,220,220,220,220,220,,,220,220,220,220,,,220,220,,220,',
'220,220,,,220,220,,,,,220,220,220,220,220,220,,220,,,,220,,,,,,,,,,',
',,,,,,,,,,,,,,,,,220,,,,220,,220,71,220,,71,71,71,71,71,71,71,71,71',
'71,,,71,71,71,71,71,,,71,71,71,71,,,71,71,,71,,71,71,,,71,71,,,,,71',
'71,71,71,71,71,,71,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,71,,,,71,,71,72',
'71,,72,72,72,72,72,72,72,72,72,72,,,72,72,72,72,72,,,72,72,72,72,,,72',
'72,,72,,72,72,,,72,72,72,,,,72,72,72,72,72,72,,72,,,,72,,,,,,,,,,,,',
',,,,,,,,,,,,,,,72,,,,72,,72,118,72,,118,118,118,118,118,118,118,118',
'118,118,,,118,118,118,118,118,,,118,118,118,118,,,118,118,,118,,118',
'118,,,118,118,,,,,118,118,118,118,118,118,,118,,,,118,,,,,,,,,,,,,,',
',,,,,,,,,,,,,118,,,,118,,118,162,118,,162,162,162,162,162,162,162,162',
'162,162,,,162,162,162,162,162,,,162,162,162,162,,,162,162,,162,,162',
'162,,,162,162,162,,,,162,162,162,162,162,162,,162,,,,162,,,,,,,,,,,',
',,,,,,,,,,,,,,,,162,,,,162,,162,0,162,,0,0,0,0,0,0,0,0,0,0,,,0,0,0,0',
'0,,,0,0,0,0,,,0,0,,0,,0,0,,,0,0,,,,,0,0,0,0,0,0,,0,,,,0,,,,,,,,,,,,',
',,,,,,,,,,,,,,,0,0,0,,0,,0,122,0,,122,122,122,122,122,122,122,122,122',
'122,,,122,122,122,122,122,,,122,122,122,122,,,122,122,,122,,122,122',
',,122,122,,,,,122,122,122,122,122,122,,122,,,,122,,,,,,,,,,,,,,,,,,',
',,,,,,,,,122,,,,122,,122,149,122,,149,149,149,149,149,149,149,149,149',
'149,,,149,149,149,149,149,,,149,149,149,149,,,149,149,,149,,149,149',
',,149,149,,,,,149,149,149,149,149,149,,149,,,,149,,,,,,,,,,,,,,,,,,',
',,,,,,,,,149,,,,149,,149,129,149,,129,129,129,129,129,129,129,129,129',
'129,,,129,129,129,129,129,,,129,129,129,129,,,129,129,,129,,129,129',
',,129,129,,,,,129,129,129,129,129,129,,129,,,,129,,,,,,,,,,,,,,,,,,',
',,,,,,,,,129,,,,129,,129,79,129,,79,79,79,79,79,79,79,79,79,79,,,79',
'79,79,79,79,,,79,79,79,79,,,79,79,,79,,79,79,,,79,79,,79,,,79,79,79',
'79,79,79,,79,,,,79,,,,,,,,,,,,,,,,,,,,,,,,,,,,79,,,,79,,79,80,79,,80',
'80,80,80,80,80,80,80,80,80,,,80,80,80,80,80,,,80,80,80,80,,,80,80,,80',
',80,80,,,80,80,,,,,80,80,80,80,80,80,,80,,,,80,,,,,,,,,,,,,,,,,,,,,',
',,,,,,80,,,,80,,80,117,80,,117,117,117,117,117,117,117,117,117,117,',
',117,117,117,117,117,,,117,117,117,117,,,117,117,,117,,117,117,,,117',
'117,,,,,117,117,117,117,117,117,,117,,,,117,,,,,,,,,,,,,,,,,,,,,,,,',
',,,117,,,,117,,117,125,117,,125,125,125,125,125,125,125,125,125,125',
',,125,125,125,125,125,,,125,125,125,125,,,125,125,,125,,125,125,,,125',
'125,125,,,,125,125,125,125,125,125,,125,,,,125,,,,,,,,,,,,,,,,,,,,,',
',,,,,,125,,,,125,,125,86,125,,86,86,86,86,86,86,86,86,86,86,,,86,86',
'86,86,86,,,86,86,86,86,,,86,86,,86,,86,86,,,86,86,,,,,86,86,86,86,86',
'86,,86,,,,86,,,,,,,,,,,,,,,,,,,,,,,,,,,,86,,,,86,,86,87,86,,87,87,87',
'87,87,87,87,87,87,87,,,87,87,87,87,87,,,87,87,87,87,,,87,87,,87,,87',
'87,,,87,87,,,,,87,87,87,87,87,87,,87,,,,87,,,,,,,,,,,,,,,,,,,,,,,,,',
',,87,,,,87,,87,88,87,,88,88,88,88,88,88,88,88,88,88,,,88,88,88,88,88',
',,88,88,88,88,,,88,88,,88,,88,88,,,88,88,,,,,88,88,88,88,88,88,,88,',
',,88,,,,,,,,,,,,,,,,,,,,,,,,,,,,88,,,,88,,88,89,88,,89,89,89,89,89,89',
'89,89,89,89,,,89,89,89,89,89,,,89,89,89,89,,,89,89,,89,,89,89,,,89,89',
',,,,89,89,89,89,89,89,,89,,,,89,,,,,,,,,,,,,,,,,,,,,,,,,,,,89,,,,89',
',89,90,89,,90,90,90,90,90,90,90,90,90,90,,,90,90,90,90,90,,,90,90,90',
'90,,,90,90,,90,,90,90,,,90,90,,,,,90,90,90,90,90,90,,90,,,,90,,,,,,',
',,,,,,,,,,,,,,,,,,,,,90,,,,90,,90,91,90,,91,91,91,91,91,91,91,91,91',
'91,,,91,91,91,91,91,,,91,91,91,91,,,91,91,,91,,91,91,,,91,91,,,,,91',
'91,91,91,91,91,,91,,,,91,,,,,,,,,,,,,,,,,,,,,,,,,,,,91,,,,91,,91,92',
'91,,92,92,92,92,92,92,92,92,92,92,,,92,92,92,92,92,,,92,92,92,92,,,92',
'92,,92,,92,92,,,92,92,,,,,92,92,92,92,92,92,,92,,,,92,,,,,,,,,,,,,,',
',,,,,,,,,,,,,92,,,,92,,92,93,92,,93,93,93,93,93,93,93,93,93,93,,,93',
'93,93,93,93,,,93,93,93,93,,,93,93,,93,,93,93,,,93,93,,,,,93,93,93,93',
'93,93,,93,,,,93,,,,,,,,,,,,,,,,,,,,,,,,,,,,93,,,,93,,93,94,93,,94,94',
'94,94,94,94,94,94,94,94,,,94,94,94,94,94,,,94,94,94,94,,,94,94,,94,',
'94,94,,,94,94,,,,,94,94,94,94,94,94,,94,,,,94,,,,,,,,,,,,,,,,,,,,,,',
',,,,,94,,,,94,,94,121,94,,121,121,121,121,121,121,121,121,121,121,,',
'121,121,121,121,121,,,121,121,121,121,,,121,121,,121,,121,121,,,121',
'121,,,,,121,121,121,121,121,121,,121,,,,121,,,,,,,,,,,,,,,,,,,,,,,,',
',,,121,,,,121,,121,96,121,,96,96,96,96,96,96,96,96,96,96,,,96,96,96',
'96,96,,,96,96,96,96,,,96,96,,96,,96,96,,,96,96,,,,,96,96,96,96,96,96',
',96,,,,96,,,,,,,,,,,,,,,,,,,,,,,,,,,,96,,,,96,,96,97,96,,97,97,97,97',
'97,97,97,97,97,97,,,97,97,97,97,97,,,97,97,97,97,,,97,97,,97,,97,97',
',,97,97,,,,,97,97,97,97,97,97,,97,,,,97,,,,,,,,,,,,,,,,,,,,,,,,,,,,97',
',,,97,,97,98,97,,98,98,98,98,98,98,98,98,98,98,,,98,98,98,98,98,,,98',
'98,98,98,,,98,98,,98,,98,98,,,98,98,,,,,98,98,98,98,98,98,,98,,,,98',
',,,,,,,,,,,,,,,,,,,,,,,,,,,98,,,,98,,98,99,98,,99,99,99,99,99,99,99',
'99,99,99,,,99,99,99,99,99,,,99,99,99,99,,,99,99,,99,,99,99,,,99,99,',
',,,99,99,99,99,99,99,,99,,,,99,,,,,,,,,,,,,,,,,,,,,,,,,,,,99,,,,99,',
'99,116,99,,116,116,116,116,116,116,116,116,116,116,,,116,116,116,116',
'116,,,116,116,116,116,,,116,116,,116,,116,116,,,116,116,,,,,116,116',
'116,116,116,116,,116,,,,116,,,,,,,,,,,,,,,,,,,,,,,,,,,,116,,,,116,,116',
'101,116,,101,101,101,101,101,101,101,101,101,101,,,101,101,101,101,101',
',,101,101,101,101,,,101,101,,101,,101,101,,,101,101,,,,,101,101,101',
'101,101,101,,101,,,,101,,,,,,,,,,,,,,,,,,,,,,,,,,,,101,,,,101,,101,123',
'101,,123,123,123,123,123,123,123,123,123,123,,,123,123,123,123,123,',
',123,123,123,123,,,123,123,,123,,123,123,,,123,123,,,,,123,123,123,123',
'123,123,,123,,,,123,,,,,,,,,,,,,,,,,,,,,,,,,,,,123,,,,123,,123,103,123',
',103,103,103,103,103,103,103,103,103,103,,,103,103,103,103,103,,,103',
'103,103,103,,,103,103,,103,,103,103,,,103,103,,,,,103,103,103,103,103',
'103,,103,,,,103,,,,,,,,,,,,,,,,,,,,,,,,,,,,103,,,,103,,103,104,103,',
'104,104,104,104,104,104,104,104,104,104,,,104,104,104,104,104,,,104',
'104,104,104,,,104,104,,104,,104,104,,,104,104,,,,,104,104,104,104,104',
'104,,104,,,,104,,,,,,,,,,,,,,,,,,,,,,,,,,,,104,,,,104,,104,105,104,',
'105,105,105,105,105,105,105,105,105,105,,,105,105,105,105,105,,,105',
'105,105,105,,,105,105,,105,,105,105,,,105,105,,,,,105,105,105,105,105',
'105,,105,,,,105,,,,,,,,,,,,,,,,,,,,,,,,,,,,105,,,,105,,105,107,105,',
'107,107,107,107,107,107,107,107,107,107,,,107,107,107,107,107,,,107',
'107,107,107,,,107,107,,107,,107,107,,,107,107,,,,,107,107,107,107,107',
'107,,107,,,,107,,,,,,,,,,,,,,,,,,,,,,,,,,,,107,,,,107,,107,108,107,',
'108,108,108,108,108,108,108,108,108,108,,,108,108,108,108,108,,,108',
'108,108,108,,,108,108,,108,,108,108,,,108,108,,,,,108,108,108,108,108',
'108,,108,,,,108,,,,,,,,,,,,,,,,,,,,,,,,,,,,108,,,,108,,108,109,108,',
'109,109,109,109,109,109,109,109,109,109,,,109,109,109,109,109,,,109',
'109,109,109,,,109,109,,109,,109,109,,,109,109,,,,,109,109,109,109,109',
'109,,109,,,,109,,,,,,,,,,,,,,,,,,,,,,,,,,,,109,,,,109,,109,112,109,',
'112,112,112,112,112,112,112,112,112,112,,,112,112,112,112,112,,,112',
'112,112,112,,,112,112,,112,,112,112,,,112,112,,,,,112,112,112,112,112',
'112,,112,,,,112,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,,,,112,,112,113,112,',
'113,113,113,113,113,113,113,113,113,113,,,113,113,113,113,113,,,113',
'113,113,113,,,113,113,,113,,113,113,,,113,113,,,,,113,113,113,113,113',
'113,,113,,,,113,,,,,,,,,,,,,,,,,,,,,,,,,,,,113,,,,113,,113,114,113,',
'114,114,114,114,114,114,114,114,114,114,,,114,114,114,114,114,,,114',
'114,114,114,,,114,114,,114,,114,114,,,114,114,,,,,114,114,114,114,114',
'114,,114,,,,114,,,,,,,,,,,,,,,,,,,,,,,,,,,,114,,,,114,,114,115,114,',
'115,115,115,115,115,115,115,115,115,115,,,115,115,115,115,115,,,115',
'115,115,115,,,115,115,,115,,115,115,,,115,115,,,,,115,115,115,115,115',
'115,,115,,,,115,,,,,,,,,,,,,,,,,,,,,,,,,,,,115,,,,115,,115,100,115,',
'100,100,100,100,100,100,100,100,100,100,,,100,100,100,100,100,,,100',
'100,100,100,,,100,100,,100,,100,100,,,100,100,,,,,100,100,100,100,100',
'100,212,100,212,,,100,,57,57,57,57,57,57,57,57,57,57,,,,,,,,,212,,57',
'57,,,,212,100,,,,100,,100,,100,57,,,,,212,212,212,212,212,212,212,212',
'212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212',
'212,212,212,212,212,212,212,,212,212,275,,275,,,212,,,57,,57,,57,,,',
',,,,,,,,,275,,,,,,,275,,,,,,,,,,,,,,,275,275,275,275,275,275,275,275',
'275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275',
'275,275,275,275,275,275,,,275,275,283,,283,,,275,1,1,1,1,1,1,1,1,1,1',
',,,,,,,,,283,1,1,,,,,283,,,,,,,,,1,,,,,,283,283,283,283,283,283,283',
'283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283',
'283,283,283,283,283,283,283,,,283,283,76,,76,,,283,,1,,1,,1,,,,,,,,',
',,,,,76,,,,,,,76,,,,,,,,,,,,,,,76,76,76,76,76,76,76,76,76,76,76,76,76',
'76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,,,76,76,278,,278',
',,,,,,,,,,,,,,,,,,,,,,278,,,,,,,278,,,,,,,,,,,,,,,278,278,278,278,278',
'278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278',
'278,278,278,278,278,278,278,278,278,,,278,278,277,,277,,,,,,,,,,,,,',
',,,,,,,,,277,,,,,,,277,,,,,,,,,,,,,,,277,277,277,277,277,277,277,277',
'277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277',
'277,277,277,277,277,277,,,277,277,274,,274,,,,,,,,,,,,,,,,,,,,,,,274',
',,,,,,274,,,,,,,274,,,,,,,,274,274,274,274,274,274,274,274,274,274,274',
'274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274',
'274,274,274,,,274,274,146,,146,,,,,,,,,,,,,,,,,,,,,,,146,,,,,,,146,',
',,,,,146,,,,,,,,146,146,146,146,146,146,146,146,146,146,146,146,146',
'146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146',
'146,,,146,146,173,,173,,,,,,,,,,,,,,,,,,,,,,,173,,,,,,,173,,,,,,,,,',
',,,,,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173',
'173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,,,173,173',
'263,,263,,,,,,,,,,,,,,,,,,,,,,,263,,,,,,,263,,,,,,,,,,,,,,,263,263,263',
'263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263',
'263,263,263,263,263,263,263,263,263,263,263,,,263,263,165,,165,,,,,',
',,,,,,,,,,,,,,,,,165,,,,,,,165,,,,,,,,,,,,,,,165,165,165,165,165,165',
'165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165',
'165,165,165,165,165,165,165,165,,,165,165,225,,225,,,,,,,,,,,,,,,,,',
',,,,,225,,,,,,,225,,,,,,,,,,,,,,,225,225,225,225,225,225,225,225,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225',
'225,225,225,225,225,,,225,225,257,,257,,,,,,,,,,,,,,,,,,,,,,,257,,,',
',,,257,,,,,,,,,,,,,,,257,257,257,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257',
'257,257,,,257,257,255,,255,,,,,,,,,,,,,,,,,,,,,,,255,,,,,,,255,,,,,',
',,,,,,,,,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255',
'255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,,,255',
'255,13,,13,,,,,,,,,,,,,,,,,,,,,,,13,,,,,,,13,,,,,,,,,,,,,,,13,13,13',
'13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13',
'13,13,13,13,13,,,13,13,77,,77,,,,,,,,,,,,,,,,,,,,,,,77,,,,,,,77,,,,',
',,77,,,,,,,,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77',
'77,77,77,77,77,77,77,77,77,77,77,77,,,77,77,148,,148,,,,,,,,,,,,,,,',
',,,,,,,148,,,,,,,148,,,,,,,,,,,,,,,148,148,148,148,148,148,148,148,148',
'148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148',
'148,148,148,148,148,148,,148,148,142,,142,,,,,,,,,,,,,,,,,,,,,,,142',
',,,,,,142,,,,,,,142,,,,,,,,142,142,142,142,142,142,142,142,142,142,142',
'142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142',
'142,142,142,,,142,142,259,,259,,,,,,,,,,,,,,,,,,,,,,,259,,,,,,,259,',
',,,,,,,,,,,,,259,259,259,259,259,259,259,259,259,259,259,259,259,259',
'259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259',
',,259,259,195,,195,,,,,,,,,,,,,,,,,,,,,,,195,,,,,,,195,,,,,,,,,,,,,',
',195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195',
'195,195,195,195,195,195,195,195,195,195,195,195,195,195,198,,198,,,',
',,,,,,,,,,,,,,,,,,,198,,,,,,,198,,,,,,,,,,,,,,,198,198,198,198,198,198',
'198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198',
'198,198,198,198,198,198,198,198,216,,216,,,,,,,,,,,,,,,,,,,,,,,216,',
',,,,,216,,,,,,,,,,,,,,,216,216,216,216,216,216,216,216,216,216,216,216',
'216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216',
'216,216,191,,,,,,,191,,,,,,,,,,,,,,,191,191,191,191,191,191,191,191',
'191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191',
'191,191,191,191,191,191,134,,,,,,,134,,,,,,,,,,,,,,,134,134,134,134',
'134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134',
'134,134,134,134,134,134,134,134,134,134,185,,,,,,,185,,,,,,,,,,,,,,',
'185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185',
'185,185,185,185,185,185,185,185,185,185,185,185,185,185,159,,,,,,,,',
',,,,,,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159',
'159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,248,,,,',
',,,,,,,,,,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248',
'248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,269',
',,,,,,,,,,,,,,269,269,269,269,269,269,269,269,269,269,269,269,269,269',
'269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269',
'270,,,,,,,,,,,,,,,270,270,270,270,270,270,270,270,270,270,270,270,270',
'270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270',
'270,181,,,,,,,,,,,,,,,181,181,181,181,181,181,181,181,181,181,181,181',
'181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181',
'181,181,161,,,,,,,,,,,,,,,161,161,161,161,161,161,161,161,161,161,161',
'161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161',
'161,161,161,182,182,182,182,182,182,182,182,182,182,182,182,182,182',
'182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182',
'186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186',
'186,186,186,186,186,186,186,186,186,186,186,186,186,186,206,206,206',
'206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206',
'206,206,206,206,206,206,206,206,206,206,206,178,178,178,178,178,178',
'178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178',
'178,178,178,178,178,178,178,178,209,209,209,209,209,209,209,209,209',
'209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209',
'209,209,209,209,209' ]
        racc_action_check = arr = Array.new(8661, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  3113,  6444,   227,   nil,   265,   nil,   nil,   nil,   354,   169,
   132,   nil,   141,  7425,   nil,    72,   -66,   nil,   977,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1066,   nil,    69,
   nil,    87,   nil,  1333,   nil,   nil,   nil,   nil,  1422,   nil,
   nil,   nil,   nil,  1511,  1600,   nil,  1689,    70,   nil,  1867,
   nil,  1956,   nil,  2045,   nil,   nil,   nil,  6281,   nil,   nil,
   288,  2312,   nil,  2401,  2490,   nil,   nil,    67,   nil,   216,
   nil,  2757,  2846,    69,    27,    37,  6523,  7507,   119,  3469,
  3558,   128,   nil,   234,   nil,   nil,  3825,  3914,  4003,  4092,
  4181,  4270,  4359,  4448,  4537,    87,  4715,  4804,  4893,  4982,
  6228,  5160,   240,  5338,  5427,  5516,   nil,  5605,  5694,  5783,
   nil,   nil,  5872,  5961,  6050,  6139,  5071,  3647,  2935,  2134,
   443,  4626,  3202,  5249,   nil,  3736,    -2,   nil,   194,  3380,
   nil,   nil,   131,   234,  8097,   195,   122,    51,   nil,   257,
   269,   180,  7671,   207,   nil,   nil,  6851,   212,  7589,  3291,
    60,    63,    64,    29,   nil,   -58,    50,   199,   nil,  8196,
    -2,  8426,  3024,   nil,   -10,  7097,   nil,   nil,   227,   122,
   102,    82,   nil,  6933,   nil,   nil,   nil,   nil,  8550,   281,
  1430,  8380,  8457,   540,  1436,  8150,  8488,   807,  1349,   718,
  1357,  8044,   362,  1341,   137,  7835,   629,  1266,  7913,   985,
  1088,   896,  1177,   451,  1163,   273,  8519,  1252,   295,  8581,
  1074,   -15,  6277,   162,    88,   nil,  7991,   nil,   nil,   -15,
  2668,   178,   nil,   -19,    90,  7179,   nil,  2579,   nil,  2223,
  1778,   nil,   115,   134,  1244,   -41,   nil,   149,     2,   nil,
    75,   nil,   -10,   nil,    -2,   nil,  1155,   888,  8242,   nil,
   211,   nil,   nil,   799,   710,  7343,   621,  7261,   532,  7753,
   nil,   160,   nil,  7015,   nil,   nil,   nil,   nil,   nil,  8288,
  8334,   nil,   157,   nil,  6769,  6359,   176,  6687,  6605,   nil,
   197,   -55,   nil,  6441,   nil,   nil,   nil ]

racc_action_default = [
    -1,  -166,  -166,   -22,  -166,    -2,   -45,   -23,  -166,  -166,
    -3,   -30,  -159,    -4,   -97,    -7,  -166,   -28,  -166,    -8,
   -91,   -29,   -32,    -9,   -31,   -33,   -10,  -166,   -98,  -166,
   -34,  -166,   -11,  -166,   -99,   -35,   -26,   -12,  -166,  -100,
   -36,   -27,   -13,  -166,  -166,   -14,  -166,  -114,   -37,  -166,
   -15,  -166,   -38,  -126,   -16,   -39,   -17,  -166,  -116,   -96,
  -108,  -166,   -18,  -166,  -166,   -19,   -93,  -166,   -20,  -166,
   -21,  -166,  -126,  -166,  -115,  -166,   -44,  -166,  -166,  -166,
    -6,  -166,  -157,  -159,  -161,  -163,  -166,  -166,  -166,  -166,
  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
  -166,  -166,  -166,  -166,  -166,  -166,   -56,  -166,  -166,  -166,
   -55,   -88,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
  -166,  -166,  -166,  -166,  -101,  -126,  -166,  -105,  -166,  -166,
  -104,  -118,  -166,  -166,  -138,   -49,  -166,  -143,   -90,   -46,
   -47,   -50,  -166,   -52,  -102,  -119,  -166,   -51,  -127,  -166,
  -166,   -95,  -166,  -166,   -43,  -166,  -166,  -108,  -109,   -53,
  -166,   -54,  -126,   -94,   -48,  -127,   287,  -155,  -166,  -166,
  -134,  -166,   -25,    -5,  -156,  -160,  -158,  -162,   -82,   -71,
   -60,   -87,   -83,   -72,   -61,  -164,   -84,   -73,   -62,   -74,
   -63,  -165,   -75,   -64,  -166,   -85,   -76,   -65,   -86,   -77,
   -66,   -78,   -67,   -79,   -68,   -57,   -80,   -69,   -58,   -81,
   -70,   -59,  -166,  -166,  -117,  -103,   -40,   -89,   -92,  -166,
  -166,  -166,  -140,  -166,  -166,  -128,  -125,  -166,  -133,  -166,
  -166,  -107,  -166,  -166,  -166,  -166,  -139,  -166,  -166,  -135,
  -166,   -24,  -141,  -106,  -120,  -142,  -166,  -166,  -145,  -144,
  -166,  -150,  -154,  -166,  -166,  -130,  -166,  -129,  -166,   -41,
  -111,  -166,  -110,   -42,  -113,  -122,  -137,  -136,  -121,  -147,
  -146,  -151,  -166,  -148,  -166,  -166,  -166,  -131,  -132,  -112,
  -166,  -152,  -123,  -166,  -149,  -153,  -124 ]

racc_goto_table = [
     5,    10,   136,    82,   127,    84,   213,    13,    73,    78,
    80,    76,   154,    74,   219,    77,   155,   260,   262,     2,
   251,   250,   170,   174,   218,   134,    83,   268,    85,   nil,
   144,   138,   145,   nil,   135,   nil,   127,   nil,   nil,   nil,
   139,   nil,   nil,   237,   nil,   140,   279,   271,   nil,   nil,
   141,   142,   nil,   143,   nil,   nil,   146,   144,   147,   145,
   148,   nil,   127,   127,   151,   nil,   nil,   nil,   159,   152,
   160,   161,   242,   nil,   176,   194,   177,   167,   164,   nil,
   171,   175,   nil,   nil,   nil,   nil,    13,   173,   nil,   nil,
   nil,   nil,   nil,   178,   179,   180,   181,   182,   183,   184,
   185,   186,   187,   188,   189,   190,   191,   192,   193,   154,
   195,   196,   197,   235,   198,   199,   200,   nil,   nil,   201,
   202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
   212,   nil,   217,   214,   nil,   144,   216,   145,   152,   nil,
   127,   127,   222,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   232,   225,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   239,
   nil,    80,   nil,   nil,   nil,   252,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   154,   154,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   252,   127,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   154,   nil,   nil,   nil,   nil,   nil,   245,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   248,   nil,   256,
   nil,   nil,   nil,   261,   255,   232,   257,   259,   266,   nil,
   267,   263,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   269,   270,   nil,   nil,   nil,   nil,   nil,
   274,   275,   nil,   277,   nil,   278,   nil,   nil,   nil,   nil,
   nil,   nil,   280,   nil,   281,   nil,   nil,   nil,   nil,   nil,
   nil,   285,   nil,   283 ]

racc_goto_check = [
     2,     3,    38,    43,     9,    45,    36,     4,     5,    22,
     2,     4,    21,    31,    39,     4,    33,    24,    24,     1,
    41,    40,    37,    42,    26,     4,    44,     7,    46,   nil,
    30,    22,    35,   nil,     4,   nil,     9,   nil,   nil,   nil,
     4,   nil,   nil,    36,   nil,     4,    24,    41,   nil,   nil,
     4,     4,   nil,     4,   nil,   nil,     4,    30,     4,    35,
     4,   nil,     9,     9,     5,   nil,   nil,   nil,     4,    31,
     4,     4,    39,   nil,    43,    38,    45,    22,     4,   nil,
     3,    22,   nil,   nil,   nil,   nil,     4,     4,   nil,   nil,
   nil,   nil,   nil,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,    21,
     4,     4,     4,    33,     4,     4,     4,   nil,   nil,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,   nil,    22,     5,   nil,    30,     4,    35,    31,   nil,
     9,     9,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,     4,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,     2,   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21,    21,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,     9,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,    22,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,     2,
   nil,   nil,   nil,     2,     4,     2,     4,     4,    22,   nil,
    22,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     4,     4,   nil,   nil,   nil,   nil,   nil,
     4,     4,   nil,     4,   nil,     4,   nil,   nil,   nil,   nil,
   nil,   nil,    22,   nil,    22,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,     4 ]

racc_goto_pointer = [
   nil,    19,     0,     1,     7,     7,   nil,  -217,   nil,   -11,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -48,     0,   nil,  -215,   nil,  -109,   nil,   nil,   nil,
   -17,    12,   nil,   -44,   nil,   -15,  -119,   -56,   -27,  -122,
  -202,  -203,   -58,    -9,    14,    -7,    16 ]

racc_goto_default = [
   nil,   nil,   227,   nil,   165,    15,    19,    23,    26,    32,
    37,    42,    45,    50,    54,    56,    62,    65,    68,    70,
     3,     7,   nil,    14,   158,    16,    20,    28,    34,    39,
   124,    47,   130,   nil,    58,   131,   150,   nil,   nil,   nil,
   nil,   nil,    12,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 95, :_reduce_1,
  1, 95, :_reduce_2,
  1, 95, :_reduce_3,
  1, 97, :_reduce_4,
  3, 97, :_reduce_5,
  2, 97, :_reduce_6,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  3, 116, :_reduce_24,
  2, 116, :_reduce_25,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 117, :_reduce_28,
  1, 117, :_reduce_29,
  1, 117, :_reduce_30,
  1, 117, :_reduce_31,
  1, 117, :_reduce_32,
  1, 117, :_reduce_33,
  1, 117, :_reduce_34,
  1, 117, :_reduce_35,
  1, 117, :_reduce_36,
  1, 117, :_reduce_37,
  1, 117, :_reduce_38,
  1, 117, :_reduce_39,
  3, 104, :_reduce_40,
  3, 118, :_reduce_41,
  3, 118, :_reduce_42,
  1, 118, :_reduce_43,
  2, 108, :_reduce_44,
  1, 115, :_reduce_45,
  2, 102, :_reduce_46,
  2, 102, :_reduce_47,
  2, 102, :_reduce_48,
  2, 102, :_reduce_49,
  2, 102, :_reduce_50,
  2, 102, :_reduce_51,
  2, 102, :_reduce_52,
  2, 102, :_reduce_53,
  2, 102, :_reduce_54,
  2, 102, :_reduce_55,
  2, 102, :_reduce_56,
  3, 102, :_reduce_57,
  3, 102, :_reduce_58,
  3, 102, :_reduce_59,
  3, 102, :_reduce_60,
  3, 102, :_reduce_61,
  3, 102, :_reduce_62,
  3, 102, :_reduce_63,
  3, 102, :_reduce_64,
  3, 102, :_reduce_65,
  3, 102, :_reduce_66,
  3, 102, :_reduce_67,
  3, 102, :_reduce_68,
  3, 102, :_reduce_69,
  3, 102, :_reduce_70,
  3, 102, :_reduce_71,
  3, 102, :_reduce_72,
  3, 102, :_reduce_73,
  3, 102, :_reduce_74,
  3, 102, :_reduce_75,
  3, 102, :_reduce_76,
  3, 102, :_reduce_77,
  3, 102, :_reduce_78,
  3, 102, :_reduce_79,
  3, 102, :_reduce_80,
  3, 102, :_reduce_81,
  3, 102, :_reduce_82,
  3, 102, :_reduce_83,
  3, 102, :_reduce_84,
  3, 102, :_reduce_85,
  3, 102, :_reduce_86,
  3, 102, :_reduce_87,
  2, 114, :_reduce_88,
  3, 101, :_reduce_89,
  2, 101, :_reduce_90,
  1, 119, :_reduce_91,
  3, 119, :_reduce_92,
  1, 120, :_reduce_none,
  2, 120, :_reduce_94,
  2, 113, :_reduce_95,
  1, 99, :_reduce_96,
  1, 99, :_reduce_97,
  1, 99, :_reduce_98,
  1, 99, :_reduce_99,
  1, 99, :_reduce_100,
  2, 99, :_reduce_101,
  2, 99, :_reduce_102,
  2, 124, :_reduce_103,
  1, 124, :_reduce_104,
  1, 124, :_reduce_105,
  3, 126, :_reduce_106,
  3, 122, :_reduce_107,
  0, 127, :_reduce_108,
  1, 127, :_reduce_109,
  3, 127, :_reduce_110,
  3, 127, :_reduce_111,
  4, 127, :_reduce_112,
  3, 127, :_reduce_113,
  1, 100, :_reduce_114,
  2, 100, :_reduce_115,
  1, 100, :_reduce_116,
  3, 112, :_reduce_117,
  2, 125, :_reduce_118,
  2, 125, :_reduce_119,
  3, 129, :_reduce_120,
  4, 129, :_reduce_121,
  4, 128, :_reduce_122,
  6, 103, :_reduce_123,
  7, 103, :_reduce_124,
  3, 121, :_reduce_125,
  0, 130, :_reduce_126,
  1, 130, :_reduce_127,
  2, 130, :_reduce_128,
  3, 130, :_reduce_129,
  3, 130, :_reduce_130,
  4, 130, :_reduce_131,
  4, 130, :_reduce_132,
  2, 130, :_reduce_133,
  3, 106, :_reduce_134,
  4, 106, :_reduce_135,
  5, 106, :_reduce_136,
  3, 131, :_reduce_137,
  2, 107, :_reduce_138,
  3, 123, :_reduce_139,
  3, 109, :_reduce_140,
  4, 110, :_reduce_141,
  4, 110, :_reduce_142,
  1, 132, :_reduce_143,
  3, 132, :_reduce_144,
  2, 133, :_reduce_145,
  3, 133, :_reduce_146,
  3, 133, :_reduce_147,
  5, 111, :_reduce_148,
  7, 111, :_reduce_149,
  1, 134, :_reduce_150,
  2, 134, :_reduce_151,
  3, 135, :_reduce_152,
  4, 135, :_reduce_153,
  1, 135, :_reduce_none,
  3, 136, :_reduce_155,
  2, 137, :_reduce_156,
  1, 138, :_reduce_157,
  2, 138, :_reduce_158,
  0, 139, :_reduce_159,
  2, 139, :_reduce_160,
  1, 140, :_reduce_161,
  2, 140, :_reduce_162,
  2, 105, :_reduce_163,
  3, 105, :_reduce_164,
  3, 105, :_reduce_165 ]

racc_reduce_n = 166

racc_shift_n = 287

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :UNLESS => 4,
  :NUMBER => 5,
  :STRING => 6,
  :REGEX => 7,
  :TRUE => 8,
  :FALSE => 9,
  :YES => 10,
  :NO => 11,
  :ON => 12,
  :OFF => 13,
  :IDENTIFIER => 14,
  :PROPERTY_ACCESS => 15,
  :CODE => 16,
  :PARAM => 17,
  :PARAM_SPLAT => 18,
  :NEW => 19,
  :RETURN => 20,
  :TRY => 21,
  :CATCH => 22,
  :FINALLY => 23,
  :THROW => 24,
  :BREAK => 25,
  :CONTINUE => 26,
  :FOR => 27,
  :IN => 28,
  :BY => 29,
  :WHILE => 30,
  :SWITCH => 31,
  :WHEN => 32,
  :DELETE => 33,
  :INSTANCEOF => 34,
  :TYPEOF => 35,
  :SUPER => 36,
  :EXTENDS => 37,
  :NEWLINE => 38,
  :COMMENT => 39,
  :JS => 40,
  :INDENT => 41,
  :OUTDENT => 42,
  :UMINUS => 43,
  :SPLAT => 44,
  :NOT => 45,
  "!" => 46,
  "!!" => 47,
  "~" => 48,
  "++" => 49,
  "--" => 50,
  "?" => 51,
  "*" => 52,
  "/" => 53,
  "%" => 54,
  "+" => 55,
  "-" => 56,
  "<<" => 57,
  ">>" => 58,
  ">>>" => 59,
  "&" => 60,
  "|" => 61,
  "^" => 62,
  "<=" => 63,
  "<" => 64,
  ">" => 65,
  ">=" => 66,
  "==" => 67,
  "!=" => 68,
  :IS => 69,
  :ISNT => 70,
  "&&" => 71,
  "||" => 72,
  :AND => 73,
  :OR => 74,
  "-=" => 75,
  "+=" => 76,
  "/=" => 77,
  "*=" => 78,
  "%=" => 79,
  "." => 80,
  :ASSIGN => 81,
  "||=" => 82,
  "&&=" => 83,
  "=>" => 84,
  "\n" => 85,
  ";" => 86,
  "," => 87,
  "[" => 88,
  "]" => 89,
  "{" => 90,
  "}" => 91,
  "(" => 92,
  ")" => 93 }

racc_nt_base = 94

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "UNLESS",
  "NUMBER",
  "STRING",
  "REGEX",
  "TRUE",
  "FALSE",
  "YES",
  "NO",
  "ON",
  "OFF",
  "IDENTIFIER",
  "PROPERTY_ACCESS",
  "CODE",
  "PARAM",
  "PARAM_SPLAT",
  "NEW",
  "RETURN",
  "TRY",
  "CATCH",
  "FINALLY",
  "THROW",
  "BREAK",
  "CONTINUE",
  "FOR",
  "IN",
  "BY",
  "WHILE",
  "SWITCH",
  "WHEN",
  "DELETE",
  "INSTANCEOF",
  "TYPEOF",
  "SUPER",
  "EXTENDS",
  "NEWLINE",
  "COMMENT",
  "JS",
  "INDENT",
  "OUTDENT",
  "UMINUS",
  "SPLAT",
  "NOT",
  "\"!\"",
  "\"!!\"",
  "\"~\"",
  "\"++\"",
  "\"--\"",
  "\"?\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\">>>\"",
  "\"&\"",
  "\"|\"",
  "\"^\"",
  "\"<=\"",
  "\"<\"",
  "\">\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "IS",
  "ISNT",
  "\"&&\"",
  "\"||\"",
  "AND",
  "OR",
  "\"-=\"",
  "\"+=\"",
  "\"/=\"",
  "\"*=\"",
  "\"%=\"",
  "\".\"",
  "ASSIGN",
  "\"||=\"",
  "\"&&=\"",
  "\"=>\"",
  "\"\\n\"",
  "\";\"",
  "\",\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Root",
  "Terminator",
  "Expressions",
  "Expression",
  "Value",
  "Call",
  "Code",
  "Operation",
  "Range",
  "Assign",
  "If",
  "Try",
  "Throw",
  "Return",
  "While",
  "For",
  "Switch",
  "Extends",
  "Splat",
  "Existence",
  "Comment",
  "Block",
  "Literal",
  "AssignObj",
  "ParamList",
  "Param",
  "Array",
  "Object",
  "Parenthetical",
  "Accessor",
  "Invocation",
  "Index",
  "AssignList",
  "Super",
  "Arguments",
  "ArgList",
  "Catch",
  "ForVariables",
  "ForSource",
  "Whens",
  "When",
  "IfBlock",
  "ElsIf",
  "ElsIfs",
  "ElseBody",
  "IfEnd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_1(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_2(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_4(val, _values, result)
     result = Expressions.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_5(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_24(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_25(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_28(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_29(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_30(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_31(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_32(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_33(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_34(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_35(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_36(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_37(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_38(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_39(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_40(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_41(val, _values, result)
     result = AssignNode.new(ValueNode.new(val[0]), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_42(val, _values, result)
     result = AssignNode.new(ValueNode.new(LiteralNode.new(val[0])), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_43(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_44(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_45(val, _values, result)
     result = CommentNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 131)
  def _reduce_46(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_47(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_48(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 134)
  def _reduce_49(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_50(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 136)
  def _reduce_51(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_52(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_53(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_54(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 140)
  def _reduce_55(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_56(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_57(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_58(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_59(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_60(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_61(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 150)
  def _reduce_62(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_63(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_64(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 154)
  def _reduce_65(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_66(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_67(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_68(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_69(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_70(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 161)
  def _reduce_71(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_72(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_73(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 165)
  def _reduce_74(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_75(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_76(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_77(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 170)
  def _reduce_78(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_79(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_80(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_81(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_82(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_83(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_84(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_85(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_86(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 181)
  def _reduce_87(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_88(val, _values, result)
     result = ExistenceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 190)
  def _reduce_89(val, _values, result)
     result = CodeNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_90(val, _values, result)
     result = CodeNode.new([], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 196)
  def _reduce_91(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 197)
  def _reduce_92(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

# reduce 93 omitted

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_94(val, _values, result)
     result = ParamSplatNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 206)
  def _reduce_95(val, _values, result)
     result = ArgSplatNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 211)
  def _reduce_96(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 212)
  def _reduce_97(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 213)
  def _reduce_98(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 214)
  def _reduce_99(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 215)
  def _reduce_100(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 216)
  def _reduce_101(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 217)
  def _reduce_102(val, _values, result)
     result = ValueNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 222)
  def _reduce_103(val, _values, result)
     result = AccessorNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 223)
  def _reduce_104(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 224)
  def _reduce_105(val, _values, result)
     result = SliceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 229)
  def _reduce_106(val, _values, result)
     result = IndexNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_107(val, _values, result)
     result = ObjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 239)
  def _reduce_108(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 240)
  def _reduce_109(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 241)
  def _reduce_110(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 242)
  def _reduce_111(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_112(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_113(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 250)
  def _reduce_114(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 251)
  def _reduce_115(val, _values, result)
     result = val[1].new_instance 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_116(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_117(val, _values, result)
     result = ExtendsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_118(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_119(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 268)
  def _reduce_120(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 269)
  def _reduce_121(val, _values, result)
     result = val[1] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 274)
  def _reduce_122(val, _values, result)
     result = CallNode.new(:super, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 280)
  def _reduce_123(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 282)
  def _reduce_124(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 287)
  def _reduce_125(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 292)
  def _reduce_126(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_127(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 294)
  def _reduce_128(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 295)
  def _reduce_129(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 296)
  def _reduce_130(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 297)
  def _reduce_131(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 298)
  def _reduce_132(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 299)
  def _reduce_133(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 304)
  def _reduce_134(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 305)
  def _reduce_135(val, _values, result)
     result = TryNode.new(val[1], nil, nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 307)
  def _reduce_136(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 312)
  def _reduce_137(val, _values, result)
     result = [val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 317)
  def _reduce_138(val, _values, result)
     result = ThrowNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 322)
  def _reduce_139(val, _values, result)
     result = ParentheticalNode.new(val[1], val[0].line) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 327)
  def _reduce_140(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_141(val, _values, result)
     result = ForNode.new(val[0], val[3], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 335)
  def _reduce_142(val, _values, result)
     result = ForNode.new(val[3], val[2], val[1][0], val[1][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 340)
  def _reduce_143(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 341)
  def _reduce_144(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 346)
  def _reduce_145(val, _values, result)
     result = {:source => val[1]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 348)
  def _reduce_146(val, _values, result)
     result = val[0].merge(:filter => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 350)
  def _reduce_147(val, _values, result)
     result = val[0].merge(:step => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 356)
  def _reduce_148(val, _values, result)
     result = val[3].rewrite_condition(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 358)
  def _reduce_149(val, _values, result)
     result = val[3].rewrite_condition(val[1]).add_else(val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 363)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 364)
  def _reduce_151(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 369)
  def _reduce_152(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 370)
  def _reduce_153(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

# reduce 154 omitted

module_eval(<<'.,.,', 'grammar.y', 378)
  def _reduce_155(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 383)
  def _reduce_156(val, _values, result)
     result = val[1].force_statement 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 388)
  def _reduce_157(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 389)
  def _reduce_158(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 394)
  def _reduce_159(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 395)
  def _reduce_160(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 400)
  def _reduce_161(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 401)
  def _reduce_162(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 406)
  def _reduce_163(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 407)
  def _reduce_164(val, _values, result)
     result = IfNode.new(val[2], Expressions.new([val[0]]), nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 408)
  def _reduce_165(val, _values, result)
     result = IfNode.new(val[2], Expressions.new([val[0]]), nil, {:statement => true, :invert => true}) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
