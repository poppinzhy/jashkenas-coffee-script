#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

module CoffeeScript

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 449)
  # Lex and parse a CoffeeScript.
  def parse(code)
    # Uncomment the following line to enable grammar debugging, in combination
    # with the -g flag in the Rake build task.
    # @yydebug = true
    @tokens = Lexer.new.tokenize(code)
    do_parse
  end

  # Retrieve the next token from the list.
  def next_token
    @tokens.shift
  end

  # Raise a custom error class that knows about line numbers.
  def on_error(error_token_id, error_value, value_stack)
    raise ParseError.new(token_to_str(error_token_id), error_value, value_stack)
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'106,9,114,20,24,27,32,36,40,46,50,55,61,276,270,271,178,1,5,11,14,18',
'276,22,28,33,122,126,30,30,18,99,63,265,72,115,3,6,30,15,266,18,26,218',
'30,111,1,44,48,53,59,136,139,102,105,109,113,118,121,125,129,132,135',
'138,101,104,108,112,117,120,124,128,131,134,137,100,103,107,110,116',
'119,123,127,130,133,302,51,56,149,151,152,71,173,2,9,10,183,20,24,27',
'32,36,40,46,50,55,61,294,149,151,152,1,5,11,14,51,56,22,28,33,35,80',
'30,189,242,57,63,97,72,79,3,6,80,15,241,18,26,184,185,276,79,44,48,53',
'59,64,68,18,51,56,293,13,141,62,66,111,191,192,18,30,76,136,139,102',
'105,109,150,62,66,18,155,149,151,152,191,192,149,151,152,239,51,56,149',
'151,152,71,150,2,9,10,155,20,24,27,32,36,40,46,50,55,61,153,149,151',
'152,1,5,11,14,30,80,22,28,33,35,80,62,66,79,57,63,249,72,79,3,6,249',
'15,284,18,26,62,66,62,66,44,48,53,59,64,68,270,271,145,111,13,91,18',
'157,150,-181,-181,18,155,150,111,62,66,155,1,150,136,139,30,155,62,66',
'251,273,263,62,66,251,275,51,56,30,145,262,71,150,2,9,10,155,20,24,27',
'32,36,40,46,50,55,61,187,249,190,30,1,5,11,14,256,111,22,28,33,35,85',
'-181,-181,179,57,63,255,72,80,3,6,111,15,309,18,26,79,-181,-181,75,44',
'48,53,59,64,68,97,,,,13,62,66,251,,252,,111,62,66,176,,111,136,139,18',
',76,136,139,102,105,109,113,118,121,125,129,,51,56,,,,71,,2,9,10,,20',
'24,27,32,36,40,46,50,55,61,,,111,,1,5,11,14,-181,-181,22,28,33,35,62',
'66,176,,57,63,177,72,,3,6,111,15,,18,26,,136,139,,44,48,53,59,64,68',
'111,,,,13,,136,139,102,105,109,113,118,121,125,129,132,135,138,101,104',
'108,112,117,120,124,128,,,111,,,,51,56,-181,-181,,71,,2,9,10,,20,24',
'27,32,36,40,46,50,55,61,,,111,,1,5,11,14,-181,-181,22,28,33,35,,,,,57',
'63,,72,,3,6,111,15,,18,26,,-181,-181,,44,48,53,59,64,68,111,,,,13,,136',
'139,102,105,109,113,118,121,125,129,132,135,138,101,104,108,112,117',
'120,124,128,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61',
',,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48',
'53,59,64,68,111,,,,13,,136,139,102,105,109,113,118,121,125,129,132,135',
'138,101,104,108,112,117,120,124,128,,,,,,,51,56,,,,71,,2,9,10,,20,24',
'27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3',
'6,,15,,18,26,,,,,44,48,53,59,64,68,111,,,,13,,136,139,102,105,109,113',
'118,121,125,129,132,135,138,101,104,108,112,117,120,124,128,,,,,,,51',
'56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28',
'33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,111,,,,13',
',136,139,102,105,109,113,118,121,125,129,132,135,138,101,104,108,112',
'117,120,124,128,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55',
'61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44',
'48,53,59,64,68,111,,,,13,,136,139,102,105,109,113,118,121,125,129,132',
'135,138,101,104,108,112,117,120,124,128,,,,,,,51,56,,,,71,,2,9,10,,20',
'24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72',
',3,6,,15,,18,26,,,,,44,48,53,59,64,68,111,,,,13,,136,139,102,105,109',
'113,118,121,125,129,132,135,138,101,104,108,112,117,120,124,128,,,,',
',,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,',
',22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,111',
',,,13,,136,139,102,105,109,113,118,121,125,129,132,135,138,101,104,108',
'112,117,120,124,128,,299,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40',
'46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26',
',,,,44,48,53,59,64,68,111,,,,13,,136,139,102,105,109,113,118,121,125',
'129,132,135,138,111,,,,,,136,139,102,105,109,113,118,,51,56,,,,71,,2',
'9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,',
'57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,111,,,,13,,136,139,102',
'105,109,113,118,121,125,129,132,135,138,111,,,,,,136,139,102,105,109',
'113,118,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5',
'11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,95,,,44,48,53,59',
'64,68,111,,,,13,,136,139,102,105,109,113,118,121,125,129,132,135,138',
'111,,,,,,136,139,102,105,109,113,118,,51,56,,,,71,,2,9,10,,20,24,27',
'32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6',
',15,,18,26,,,,,44,48,53,59,64,68,111,,,,13,,136,139,102,105,109,113',
'118,121,125,129,132,135,138,111,,,,,,136,139,102,105,109,,,,51,56,,',
',71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33',
'35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,111,,,,13,,136',
'139,102,105,109,113,118,121,125,129,111,,,,,,136,139,102,105,109,113',
'118,121,125,129,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61',
',,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48',
'53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,',
'20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63',
',72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5',
'11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,282,,,,44,48,53,59',
'64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,62,66,,71,,2,9,10,,20',
'24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72',
',3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14',
',,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,',
',,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36',
'40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18',
'26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,',
',71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33',
'35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55',
'61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44',
'48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10',
',20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63',
',72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5',
'11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64',
'68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27',
'32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6',
',15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22',
'28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46',
'50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,',
',,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71',
',2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,',
',,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61',
',,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,170,,,,44',
'48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10',
',20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63',
',72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5',
'11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64',
'68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27',
'32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6',
',15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22',
'28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46',
'50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,',
',,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71',
',2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,',
',,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61',
',,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48',
'53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,',
'20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63',
',72,,3,6,,15,,18,26,170,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1',
'5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59',
'64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24',
'27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3',
'6,,15,,18,26,170,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14',
',,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,',
',,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36',
'40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18',
'26,30,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56',
'62,66,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22',
'28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46',
'50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,',
',,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71',
',2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,',
',,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61',
',,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48',
'53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,',
'20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63',
',72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5',
'11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64',
'68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27',
'32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6',
',15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22',
'28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46',
'50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,',
',,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71',
',2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,',
',,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61',
',,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48',
'53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,',
'20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63',
',72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5',
'11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64',
'68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27',
'32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6',
',15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22',
'28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46',
'50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,',
',,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71',
',2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,',
',,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61',
',,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48',
'53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,',
'20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63',
',72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5',
'11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64',
'68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27',
'32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6',
',15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22',
'28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46',
'50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,',
',,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71',
',2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,',
',,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61',
',,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48',
'53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,',
'20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63',
',72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5',
'11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64',
'68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27',
'32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6',
',15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22',
'28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13',
'20,24,27,32,36,40,46,50,55,61,,,,,,,,,,,,28,33,,,,,,51,56,,,,71,,2,15',
'10,,26,,,106,,114,20,24,27,32,36,40,46,50,55,61,,,,,,,,,,,,28,33,122',
'126,,,,99,,,,115,,,,15,,,26,,,111,71,,2,,10,136,139,102,105,109,113',
'118,121,125,129,132,135,138,101,104,108,112,117,120,124,128,131,134',
'137,100,103,107,110,116,119,123,127,130,133,106,,114,,,,71,310,2,,10',
',,,,,,,,,,,,,,,122,126,,,,99,,,,115,,,,,,,,,,111,,,,,,136,139,102,105',
'109,113,118,121,125,129,132,135,138,101,104,108,112,117,120,124,128',
'131,134,137,100,103,107,110,116,119,254,127,130,133,,,,,,,,274,20,24',
'27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,,63,,72,,3,6',
',15,,18,26,,,,,44,48,53,59,64,68,106,,114,,13,,,,,,,,,,,,,,,,,,,,,,122',
'126,,,,99,,51,56,115,,,71,,2,,10,,,111,,,,,,136,139,102,105,109,113',
'118,121,125,129,132,135,138,101,104,108,112,117,120,124,128,131,134',
'137,100,103,107,110,116,119,123,127,130,133,,,,,,,,306,20,24,27,32,36',
'40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,,,,,,,63,,72,,3,6,,15,,18,26',
',,,,44,48,53,59,64,68,106,,114,,13,,,,,,,,,,,,,,,,,,,,,,122,126,,,,99',
',51,56,115,,,71,,2,,10,30,,111,,,,,,136,139,102,105,109,113,118,121',
'125,129,132,135,138,101,104,108,112,117,120,124,128,131,134,137,100',
'103,107,110,116,119,123,127,130,133,106,,114,,,,,,,,,,,,,,,,,,,,,,,',
'122,126,,,,99,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113,118,121',
'125,129,132,135,138,101,104,108,112,117,120,124,128,131,134,137,100',
'103,107,110,116,119,123,127,130,133,106,,114,,,,,,,,,,,,,,,,,,,,,,,',
'122,126,,,,99,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113,118,121',
'125,129,132,135,138,101,104,108,112,117,120,124,128,131,134,137,100',
'103,107,110,116,119,123,127,130,133,106,,114,,,,,,,,,,,,,,,,,,,,,,,',
'122,126,,,,99,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113,118,121',
'125,129,132,135,138,101,104,108,112,117,120,124,128,131,134,137,100',
'103,107,110,116,119,123,127,130,133,106,,114,,,,,,,,,,,,,,,,,,,,,,,',
'122,126,,,,99,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113,118,121',
'125,129,132,135,138,101,104,108,112,117,120,124,128,131,134,137,100',
'103,107,110,116,119,123,127,130,133,106,,114,,,,,,,,,,,,,,,,,,,,,,,',
'122,126,,,,99,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113,118,121',
'125,129,132,135,138,101,104,108,112,117,120,124,128,131,134,137,100',
'103,107,110,116,119,123,127,130,133,106,,114,,,,,,,,,,,,,,,,,,,,,,,',
'122,126,,,,99,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113,118,121',
'125,129,132,135,138,101,104,108,112,117,120,124,128,131,134,137,100',
'103,107,110,116,119,123,127,130,133,106,,114,,,,,,,,,,,,,,,,,,,,,,,',
'122,126,,,,99,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113,118,121',
'125,129,132,135,138,101,104,108,112,117,120,124,128,131,134,137,100',
'103,107,110,116,119,123,127,130,133,106,,114,,,,,,,,,,,,,,,,,,,,,,,',
'122,126,,,,99,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113,118,121',
'125,129,132,135,138,101,104,108,112,117,120,124,128,131,134,137,100',
'103,107,110,116,119,123,127,130,133,106,,114,,,,,,,,,,,,,,,,,,,,,,,',
'122,126,,,,99,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113,118,121',
'125,129,132,135,138,101,104,108,112,117,120,124,128,131,134,137,100',
'103,107,110,116,119,123,127,130,133,106,,114,,,,,,,,,,,,,,,,,,,,,,,',
'122,126,,,,99,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113,118,121',
'125,129,132,135,138,101,104,108,112,117,120,124,128,131,134,137,100',
'103,107,110,116,119,254,127,130,133,106,,114,,,,,,,,,,,,,,,,,,,,,,,',
'122,126,,,,99,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113,118,121',
'125,129,132,135,138,101,104,108,112,117,120,124,128,131,134,137,100',
'103,107,110,116,119,123,127,130,133,106,,114,,,,,,,,,,,,,,,,,,,,,,,',
'122,126,,,,99,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113,118,121',
'125,129,132,135,138,101,104,108,112,117,120,124,128,131,134,137,100',
'103,107,110,116,119,123,127,130,133,106,,114,,,,,,,,,,,,,,,,,,,,,,,',
'122,126,,,,99,,,,115,,,,,,,,248,,111,,,,,,136,139,102,105,109,113,118',
'121,125,129,132,135,138,101,104,108,112,117,120,124,128,131,134,137',
'100,103,107,110,116,119,123,127,130,133,106,,114,,,,,,,,,,,,,,,,,,,',
',,,,122,126,,,,99,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113,118',
'121,125,129,132,135,138,101,104,108,112,117,120,124,128,131,134,137',
'100,103,107,110,116,119,123,127,130,133,106,,114,,,,,,,,,,,,,,,,,,,',
',,,,122,126,,,,99,,,,115,,,,,,,,30,,111,,,,,,136,139,102,105,109,113',
'118,121,125,129,132,135,138,101,104,108,112,117,120,124,128,131,134',
'137,100,103,107,110,116,119,123,127,130,133,106,,114,,,,,,,,,,,,,,,',
',,,,,,,,122,126,,,,99,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113',
'118,121,125,129,132,135,138,101,104,108,112,117,120,124,128,131,134',
'137,100,103,107,110,116,119,123,127,130,133,106,,114,,,,,,,,,,,,,,,',
',,,,,,,,122,126,,,,99,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113',
'118,121,125,129,132,135,138,101,104,108,112,117,120,124,128,131,134',
'137,100,103,107,110,116,119,123,127,130,133,106,,114,,,,,,,,,,,,,,,',
',,,,,,,,122,126,,,,99,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113',
'118,121,125,129,132,135,138,101,104,108,112,117,120,124,128,131,134',
'137,100,103,107,110,116,119,123,127,130,133,122,126,,,,,,,,115,,,,,',
',,,,111,,,,,,136,139,102,105,109,113,118,121,125,129,132,135,138,101',
'104,108,112,117,120,124,128,131,134,137,100,103,107,110,116,119,123',
'127,130,133,122,126,,,,,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109',
'113,118,121,125,129,132,135,138,101,104,108,112,117,120,124,128,131',
'134,137,100,103,107,110,116,119,123,127,130,133,122,126,,,,,,,,115,',
',,,,,,,,111,,,,,,136,139,102,105,109,113,118,121,125,129,132,135,138',
'101,104,108,112,117,120,124,128,131,134,137,100,103,107,110,116,119',
'123,122,126,,,,,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113,118',
'121,125,129,132,135,138,101,104,108,112,117,120,124,128,131,134,137',
'100,103,107,110,116,119,123,122,126,,,,,,,,115,,,,,,,,,,111,,,,,,136',
'139,102,105,109,113,118,121,125,129,132,135,138,101,104,108,112,117',
'120,124,128,131,134,137,100,103,107,110,116,119,123,122,126,,,,,,,,115',
',,,,,,,,,111,,,,,,136,139,102,105,109,113,118,121,125,129,132,135,138',
'101,104,108,112,117,120,124,128,131,134,137,100,103,107,110,116,119',
'123,126,,,,,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113,118,121',
'125,129,132,135,138,101,104,108,112,117,120,124,128,131,134,137,100',
'103,107,110,116,119,123,126,,,,,,,,115,,,,,,,,,,111,,,,,,136,139,102',
'105,109,113,118,121,125,129,132,135,138,101,104,108,112,117,120,124',
'128,131,134,137,100,103,107,110,116,119,123,126,,,,,,,,115,,,,,,,,,',
'111,,,,,,136,139,102,105,109,113,118,121,125,129,132,135,138,101,104',
'108,112,117,120,124,128,131,134,137,100,103,107,110,116,119,123,126',
',,,,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109,113,118,121,125,129',
'132,135,138,101,104,108,112,117,120,124,128,131,134,137,100,103,107',
'110,116,119,123,126,,,,,,,,115,,,,,,,,,,111,,,,,,136,139,102,105,109',
'113,118,121,125,129,132,135,138,101,104,108,112,117,120,124,128,131',
'134,137,100,103,107,110,116,119,123,115,,,,,,,,,,111,,,,,,136,139,102',
'105,109,113,118,121,125,129,132,135,138,101,104,108,112,117,120,124',
'128,131,134,137,100,103,107,110,116,119,115,,,,,,,,,,111,,,,,,136,139',
'102,105,109,113,118,121,125,129,132,135,138,101,104,108,112,117,120',
'124,128,131,134,137,100,103,107,110,116,119,115,,,,,,,,,,111,,,,,,136',
'139,102,105,109,113,118,121,125,129,132,135,138,101,104,108,112,117',
'120,124,128,131,134,137,100,103,107,110,116,119,111,,,,,,136,139,102',
'105,109,113,118,121,125,129,132,135,138,101,104,108,112,117,120,124',
'128,131,134,137,100,103,107,110,116,119,111,,,,,,136,139,102,105,109',
'113,118,121,125,129,132,135,138,101,104,108,112,117,120,124,128,131',
'134,137,100,103,107,110,116,119,111,,,,,,136,139,102,105,109,113,118',
'121,125,129,132,135,138,101,104,108,112,117,120,124,128,131,134,137',
'100,103,107,110,116,119,111,,,,,,136,139,102,105,109,113,118,121,125',
'129,132,135,138,101,104,108,112,117,120,124,128,131,134,137,100,103',
'107,110,116,119,111,,,,,,136,139,102,105,109,113,118,121,125,129,132',
'135,138,101,104,108,112,117,120,124,128,131,134,137,100,103,107,110',
'116,119' ]
        racc_action_table = arr = Array.new(9789, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'87,145,87,111,111,111,111,111,111,111,111,111,111,296,193,193,79,111',
'111,111,111,296,248,111,111,111,87,87,193,265,248,87,111,186,111,87',
'111,111,291,111,190,111,111,123,145,87,275,111,111,111,111,87,87,87',
'87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87',
'87,87,87,87,87,87,87,87,291,111,111,83,83,83,111,75,111,100,111,87,100',
'100,100,100,100,100,100,100,100,100,277,70,70,70,100,100,100,100,275',
'275,100,100,100,100,76,185,94,152,100,100,35,100,76,100,100,176,100',
'151,100,100,90,90,277,176,100,100,100,100,100,100,277,38,38,277,100',
'38,301,301,208,217,217,76,263,76,208,208,208,208,208,83,94,94,176,83',
'84,84,84,98,98,41,41,41,149,100,100,244,244,244,100,70,100,302,100,70',
'302,302,302,302,302,302,302,302,302,302,41,243,243,243,302,302,302,302',
'42,175,302,302,302,302,259,176,176,175,302,302,245,302,259,302,302,180',
'302,254,302,302,29,29,34,34,302,302,302,302,302,302,272,272,143,161',
'302,21,175,41,84,161,161,259,84,41,197,278,278,41,141,244,197,197,140',
'244,245,245,245,218,184,180,180,180,245,302,302,294,39,180,302,243,302',
'3,302,243,3,3,3,3,3,3,3,3,3,3,91,169,97,14,3,3,3,3,174,160,3,3,3,3,6',
'160,160,80,3,3,173,3,2,3,3,159,3,303,3,3,2,159,159,1,3,3,3,3,3,3,122',
',,,3,169,169,169,,169,,204,174,174,174,,230,204,204,2,,2,230,230,230',
'230,230,230,230,230,230,230,,3,3,,,,3,,3,126,3,,126,126,126,126,126',
'126,126,126,126,126,,,89,,126,126,126,126,89,89,126,126,126,126,78,78',
'78,,126,126,78,126,,126,126,200,126,,126,126,,200,200,,126,126,126,126',
'126,126,219,,,,126,,219,219,219,219,219,219,219,219,219,219,219,219',
'219,219,219,219,219,219,219,219,219,,,165,,,,126,126,165,165,,126,,126',
'125,126,,125,125,125,125,125,125,125,125,125,125,,,166,,125,125,125',
'125,166,166,125,125,125,125,,,,,125,125,,125,,125,125,163,125,,125,125',
',163,163,,125,125,125,125,125,125,215,,,,125,,215,215,215,215,215,215',
'215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,,,,,,,125',
'125,,,,125,,125,9,125,,9,9,9,9,9,9,9,9,9,9,,,,,9,9,9,9,,,9,9,9,9,,,',
',9,9,,9,,9,9,,9,,9,9,,,,,9,9,9,9,9,9,223,,,,9,,223,223,223,223,223,223',
'223,223,223,223,223,223,223,223,223,223,223,223,223,223,223,,,,,,,9',
'9,,,,9,,9,10,9,,10,10,10,10,10,10,10,10,10,10,,,,,10,10,10,10,,,10,10',
'10,10,,,,,10,10,,10,,10,10,,10,,10,10,,,,,10,10,10,10,10,10,195,,,,10',
',195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195',
'195,195,195,195,,,,,,,10,10,,,,10,,10,124,10,,124,124,124,124,124,124',
'124,124,124,124,,,,,124,124,124,124,,,124,124,124,124,,,,,124,124,,124',
',124,124,,124,,124,124,,,,,124,124,124,124,124,124,231,,,,124,,231,231',
'231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231',
'231,231,,,,,,,124,124,,,,124,,124,13,124,,13,13,13,13,13,13,13,13,13',
'13,,,,,13,13,13,13,,,13,13,13,13,,,,,13,13,,13,,13,13,,13,,13,13,,,',
',13,13,13,13,13,13,229,,,,13,,229,229,229,229,229,229,229,229,229,229',
'229,229,229,229,229,229,229,229,229,229,229,,,,,,,13,13,,,,13,,13,128',
'13,,128,128,128,128,128,128,128,128,128,128,,,,,128,128,128,128,,,128',
'128,128,128,,,,,128,128,,128,,128,128,,128,,128,128,,,,,128,128,128',
'128,128,128,226,,,,128,,226,226,226,226,226,226,226,226,226,226,226',
'226,226,226,226,226,226,226,226,226,226,,,,,,,128,128,,,,128,,128,284',
'128,,284,284,284,284,284,284,284,284,284,284,,,,,284,284,284,284,,,284',
'284,284,284,,,,,284,284,,284,,284,284,,284,,284,284,,,,,284,284,284',
'284,284,284,212,,,,284,,212,212,212,212,212,212,212,212,212,212,212',
'212,212,212,212,212,212,212,212,212,212,,284,,,,,284,284,,,,284,,284',
'22,284,,22,22,22,22,22,22,22,22,22,22,,,,,22,22,22,22,,,22,22,22,22',
',,,,22,22,,22,,22,22,,22,,22,22,,,,,22,22,22,22,22,22,196,,,,22,,196',
'196,196,196,196,196,196,196,196,196,196,196,196,224,,,,,,224,224,224',
'224,224,224,224,,22,22,,,,22,,22,282,22,,282,282,282,282,282,282,282',
'282,282,282,,,,,282,282,282,282,,,282,282,282,282,,,,,282,282,,282,',
'282,282,,282,,282,282,,,,,282,282,282,282,282,282,207,,,,282,,207,207',
'207,207,207,207,207,207,207,207,207,207,207,220,,,,,,220,220,220,220',
'220,220,220,,282,282,,,,282,,282,30,282,,30,30,30,30,30,30,30,30,30',
'30,,,,,30,30,30,30,,,30,30,30,30,,,,,30,30,,30,,30,30,,30,,30,30,,30',
',,30,30,30,30,30,30,203,,,,30,,203,203,203,203,203,203,203,203,203,203',
'203,203,203,216,,,,,,216,216,216,216,216,216,216,,30,30,,,,30,,30,281',
'30,,281,281,281,281,281,281,281,281,281,281,,,,,281,281,281,281,,,281',
'281,281,281,,,,,281,281,,281,,281,281,,281,,281,281,,,,,281,281,281',
'281,281,281,199,,,,281,,199,199,199,199,199,199,199,199,199,199,199',
'199,199,213,,,,,,213,213,213,213,213,,,,281,281,,,,281,,281,276,281',
',276,276,276,276,276,276,276,276,276,276,,,,,276,276,276,276,,,276,276',
'276,276,,,,,276,276,,276,,276,276,,276,,276,276,,,,,276,276,276,276',
'276,276,232,,,,276,,232,232,232,232,232,232,232,232,232,232,227,,,,',
',227,227,227,227,227,227,227,227,227,227,,276,276,,,,276,,276,271,276',
',271,271,271,271,271,271,271,271,271,271,,,,,271,271,271,271,,,271,271',
'271,271,,,,,271,271,,271,,271,271,,271,,271,271,,,,,271,271,271,271',
'271,271,,,,,271,,,,,,,,,,,,,,,,,,,,,,,,,,,,,271,271,,,,271,,271,270',
'271,,270,270,270,270,270,270,270,270,270,270,,,,,270,270,270,270,,,270',
'270,270,270,,,,,270,270,,270,,270,270,,270,,270,270,,,,,270,270,270',
'270,270,270,,,,,270,,,,,,,,,,,,,,,,,,,,,,,,,,,,,270,270,,,,270,,270',
'251,270,,251,251,251,251,251,251,251,251,251,251,,,,,251,251,251,251',
',,251,251,251,251,,,,,251,251,,251,,251,251,,251,,251,251,251,,,,251',
'251,251,251,251,251,,,,,251,,,,,,,,,,,,,,,,,,,,,,,,,,,,,251,251,251',
'251,,251,,251,250,251,,250,250,250,250,250,250,250,250,250,250,,,,,250',
'250,250,250,,,250,250,250,250,,,,,250,250,,250,,250,250,,250,,250,250',
',,,,250,250,250,250,250,250,,,,,250,,,,,,,,,,,,,,,,,,,,,,,,,,,,,250',
'250,,,,250,,250,129,250,,129,129,129,129,129,129,129,129,129,129,,,',
',129,129,129,129,,,129,129,129,129,,,,,129,129,,129,,129,129,,129,,129',
'129,,,,,129,129,129,129,129,129,,,,,129,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'129,129,,,,129,,129,44,129,,44,44,44,44,44,44,44,44,44,44,,,,,44,44',
'44,44,,,44,44,44,44,,,,,44,44,,44,,44,44,,44,,44,44,,,,,44,44,44,44',
'44,44,,,,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,44,44,,,,44,,44,48,44,,48,48',
'48,48,48,48,48,48,48,48,,,,,48,48,48,48,,,48,48,48,48,,,,,48,48,,48',
',48,48,,48,,48,48,,,,,48,48,48,48,48,48,,,,,48,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,48,48,,,,48,,48,53,48,,53,53,53,53,53,53,53,53,53,53,,,,,53,53',
'53,53,,,53,53,53,53,,,,,53,53,,53,,53,53,,53,,53,53,,,,,53,53,53,53',
'53,53,,,,,53,,,,,,,,,,,,,,,,,,,,,,,,,,,,,53,53,,,,53,,53,57,53,,57,57',
'57,57,57,57,57,57,57,57,,,,,57,57,57,57,,,57,57,57,57,,,,,57,57,,57',
',57,57,,57,,57,57,,,,,57,57,57,57,57,57,,,,,57,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,57,57,,,,57,,57,59,57,,59,59,59,59,59,59,59,59,59,59,,,,,59,59',
'59,59,,,59,59,59,59,,,,,59,59,,59,,59,59,,59,,59,59,,,,,59,59,59,59',
'59,59,,,,,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,,59,59,,,,59,,59,63,59,,63,63',
'63,63,63,63,63,63,63,63,,,,,63,63,63,63,,,63,63,63,63,,,,,63,63,,63',
',63,63,,63,,63,63,,,,,63,63,63,63,63,63,,,,,63,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,63,63,,,,63,,63,64,63,,64,64,64,64,64,64,64,64,64,64,,,,,64,64',
'64,64,,,64,64,64,64,,,,,64,64,,64,,64,64,,64,,64,64,,,,,64,64,64,64',
'64,64,,,,,64,,,,,,,,,,,,,,,,,,,,,,,,,,,,,64,64,,,,64,,64,68,64,,68,68',
'68,68,68,68,68,68,68,68,,,,,68,68,68,68,,,68,68,68,68,,,,,68,68,,68',
',68,68,,68,,68,68,,,,,68,68,68,68,68,68,,,,,68,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,68,68,,,,68,,68,192,68,,192,192,192,192,192,192,192,192,192,192',
',,,,192,192,192,192,,,192,192,192,192,,,,,192,192,,192,,192,192,,192',
',192,192,,,,,192,192,192,192,192,192,,,,,192,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,192,192,,,,192,,192,71,192,,71,71,71,71,71,71,71,71,71,71,,,,,71',
'71,71,71,,,71,71,71,71,,,,,71,71,,71,,71,71,,71,,71,71,71,,,,71,71,71',
'71,71,71,,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,,71,71,,,,71,,71,72,71,,72',
'72,72,72,72,72,72,72,72,72,,,,,72,72,72,72,,,72,72,72,72,,,,,72,72,',
'72,,72,72,,72,,72,72,,,,,72,72,72,72,72,72,,,,,72,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,72,72,,,,72,,72,191,72,,191,191,191,191,191,191,191,191,191',
'191,,,,,191,191,191,191,,,191,191,191,191,,,,,191,191,,191,,191,191',
',191,,191,191,,,,,191,191,191,191,191,191,,,,,191,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,191,191,,,,191,,191,179,191,,179,179,179,179,179,179,179,179',
'179,179,,,,,179,179,179,179,,,179,179,179,179,,,,,179,179,,179,,179',
'179,,179,,179,179,,,,,179,179,179,179,179,179,,,,,179,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,179,179,,,,179,,179,178,179,,178,178,178,178,178,178,178',
'178,178,178,,,,,178,178,178,178,,,178,178,178,178,,,,,178,178,,178,',
'178,178,,178,,178,178,,,,,178,178,178,178,178,178,,,,,178,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,178,178,,,,178,,178,121,178,,121,121,121,121,121,121',
'121,121,121,121,,,,,121,121,121,121,,,121,121,121,121,,,,,121,121,,121',
',121,121,,121,,121,121,,,,,121,121,121,121,121,121,,,,,121,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,121,121,,,,121,,121,170,121,,170,170,170,170,170',
'170,170,170,170,170,,,,,170,170,170,170,,,170,170,170,170,,,,,170,170',
',170,,170,170,,170,,170,170,,,,,170,170,170,170,170,170,,,,,170,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,170,170,,,,170,,170,157,170,,157,157,157,157',
'157,157,157,157,157,157,,,,,157,157,157,157,,,157,157,157,157,,,,,157',
'157,,157,,157,157,,157,,157,157,,,,,157,157,157,157,157,157,,,,,157',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,157,157,,,,157,,157,155,157,,155,155,155',
'155,155,155,155,155,155,155,,,,,155,155,155,155,,,155,155,155,155,,',
',,155,155,,155,,155,155,,155,,155,155,155,,,,155,155,155,155,155,155',
',,,,155,,,,,,,,,,,,,,,,,,,,,,,,,,,,,155,155,,,,155,,155,120,155,,120',
'120,120,120,120,120,120,120,120,120,,,,,120,120,120,120,,,120,120,120',
'120,,,,,120,120,,120,,120,120,,120,,120,120,,,,,120,120,120,120,120',
'120,,,,,120,,,,,,,,,,,,,,,,,,,,,,,,,,,,,120,120,,,,120,,120,85,120,',
'85,85,85,85,85,85,85,85,85,85,,,,,85,85,85,85,,,85,85,85,85,,,,,85,85',
',85,,85,85,,85,,85,85,85,,,,85,85,85,85,85,85,,,,,85,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,85,85,,,,85,,85,150,85,,150,150,150,150,150,150,150,150',
'150,150,,,,,150,150,150,150,,,150,150,150,150,,,,,150,150,,150,,150',
'150,,150,,150,150,,,,,150,150,150,150,150,150,,,,,150,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,150,150,,,,150,,150,0,150,,0,0,0,0,0,0,0,0,0,0,,,,,0,0',
'0,0,,,0,0,0,0,,,,,0,0,,0,,0,0,,0,,0,0,0,,,,0,0,0,0,0,0,,,,,0,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,0,0,0,0,,0,,0,138,0,,138,138,138,138,138,138,138',
'138,138,138,,,,,138,138,138,138,,,138,138,138,138,,,,,138,138,,138,',
'138,138,,138,,138,138,,,,,138,138,138,138,138,138,,,,,138,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,138,138,,,,138,,138,137,138,,137,137,137,137,137,137',
'137,137,137,137,,,,,137,137,137,137,,,137,137,137,137,,,,,137,137,,137',
',137,137,,137,,137,137,,,,,137,137,137,137,137,137,,,,,137,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,137,137,,,,137,,137,135,137,,135,135,135,135,135',
'135,135,135,135,135,,,,,135,135,135,135,,,135,135,135,135,,,,,135,135',
',135,,135,135,,135,,135,135,,,,,135,135,135,135,135,135,,,,,135,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,135,135,,,,135,,135,134,135,,134,134,134,134',
'134,134,134,134,134,134,,,,,134,134,134,134,,,134,134,134,134,,,,,134',
'134,,134,,134,134,,134,,134,134,,,,,134,134,134,134,134,134,,,,,134',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,134,134,,,,134,,134,133,134,,133,133,133',
'133,133,133,133,133,133,133,,,,,133,133,133,133,,,133,133,133,133,,',
',,133,133,,133,,133,133,,133,,133,133,,,,,133,133,133,133,133,133,,',
',,133,,,,,,,,,,,,,,,,,,,,,,,,,,,,,133,133,,,,133,,133,93,133,,93,93',
'93,93,93,93,93,93,93,93,,,,,93,93,93,93,,,93,93,93,93,,,,,93,93,,93',
',93,93,,93,,93,93,,,,,93,93,93,93,93,93,,,,,93,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,93,93,,,,93,,93,132,93,,132,132,132,132,132,132,132,132,132,132',
',,,,132,132,132,132,,,132,132,132,132,,,,,132,132,,132,,132,132,,132',
',132,132,,,,,132,132,132,132,132,132,,,,,132,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,132,132,,,,132,,132,131,132,,131,131,131,131,131,131,131,131,131',
'131,,,,,131,131,131,131,,,131,131,131,131,,,,,131,131,,131,,131,131',
',131,,131,131,,,,,131,131,131,131,131,131,,,,,131,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,131,131,,,,131,,131,130,131,,130,130,130,130,130,130,130,130',
'130,130,,,,,130,130,130,130,,,130,130,130,130,,,,,130,130,,130,,130',
'130,,130,,130,130,,,,,130,130,130,130,130,130,,,,,130,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,130,130,,,,130,,130,99,130,,99,99,99,99,99,99,99,99,99',
'99,,,,,99,99,99,99,,,99,99,99,99,,,,,99,99,,99,,99,99,,99,,99,99,,,',
',99,99,99,99,99,99,,,,,99,,,,,,,,,,,,,,,,,,,,,,,,,,,,,99,99,,,,99,,99',
'127,99,,127,127,127,127,127,127,127,127,127,127,,,,,127,127,127,127',
',,127,127,127,127,,,,,127,127,,127,,127,127,,127,,127,127,,,,,127,127',
'127,127,127,127,,,,,127,,,,,,,,,,,,,,,,,,,,,,,,,,,,,127,127,,,,127,',
'127,101,127,,101,101,101,101,101,101,101,101,101,101,,,,,101,101,101',
'101,,,101,101,101,101,,,,,101,101,,101,,101,101,,101,,101,101,,,,,101',
'101,101,101,101,101,,,,,101,,,,,,,,,,,,,,,,,,,,,,,,,,,,,101,101,,,,101',
',101,102,101,,102,102,102,102,102,102,102,102,102,102,,,,,102,102,102',
'102,,,102,102,102,102,,,,,102,102,,102,,102,102,,102,,102,102,,,,,102',
'102,102,102,102,102,,,,,102,,,,,,,,,,,,,,,,,,,,,,,,,,,,,102,102,,,,102',
',102,103,102,,103,103,103,103,103,103,103,103,103,103,,,,,103,103,103',
'103,,,103,103,103,103,,,,,103,103,,103,,103,103,,103,,103,103,,,,,103',
'103,103,103,103,103,,,,,103,,,,,,,,,,,,,,,,,,,,,,,,,,,,,103,103,,,,103',
',103,104,103,,104,104,104,104,104,104,104,104,104,104,,,,,104,104,104',
'104,,,104,104,104,104,,,,,104,104,,104,,104,104,,104,,104,104,,,,,104',
'104,104,104,104,104,,,,,104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,104,104,,,,104',
',104,105,104,,105,105,105,105,105,105,105,105,105,105,,,,,105,105,105',
'105,,,105,105,105,105,,,,,105,105,,105,,105,105,,105,,105,105,,,,,105',
'105,105,105,105,105,,,,,105,,,,,,,,,,,,,,,,,,,,,,,,,,,,,105,105,,,,105',
',105,106,105,,106,106,106,106,106,106,106,106,106,106,,,,,106,106,106',
'106,,,106,106,106,106,,,,,106,106,,106,,106,106,,106,,106,106,,,,,106',
'106,106,106,106,106,,,,,106,,,,,,,,,,,,,,,,,,,,,,,,,,,,,106,106,,,,106',
',106,118,106,,118,118,118,118,118,118,118,118,118,118,,,,,118,118,118',
'118,,,118,118,118,118,,,,,118,118,,118,,118,118,,118,,118,118,,,,,118',
'118,118,118,118,118,,,,,118,,,,,,,,,,,,,,,,,,,,,,,,,,,,,118,118,,,,118',
',118,108,118,,108,108,108,108,108,108,108,108,108,108,,,,,108,108,108',
'108,,,108,108,108,108,,,,,108,108,,108,,108,108,,108,,108,108,,,,,108',
'108,108,108,108,108,,,,,108,,,,,,,,,,,,,,,,,,,,,,,,,,,,,108,108,,,,108',
',108,109,108,,109,109,109,109,109,109,109,109,109,109,,,,,109,109,109',
'109,,,109,109,109,109,,,,,109,109,,109,,109,109,,109,,109,109,,,,,109',
'109,109,109,109,109,,,,,109,,,,,,,,,,,,,,,,,,,,,,,,,,,,,109,109,,,,109',
',109,110,109,,110,110,110,110,110,110,110,110,110,110,,,,,110,110,110',
'110,,,110,110,110,110,,,,,110,110,,110,,110,110,,110,,110,110,,,,,110',
'110,110,110,110,110,,,,,110,,,,,,,,,,,,,,,,,,,,,,,,,,,,,110,110,,,,110',
',110,119,110,,119,119,119,119,119,119,119,119,119,119,,,,,119,119,119',
'119,,,119,119,119,119,,,,,119,119,,119,,119,119,,119,,119,119,,,,,119',
'119,119,119,119,119,,,,,119,,,,,,,,,,,,,,,,,,,,,,,,,,,,,119,119,,,,119',
',119,112,119,,112,112,112,112,112,112,112,112,112,112,,,,,112,112,112',
'112,,,112,112,112,112,,,,,112,112,,112,,112,112,,112,,112,112,,,,,112',
'112,112,112,112,112,,,,,112,,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,112,,,,112',
',112,113,112,,113,113,113,113,113,113,113,113,113,113,,,,,113,113,113',
'113,,,113,113,113,113,,,,,113,113,,113,,113,113,,113,,113,113,,,,,113',
'113,113,113,113,113,,,,,113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,113,113,,,,113',
',113,114,113,,114,114,114,114,114,114,114,114,114,114,,,,,114,114,114',
'114,,,114,114,114,114,,,,,114,114,,114,,114,114,,114,,114,114,,,,,114',
'114,114,114,114,114,,,,,114,,,,,,,,,,,,,,,,,,,,,,,,,,,,,114,114,,,,114',
',114,115,114,,115,115,115,115,115,115,115,115,115,115,,,,,115,115,115',
'115,,,115,115,115,115,,,,,115,115,,115,,115,115,,115,,115,115,,,,,115',
'115,115,115,115,115,,,,,115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,115,115,,,,115',
',115,116,115,,116,116,116,116,116,116,116,116,116,116,,,,,116,116,116',
'116,,,116,116,116,116,,,,,116,116,,116,,116,116,,116,,116,116,,,,,116',
'116,116,116,116,116,,,,,116,,,,,,,,,,,,,,,,,,,,,,,,,,,,,116,116,,,,116',
',116,117,116,,117,117,117,117,117,117,117,117,117,117,,,,,117,117,117',
'117,,,117,117,117,117,,,,,117,117,,117,,117,117,,117,,117,117,,,,,117',
'117,117,117,117,117,,,,,117,,,,,,,,,,,,,,,,,,,,,,,,,,,,,117,117,,,,117',
',117,107,117,,107,107,107,107,107,107,107,107,107,107,,,,,107,107,107',
'107,,,107,107,107,107,,,,,107,107,,107,,107,107,,107,,107,107,,,,,107',
'107,107,107,107,107,,,,,107,153,153,153,153,153,153,153,153,153,153',
',,,,,,,,,,,153,153,,,,,,107,107,,,,107,,107,153,107,,153,,,305,,305',
'5,5,5,5,5,5,5,5,5,5,,,,,,,,,,,,5,5,305,305,,,,305,,,,305,,,,5,,,5,,',
'305,153,,153,,153,305,305,305,305,305,305,305,305,305,305,305,305,305',
'305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305',
'305,305,305,305,240,,240,,,,5,305,5,,5,,,,,,,,,,,,,,,,240,240,,,,240',
',,,240,,,,,,,,,,240,,,,,,240,240,240,240,240,240,240,240,240,240,240',
'240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240',
'240,240,240,240,240,240,,,,,,,,240,11,11,11,11,11,11,11,11,11,11,,,',
',11,11,11,11,,,11,11,11,11,,,,,,11,,11,,11,11,,11,,11,11,,,,,11,11,11',
'11,11,11,300,,300,,11,,,,,,,,,,,,,,,,,,,,,,300,300,,,,300,,11,11,300',
',,11,,11,,11,,,300,,,,,,300,300,300,300,300,300,300,300,300,300,300',
'300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300',
'300,300,300,300,300,300,,,,,,,,300,299,299,299,299,299,299,299,299,299',
'299,,,,,299,299,299,299,,,299,299,299,,,,,,,299,,299,,299,299,,299,',
'299,299,,,,,299,299,299,299,299,299,162,,162,,299,,,,,,,,,,,,,,,,,,',
',,,162,162,,,,162,,299,299,162,,,299,,299,,299,162,,162,,,,,,162,162',
'162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162',
'162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,308,,308',
',,,,,,,,,,,,,,,,,,,,,,,308,308,,,,308,,,,308,,,,,,,,,,308,,,,,,308,308',
'308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308',
'308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,201,,201',
',,,,,,,,,,,,,,,,,,,,,,,201,201,,,,201,,,,201,,,,,,,,,,201,,,,,,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,298,,298',
',,,,,,,,,,,,,,,,,,,,,,,298,298,,,,298,,,,298,,,,,,,,,,298,,,,,,298,298',
'298,298,298,298,298,298,298,298,298,298,298,298,298,298,298,298,298',
'298,298,298,298,298,298,298,298,298,298,298,298,298,298,298,194,,194',
',,,,,,,,,,,,,,,,,,,,,,,194,194,,,,194,,,,194,,,,,,,,,,194,,,,,,194,194',
'194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194',
'194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,188,,188',
',,,,,,,,,,,,,,,,,,,,,,,188,188,,,,188,,,,188,,,,,,,,,,188,,,,,,188,188',
'188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188',
'188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,297,,297',
',,,,,,,,,,,,,,,,,,,,,,,297,297,,,,297,,,,297,,,,,,,,,,297,,,,,,297,297',
'297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297',
'297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,292,,292',
',,,,,,,,,,,,,,,,,,,,,,,292,292,,,,292,,,,292,,,,,,,,,,292,,,,,,292,292',
'292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292',
'292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,181,,181',
',,,,,,,,,,,,,,,,,,,,,,,181,181,,,,181,,,,181,,,,,,,,,,181,,,,,,181,181',
'181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181',
'181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,37,,37,',
',,,,,,,,,,,,,,,,,,,,,,37,37,,,,37,,,,37,,,,,,,,,,37,,,,,,37,37,37,37',
'37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37',
'37,37,37,37,37,37,37,171,,171,,,,,,,,,,,,,,,,,,,,,,,,171,171,,,,171',
',,,171,,,,,,,,,,171,,,,,,171,171,171,171,171,171,171,171,171,171,171',
'171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171',
'171,171,171,171,171,171,253,,253,,,,,,,,,,,,,,,,,,,,,,,,253,253,,,,253',
',,,253,,,,,,,,,,253,,,,,,253,253,253,253,253,253,253,253,253,253,253',
'253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253',
'253,253,253,253,253,253,283,,283,,,,,,,,,,,,,,,,,,,,,,,,283,283,,,,283',
',,,283,,,,,,,,,,283,,,,,,283,283,283,283,283,283,283,283,283,283,283',
'283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283',
'283,283,283,283,283,283,164,,164,,,,,,,,,,,,,,,,,,,,,,,,164,164,,,,164',
',,,164,,,,,,,,164,,164,,,,,,164,164,164,164,164,164,164,164,164,164',
'164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164',
'164,164,164,164,164,164,164,280,,280,,,,,,,,,,,,,,,,,,,,,,,,280,280',
',,,280,,,,280,,,,,,,,,,280,,,,,,280,280,280,280,280,280,280,280,280',
'280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280',
'280,280,280,280,280,280,280,280,86,,86,,,,,,,,,,,,,,,,,,,,,,,,86,86',
',,,86,,,,86,,,,,,,,86,,86,,,,,,86,86,86,86,86,86,86,86,86,86,86,86,86',
'86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,260,',
'260,,,,,,,,,,,,,,,,,,,,,,,,260,260,,,,260,,,,260,,,,,,,,,,260,,,,,,260',
'260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260',
'260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,261',
',261,,,,,,,,,,,,,,,,,,,,,,,,261,261,,,,261,,,,261,,,,,,,,,,261,,,,,',
'261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261',
'261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261',
'209,,209,,,,,,,,,,,,,,,,,,,,,,,,209,209,,,,209,,,,209,,,,,,,,,,209,',
',,,,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209',
'209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209',
'209,246,246,,,,,,,,246,,,,,,,,,,246,,,,,,246,246,246,246,246,246,246',
'246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246',
'246,246,246,246,246,246,246,246,246,246,88,88,,,,,,,,88,,,,,,,,,,88',
',,,,,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88',
'88,88,88,88,88,88,88,88,88,88,88,88,88,225,225,,,,,,,,225,,,,,,,,,,225',
',,,,,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,228,228',
',,,,,,,228,,,,,,,,,,228,,,,,,228,228,228,228,228,228,228,228,228,228',
'228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228',
'228,228,228,228,92,92,,,,,,,,92,,,,,,,,,,92,,,,,,92,92,92,92,92,92,92',
'92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92',
'92,222,222,,,,,,,,222,,,,,,,,,,222,,,,,,222,222,222,222,222,222,222',
'222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222',
'222,222,222,222,222,222,222,289,,,,,,,,289,,,,,,,,,,289,,,,,,289,289',
'289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289',
'289,289,289,289,289,289,289,289,289,289,289,289,268,,,,,,,,268,,,,,',
',,,,268,,,,,,268,268,268,268,268,268,268,268,268,268,268,268,268,268',
'268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268',
'221,,,,,,,,221,,,,,,,,,,221,,,,,,221,221,221,221,221,221,221,221,221',
'221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221',
'221,221,221,221,221,288,,,,,,,,288,,,,,,,,,,288,,,,,,288,288,288,288',
'288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288',
'288,288,288,288,288,288,288,288,288,288,267,,,,,,,,267,,,,,,,,,,267',
',,,,,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267',
'267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,82,,,,,',
',,,,82,,,,,,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82',
'82,82,82,82,82,82,82,82,82,82,82,210,,,,,,,,,,210,,,,,,210,210,210,210',
'210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210',
'210,210,210,210,210,210,210,210,210,172,,,,,,,,,,172,,,,,,172,172,172',
'172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172',
'172,172,172,172,172,172,172,172,172,172,198,,,,,,198,198,198,198,198',
'198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198',
'198,198,198,198,198,198,198,198,205,,,,,,205,205,205,205,205,205,205',
'205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205',
'205,205,205,205,205,205,211,,,,,,211,211,211,211,211,211,211,211,211',
'211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211',
'211,211,211,211,202,,,,,,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,214,,,,,,214,214,214,214,214,214,214,214,214,214,214,214,214',
'214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214' ]
        racc_action_check = arr = Array.new(9789, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  4040,   245,   311,   280,   nil,  6866,   212,   nil,   nil,   562,
   656,  7041,   nil,   844,   253,   nil,   nil,   nil,   nil,   nil,
   nil,   246,  1126,   nil,   nil,   nil,   nil,   nil,   nil,   141,
  1314,   nil,   nil,   nil,   143,   113,   nil,  8002,    60,   274,
   nil,   161,   164,   nil,  2066,   nil,   nil,   nil,  2160,   nil,
   nil,   nil,   nil,  2254,   nil,   nil,   nil,  2348,   nil,  2442,
   nil,   nil,   nil,  2536,  2630,   nil,   nil,   nil,  2724,   nil,
    93,  2912,  3006,   nil,   nil,     9,   115,   nil,   313,   -71,
   225,   nil,  9434,    73,   156,  3852,  8512,    -2,  8885,   344,
   114,   295,  9056,  4604,    77,   nil,   nil,   205,   145,  4980,
    92,  5168,  5262,  5356,  5450,  5544,  5638,  6766,  5826,  5920,
  6014,    -2,  6202,  6296,  6390,  6484,  6578,  6672,  5732,  6108,
  3758,  3382,   321,   -40,   750,   468,   374,  5074,   938,  1972,
  4886,  4792,  4698,  4510,  4416,  4322,   nil,  4228,  4134,   nil,
   218,   240,   nil,   240,   nil,    -1,   nil,   nil,   nil,   165,
  3946,   120,   110,  6821,   nil,  3664,   nil,  3570,   nil,   273,
   257,   197,  7237,   461,  8342,   411,   438,   nil,   nil,   250,
  3476,  8087,  9526,   232,   257,   204,   126,   nil,  3288,  3194,
   180,  7917,   nil,   nil,   255,    77,     9,   nil,  7662,   nil,
    26,  3100,  2818,   -17,  7577,   664,  1134,   208,  9562,  1416,
   367,  7407,  9670,  1322,   299,  9598,   nil,  1228,   108,  8767,
  9480,  9634,  1040,  1435,  9706,   476,  1341,   127,   185,   382,
  1247,  9277,  9112,   570,  1153,  8944,   946,  1526,  9000,   852,
   304,   758,  1510,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  6951,   nil,   nil,   187,   167,   175,  8826,   nil,   -13,   nil,
  1878,  1784,   nil,  8172,   145,   nil,   nil,   nil,   nil,   209,
  8597,  8682,   nil,   114,   nil,   -16,   nil,  9387,  9222,   nil,
  1690,  1596,   210,   nil,   nil,    27,  1502,   104,   166,   nil,
  8427,  1408,  1220,  8257,  1032,   nil,   nil,   nil,  9332,  9167,
   nil,    -7,  7832,   nil,   231,   nil,   -22,  7747,  7492,  7184,
  7094,    63,   186,   276,   nil,  6866,   nil,   nil,  7322,   nil,
   nil ]

racc_action_default = [
    -1,  -100,  -118,  -181,   -17,  -181,  -181,   -18,  -126,  -181,
  -181,   -46,   -19,  -181,  -181,   -34,   -20,   -21,   -47,   -22,
   -28,  -181,  -181,   -23,   -29,    -2,   -30,   -31,   -32,    -3,
  -181,  -104,   -35,   -33,  -181,  -181,   -36,    -5,  -181,  -174,
   -37,    -8,  -181,    -9,  -181,   -98,   -38,   -10,  -181,  -105,
   -39,   -96,   -11,  -181,  -106,   -40,   -97,  -181,   -12,  -181,
  -107,  -103,   -26,  -181,  -181,  -108,   -27,   -13,  -181,   -14,
  -124,  -136,  -181,   -15,   -16,  -181,  -118,  -119,  -181,  -181,
  -181,   -44,   -56,  -181,  -125,  -136,  -181,  -181,   -45,   -50,
  -181,  -181,  -150,    -7,  -181,   -25,    -4,  -157,  -181,  -181,
  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,
  -181,   -93,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,
  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,
  -181,  -181,  -181,  -181,  -181,  -181,   -58,  -181,  -181,   -57,
  -181,  -181,  -172,  -174,  -176,  -181,  -178,  -114,  -128,  -181,
  -181,  -181,  -181,  -181,  -115,  -136,  -109,  -181,   -95,   -51,
   -48,   -49,  -153,   -52,  -181,   -54,   -53,  -129,  -110,  -181,
  -181,  -137,   -55,  -181,  -181,  -181,  -181,  -117,  -181,  -181,
  -181,  -137,  -170,  -151,  -181,  -181,  -146,   311,    -6,   -24,
  -181,  -181,  -181,  -181,  -154,   -81,   -70,   -59,   -83,   -71,
   -60,  -179,   -84,   -72,   -61,   -85,   -82,   -73,   -62,  -180,
   -91,   -86,   -74,   -63,   -87,   -75,   -64,  -181,  -181,   -76,
   -65,   -92,   -88,   -77,   -66,   -89,   -78,   -67,   -90,   -79,
   -68,   -80,   -69,   -94,   -99,  -173,  -177,  -171,  -175,  -111,
  -181,  -112,  -113,  -127,  -181,  -181,   -41,  -152,  -181,  -143,
  -181,  -181,  -135,  -138,  -181,  -101,  -123,  -121,  -120,  -181,
   -42,   -43,  -132,  -181,  -147,  -181,  -158,  -159,  -160,  -156,
  -181,  -181,  -155,  -102,  -116,  -130,  -181,  -181,  -181,  -165,
  -140,  -181,  -181,  -139,  -181,  -122,  -149,  -148,  -162,  -161,
  -131,  -181,  -144,  -163,  -181,  -166,  -181,  -141,  -142,  -102,
  -181,  -167,  -181,  -181,  -169,  -181,  -133,  -168,  -145,  -164,
  -134 ]

racc_goto_table = [
    25,    84,    83,   154,   167,   168,    82,   193,    98,   169,
    78,    29,    86,    87,    88,    81,    89,    21,   167,   168,
   279,   144,   291,   180,   186,    92,   277,   234,   237,    93,
   140,   143,   154,   290,    96,   142,   146,   nil,   nil,   nil,
   nil,    94,   nil,   nil,   nil,   154,   154,   159,   nil,   295,
   nil,   160,   nil,   nil,   nil,   nil,   161,   nil,   nil,    34,
   162,   nil,   163,   257,   258,   nil,   164,   165,   304,   nil,
   nil,   166,   nil,    90,   171,   172,   nil,   nil,   175,   nil,
   nil,   nil,   nil,   nil,   174,   nil,   nil,   nil,   181,    81,
   nil,   nil,   nil,   245,    93,   217,   188,   nil,   nil,   nil,
   nil,   158,   194,   195,   196,   197,   198,   199,   200,   201,
   202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
   212,   213,   214,   215,   216,   236,   272,   219,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   230,   235,
   231,   232,   nil,   nil,   nil,   182,   nil,   285,   nil,   244,
   243,   nil,   nil,   240,   nil,   nil,   nil,   nil,   181,   nil,
   246,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   253,   175,   nil,   259,   nil,   167,   168,
   nil,   260,   261,   nil,   nil,   nil,   nil,   nil,    81,    81,
   nil,   nil,   nil,   nil,   267,   268,   nil,   nil,   nil,   233,
   nil,   nil,   nil,   nil,   238,   154,   154,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   247,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   264,   nil,   nil,   nil,   nil,   nil,
   nil,   281,   269,   280,   283,   nil,   nil,   nil,   nil,   nil,
   nil,   278,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    81,   288,   289,   nil,   nil,   nil,   296,   292,
   nil,   nil,   nil,   nil,   297,   298,   nil,   300,   nil,   nil,
   278,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   307,   305,   nil,   nil,   308,   nil,   nil,   nil,   278,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   286,   nil,   287,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   301,   nil,   nil,   303 ]

racc_goto_check = [
     2,    32,     6,    30,    36,    31,     5,    41,    40,    37,
    34,     3,     5,     5,     5,    21,     5,     1,    36,    31,
    43,    47,    38,    37,    39,     5,    42,    26,    44,     2,
    25,    46,    30,     8,     2,    45,    48,   nil,   nil,   nil,
   nil,     3,   nil,   nil,   nil,    30,    30,     5,   nil,    43,
   nil,     5,   nil,   nil,   nil,   nil,     5,   nil,   nil,     4,
     5,   nil,     5,    23,    23,   nil,     5,     5,    43,   nil,
   nil,     5,   nil,     4,     5,     5,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,    34,   nil,   nil,   nil,     5,    21,
   nil,   nil,   nil,    37,     2,    40,     5,   nil,   nil,   nil,
   nil,     4,     5,     5,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     5,    47,    41,     5,     5,     5,
     5,     5,     5,     5,     5,     5,     5,     5,     5,    45,
     5,     5,   nil,   nil,   nil,     4,   nil,    23,   nil,    32,
     6,   nil,   nil,     5,   nil,   nil,   nil,   nil,     5,   nil,
     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     5,     2,   nil,     2,   nil,    36,    31,
   nil,     5,     5,   nil,   nil,   nil,   nil,   nil,    21,    21,
   nil,   nil,   nil,   nil,     5,     5,   nil,   nil,   nil,     4,
   nil,   nil,   nil,   nil,     4,    30,    30,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,
   nil,     2,     4,     5,     5,   nil,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,     5,     5,   nil,   nil,   nil,     2,     5,
   nil,   nil,   nil,   nil,     5,     5,   nil,     5,   nil,   nil,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,     5,   nil,   nil,     5,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     4,   nil,     4,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     4,   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,    17,     0,    11,    59,     3,    -3,   nil,  -242,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    13,   nil,  -112,   nil,    -8,  -114,   nil,   nil,   nil,
   -38,   -65,    -4,   nil,     8,   nil,   -66,   -62,  -254,   -66,
   -27,   -91,  -222,  -228,  -117,    -4,    -8,   -18,    -3 ]

racc_goto_default = [
   nil,   nil,   250,   nil,   nil,    37,    41,    43,    47,    52,
    58,    67,    69,    73,    74,     4,     7,    12,    16,    17,
    19,    23,    31,    77,    38,    42,    45,    49,    54,    60,
    65,   156,    70,   147,   nil,     8,   148,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 100, :_reduce_1,
  1, 100, :_reduce_2,
  1, 100, :_reduce_3,
  2, 100, :_reduce_4,
  1, 102, :_reduce_5,
  3, 102, :_reduce_6,
  2, 102, :_reduce_7,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  3, 103, :_reduce_24,
  2, 103, :_reduce_25,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 121, :_reduce_28,
  1, 121, :_reduce_29,
  1, 121, :_reduce_30,
  1, 121, :_reduce_31,
  1, 121, :_reduce_32,
  1, 121, :_reduce_33,
  1, 121, :_reduce_34,
  1, 121, :_reduce_35,
  1, 121, :_reduce_36,
  1, 121, :_reduce_37,
  1, 121, :_reduce_38,
  1, 121, :_reduce_39,
  1, 121, :_reduce_40,
  3, 109, :_reduce_41,
  3, 122, :_reduce_42,
  3, 122, :_reduce_43,
  1, 122, :_reduce_44,
  2, 113, :_reduce_45,
  1, 113, :_reduce_46,
  1, 120, :_reduce_47,
  2, 108, :_reduce_48,
  2, 108, :_reduce_49,
  2, 108, :_reduce_50,
  2, 108, :_reduce_51,
  2, 108, :_reduce_52,
  2, 108, :_reduce_53,
  2, 108, :_reduce_54,
  2, 108, :_reduce_55,
  2, 108, :_reduce_56,
  2, 108, :_reduce_57,
  2, 108, :_reduce_58,
  3, 108, :_reduce_59,
  3, 108, :_reduce_60,
  3, 108, :_reduce_61,
  3, 108, :_reduce_62,
  3, 108, :_reduce_63,
  3, 108, :_reduce_64,
  3, 108, :_reduce_65,
  3, 108, :_reduce_66,
  3, 108, :_reduce_67,
  3, 108, :_reduce_68,
  3, 108, :_reduce_69,
  3, 108, :_reduce_70,
  3, 108, :_reduce_71,
  3, 108, :_reduce_72,
  3, 108, :_reduce_73,
  3, 108, :_reduce_74,
  3, 108, :_reduce_75,
  3, 108, :_reduce_76,
  3, 108, :_reduce_77,
  3, 108, :_reduce_78,
  3, 108, :_reduce_79,
  3, 108, :_reduce_80,
  3, 108, :_reduce_81,
  3, 108, :_reduce_82,
  3, 108, :_reduce_83,
  3, 108, :_reduce_84,
  3, 108, :_reduce_85,
  3, 108, :_reduce_86,
  3, 108, :_reduce_87,
  3, 108, :_reduce_88,
  3, 108, :_reduce_89,
  3, 108, :_reduce_90,
  3, 108, :_reduce_91,
  3, 108, :_reduce_92,
  2, 119, :_reduce_93,
  3, 107, :_reduce_94,
  2, 107, :_reduce_95,
  1, 124, :_reduce_96,
  1, 124, :_reduce_97,
  1, 123, :_reduce_98,
  3, 123, :_reduce_99,
  1, 125, :_reduce_none,
  4, 125, :_reduce_101,
  4, 118, :_reduce_102,
  1, 105, :_reduce_103,
  1, 105, :_reduce_104,
  1, 105, :_reduce_105,
  1, 105, :_reduce_106,
  1, 105, :_reduce_107,
  1, 105, :_reduce_108,
  2, 105, :_reduce_109,
  2, 105, :_reduce_110,
  2, 130, :_reduce_111,
  2, 130, :_reduce_112,
  2, 130, :_reduce_113,
  1, 130, :_reduce_114,
  1, 130, :_reduce_115,
  3, 132, :_reduce_116,
  3, 127, :_reduce_117,
  0, 133, :_reduce_118,
  1, 133, :_reduce_119,
  3, 133, :_reduce_120,
  3, 133, :_reduce_121,
  4, 133, :_reduce_122,
  3, 133, :_reduce_123,
  1, 106, :_reduce_124,
  2, 106, :_reduce_125,
  1, 106, :_reduce_126,
  3, 117, :_reduce_127,
  2, 131, :_reduce_128,
  2, 131, :_reduce_129,
  3, 135, :_reduce_130,
  4, 135, :_reduce_131,
  4, 134, :_reduce_132,
  6, 129, :_reduce_133,
  7, 129, :_reduce_134,
  3, 126, :_reduce_135,
  0, 136, :_reduce_136,
  1, 136, :_reduce_137,
  2, 136, :_reduce_138,
  3, 136, :_reduce_139,
  3, 136, :_reduce_140,
  4, 136, :_reduce_141,
  4, 136, :_reduce_142,
  2, 136, :_reduce_143,
  1, 137, :_reduce_144,
  3, 137, :_reduce_145,
  3, 111, :_reduce_146,
  4, 111, :_reduce_147,
  5, 111, :_reduce_148,
  3, 138, :_reduce_149,
  2, 112, :_reduce_150,
  3, 128, :_reduce_151,
  3, 114, :_reduce_152,
  2, 114, :_reduce_153,
  3, 114, :_reduce_154,
  4, 115, :_reduce_155,
  4, 115, :_reduce_156,
  1, 139, :_reduce_157,
  3, 139, :_reduce_158,
  2, 140, :_reduce_159,
  2, 140, :_reduce_160,
  3, 140, :_reduce_161,
  3, 140, :_reduce_162,
  5, 116, :_reduce_163,
  7, 116, :_reduce_164,
  1, 141, :_reduce_165,
  2, 141, :_reduce_166,
  3, 142, :_reduce_167,
  4, 142, :_reduce_168,
  3, 142, :_reduce_169,
  3, 143, :_reduce_170,
  2, 144, :_reduce_171,
  1, 145, :_reduce_172,
  2, 145, :_reduce_173,
  0, 146, :_reduce_174,
  2, 146, :_reduce_175,
  1, 147, :_reduce_176,
  2, 147, :_reduce_177,
  2, 110, :_reduce_178,
  3, 110, :_reduce_179,
  3, 110, :_reduce_180 ]

racc_reduce_n = 181

racc_shift_n = 311

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :UNLESS => 4,
  :NUMBER => 5,
  :STRING => 6,
  :REGEX => 7,
  :TRUE => 8,
  :FALSE => 9,
  :YES => 10,
  :NO => 11,
  :ON => 12,
  :OFF => 13,
  :IDENTIFIER => 14,
  :PROPERTY_ACCESS => 15,
  :PROTOTYPE_ACCESS => 16,
  :SOAK_ACCESS => 17,
  :CODE => 18,
  :PARAM => 19,
  :NEW => 20,
  :RETURN => 21,
  :TRY => 22,
  :CATCH => 23,
  :FINALLY => 24,
  :THROW => 25,
  :BREAK => 26,
  :CONTINUE => 27,
  :FOR => 28,
  :IN => 29,
  :OF => 30,
  :BY => 31,
  :WHEN => 32,
  :WHILE => 33,
  :SWITCH => 34,
  :LEADING_WHEN => 35,
  :DELETE => 36,
  :INSTANCEOF => 37,
  :TYPEOF => 38,
  :SUPER => 39,
  :EXTENDS => 40,
  :ARGUMENTS => 41,
  :NEWLINE => 42,
  :COMMENT => 43,
  :JS => 44,
  :INDENT => 45,
  :OUTDENT => 46,
  "?" => 47,
  :UMINUS => 48,
  :NOT => 49,
  "!" => 50,
  "!!" => 51,
  "~" => 52,
  "++" => 53,
  "--" => 54,
  "*" => 55,
  "/" => 56,
  "%" => 57,
  "+" => 58,
  "-" => 59,
  "<<" => 60,
  ">>" => 61,
  ">>>" => 62,
  "&" => 63,
  "|" => 64,
  "^" => 65,
  "<=" => 66,
  "<" => 67,
  ">" => 68,
  ">=" => 69,
  "==" => 70,
  "!=" => 71,
  :IS => 72,
  :ISNT => 73,
  "&&" => 74,
  "||" => 75,
  :AND => 76,
  :OR => 77,
  "-=" => 78,
  "+=" => 79,
  "/=" => 80,
  "*=" => 81,
  "%=" => 82,
  "." => 83,
  "||=" => 84,
  "&&=" => 85,
  "?=" => 86,
  :ASSIGN => 87,
  "=>" => 88,
  "==>" => 89,
  "\n" => 90,
  ";" => 91,
  "," => 92,
  "[" => 93,
  "]" => 94,
  "{" => 95,
  "}" => 96,
  "(" => 97,
  ")" => 98 }

racc_nt_base = 99

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "UNLESS",
  "NUMBER",
  "STRING",
  "REGEX",
  "TRUE",
  "FALSE",
  "YES",
  "NO",
  "ON",
  "OFF",
  "IDENTIFIER",
  "PROPERTY_ACCESS",
  "PROTOTYPE_ACCESS",
  "SOAK_ACCESS",
  "CODE",
  "PARAM",
  "NEW",
  "RETURN",
  "TRY",
  "CATCH",
  "FINALLY",
  "THROW",
  "BREAK",
  "CONTINUE",
  "FOR",
  "IN",
  "OF",
  "BY",
  "WHEN",
  "WHILE",
  "SWITCH",
  "LEADING_WHEN",
  "DELETE",
  "INSTANCEOF",
  "TYPEOF",
  "SUPER",
  "EXTENDS",
  "ARGUMENTS",
  "NEWLINE",
  "COMMENT",
  "JS",
  "INDENT",
  "OUTDENT",
  "\"?\"",
  "UMINUS",
  "NOT",
  "\"!\"",
  "\"!!\"",
  "\"~\"",
  "\"++\"",
  "\"--\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\">>>\"",
  "\"&\"",
  "\"|\"",
  "\"^\"",
  "\"<=\"",
  "\"<\"",
  "\">\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "IS",
  "ISNT",
  "\"&&\"",
  "\"||\"",
  "AND",
  "OR",
  "\"-=\"",
  "\"+=\"",
  "\"/=\"",
  "\"*=\"",
  "\"%=\"",
  "\".\"",
  "\"||=\"",
  "\"&&=\"",
  "\"?=\"",
  "ASSIGN",
  "\"=>\"",
  "\"==>\"",
  "\"\\n\"",
  "\";\"",
  "\",\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Root",
  "Terminator",
  "Expressions",
  "Block",
  "Expression",
  "Value",
  "Call",
  "Code",
  "Operation",
  "Assign",
  "If",
  "Try",
  "Throw",
  "Return",
  "While",
  "For",
  "Switch",
  "Extends",
  "Splat",
  "Existence",
  "Comment",
  "Literal",
  "AssignObj",
  "ParamList",
  "FuncGlyph",
  "Param",
  "Array",
  "Object",
  "Parenthetical",
  "Range",
  "Accessor",
  "Invocation",
  "Index",
  "AssignList",
  "Super",
  "Arguments",
  "ArgList",
  "SimpleArgs",
  "Catch",
  "ForVariables",
  "ForSource",
  "Whens",
  "When",
  "IfBlock",
  "ElsIf",
  "ElsIfs",
  "ElseBody",
  "IfEnd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_1(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_2(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 51)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_5(val, _values, result)
     result = Expressions.wrap(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_6(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_24(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 86)
  def _reduce_25(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_28(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_29(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_30(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_31(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_32(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_33(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_34(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_35(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_36(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_37(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_38(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_39(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_40(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_41(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_42(val, _values, result)
     result = AssignNode.new(ValueNode.new(val[0]), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_43(val, _values, result)
     result = AssignNode.new(ValueNode.new(LiteralNode.new(val[0])), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 121)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 126)
  def _reduce_45(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 127)
  def _reduce_46(val, _values, result)
     result = ReturnNode.new(ValueNode.new(Value.new('null'))) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_47(val, _values, result)
     result = CommentNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_48(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 140)
  def _reduce_49(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_50(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_51(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_52(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_53(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_54(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 146)
  def _reduce_55(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_56(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_57(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_58(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_59(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_60(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 153)
  def _reduce_61(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_62(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_63(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_64(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_65(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_66(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_67(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_68(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_69(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_70(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_71(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_72(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_73(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_74(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_75(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_76(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_77(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_78(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_79(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_80(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_81(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_82(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_83(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_84(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_85(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_86(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_87(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 187)
  def _reduce_88(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 188)
  def _reduce_89(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 189)
  def _reduce_90(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_91(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 192)
  def _reduce_92(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 197)
  def _reduce_93(val, _values, result)
     result = ExistenceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_94(val, _values, result)
     result = CodeNode.new(val[0], val[2], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 203)
  def _reduce_95(val, _values, result)
     result = CodeNode.new([], val[1], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_96(val, _values, result)
     result = :func 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 209)
  def _reduce_97(val, _values, result)
     result = :boundfunc 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 214)
  def _reduce_98(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 215)
  def _reduce_99(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'grammar.y', 221)
  def _reduce_101(val, _values, result)
     result = SplatNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 226)
  def _reduce_102(val, _values, result)
     result = SplatNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 231)
  def _reduce_103(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 232)
  def _reduce_104(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_105(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_106(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 235)
  def _reduce_107(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_108(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 237)
  def _reduce_109(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 238)
  def _reduce_110(val, _values, result)
     result = ValueNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 243)
  def _reduce_111(val, _values, result)
     result = AccessorNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_112(val, _values, result)
     result = AccessorNode.new(val[1], :prototype) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_113(val, _values, result)
     result = AccessorNode.new(val[1], :soak) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_114(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 247)
  def _reduce_115(val, _values, result)
     result = SliceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_116(val, _values, result)
     result = IndexNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_117(val, _values, result)
     result = ObjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_118(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_119(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 264)
  def _reduce_120(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 265)
  def _reduce_121(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 267)
  def _reduce_122(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 268)
  def _reduce_123(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 273)
  def _reduce_124(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 274)
  def _reduce_125(val, _values, result)
     result = val[1].new_instance 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 275)
  def _reduce_126(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 280)
  def _reduce_127(val, _values, result)
     result = ExtendsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 285)
  def _reduce_128(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 286)
  def _reduce_129(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 291)
  def _reduce_130(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 292)
  def _reduce_131(val, _values, result)
     result = val[1] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 297)
  def _reduce_132(val, _values, result)
     result = CallNode.new(Value.new('super'), val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 303)
  def _reduce_133(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 305)
  def _reduce_134(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 310)
  def _reduce_135(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 315)
  def _reduce_136(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_137(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 317)
  def _reduce_138(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 318)
  def _reduce_139(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 319)
  def _reduce_140(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 320)
  def _reduce_141(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 321)
  def _reduce_142(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 322)
  def _reduce_143(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 327)
  def _reduce_144(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 328)
  def _reduce_145(val, _values, result)
     result = ([val[0]] << val[2]).flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 333)
  def _reduce_146(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_147(val, _values, result)
     result = TryNode.new(val[1], nil, nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 336)
  def _reduce_148(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 341)
  def _reduce_149(val, _values, result)
     result = [val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 346)
  def _reduce_150(val, _values, result)
     result = ThrowNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 351)
  def _reduce_151(val, _values, result)
     result = ParentheticalNode.new(val[1], val[0].line) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 356)
  def _reduce_152(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 357)
  def _reduce_153(val, _values, result)
     result = WhileNode.new(val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 358)
  def _reduce_154(val, _values, result)
     result = WhileNode.new(val[2], Expressions.wrap(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 365)
  def _reduce_155(val, _values, result)
     result = ForNode.new(val[0], val[3], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 366)
  def _reduce_156(val, _values, result)
     result = ForNode.new(val[3], val[2], val[1][0], val[1][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 371)
  def _reduce_157(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 372)
  def _reduce_158(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 377)
  def _reduce_159(val, _values, result)
     result = {:source => val[1]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 378)
  def _reduce_160(val, _values, result)
     result = {:source => val[1], :object => true} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 380)
  def _reduce_161(val, _values, result)
     result = val[0].merge(:filter => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 382)
  def _reduce_162(val, _values, result)
     result = val[0].merge(:step => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 388)
  def _reduce_163(val, _values, result)
     result = val[3].rewrite_condition(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 390)
  def _reduce_164(val, _values, result)
     result = val[3].rewrite_condition(val[1]).add_else(val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 395)
  def _reduce_165(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 396)
  def _reduce_166(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 401)
  def _reduce_167(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 403)
  def _reduce_168(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 404)
  def _reduce_169(val, _values, result)
     result = val[2].add_comment(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 409)
  def _reduce_170(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 414)
  def _reduce_171(val, _values, result)
     result = val[1].force_statement 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 419)
  def _reduce_172(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 420)
  def _reduce_173(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 425)
  def _reduce_174(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 426)
  def _reduce_175(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 431)
  def _reduce_176(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 432)
  def _reduce_177(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 437)
  def _reduce_178(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 438)
  def _reduce_179(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 439)
  def _reduce_180(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true, :invert => true}) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
