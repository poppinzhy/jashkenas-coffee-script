#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

module CoffeeScript

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 412)
  # Lex and parse a CoffeeScript.
  def parse(code)
    # Uncomment the following line to enable grammar debugging, in combination
    # with the -g flag in the Rake build task.
    # @yydebug = true
    @tokens = Lexer.new.tokenize(code)
    do_parse
  end

  # Retrieve the next token from the list.
  def next_token
    @tokens.shift
  end

  # Raise a custom error class that knows about line numbers.
  def on_error(error_token_id, error_value, value_stack)
    raise ParseError.new(token_to_str(error_token_id), error_value, value_stack)
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'88,241,93,17,21,26,31,36,40,49,51,56,59,248,254,248,249,126,249,229',
'127,3,18,22,94,78,32,37,232,169,167,81,230,-164,-164,-164,78,8,233,9',
'78,124,32,37,32,37,98,102,103,108,111,114,117,84,87,90,92,97,101,105',
'107,110,113,116,83,86,89,91,96,100,104,106,109,112,115,82,85,78,130',
'95,99,78,124,124,124,148,78,57,9,60,235,17,21,26,31,36,40,49,51,56,59',
'73,65,65,68,1,6,32,37,14,18,22,25,125,240,41,45,119,52,212,61,63,78',
'227,3,8,158,265,162,124,24,29,34,39,43,48,215,54,124,218,239,67,255',
'147,17,21,26,31,36,40,49,51,56,59,125,125,125,78,119,139,139,218,78',
'18,22,73,32,37,228,27,32,37,232,46,250,57,9,60,8,17,21,26,31,36,40,49',
'51,56,59,272,217,65,68,1,6,237,284,14,18,22,25,125,245,41,45,139,52',
'130,61,63,125,227,3,8,119,,,254,24,29,34,39,43,48,3,54,148,273,57,67',
'60,,17,21,26,31,36,40,49,51,56,59,,,147,153,-164,-164,-164,,,18,22,150',
'32,37,228,27,225,,,46,124,57,9,60,8,17,21,26,31,36,40,49,51,56,59,3',
',65,68,1,6,120,,14,18,22,25,,153,41,45,,52,,61,63,150,227,3,8,,227,153',
',24,29,34,39,43,48,150,54,148,,57,67,60,-164,-164,-164,3,32,37,,,122',
'98,102,103,108,111,114,125,,3,,119,98,102,103,32,37,228,27,32,37,228',
'46,243,57,9,60,266,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18',
'22,25,,153,41,45,,52,153,61,63,150,,3,8,,150,,,24,29,34,39,43,48,,54',
'-164,-164,-164,67,98,102,103,,3,,154,,,3,,154,98,102,103,108,111,114',
'117,84,87,90,92,97,101,105,,27,-164,-164,-164,46,,57,9,60,,17,21,26',
'31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,',
'3,8,98,102,103,,24,29,34,39,43,48,,54,-164,-164,-164,67,98,102,103,108',
'111,114,117,84,87,90,92,97,101,105,107,110,113,116,83,86,89,91,-164',
'-164,-164,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68',
'1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54',
',,,67,98,102,103,108,111,114,117,84,87,90,92,97,101,105,107,110,113',
'116,83,86,89,91,,,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59',
',,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43',
'48,,54,,,,67,98,102,103,108,111,114,117,84,87,90,92,97,101,105,107,110',
'113,116,83,86,89,91,,275,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49',
'51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29',
'34,39,43,48,,54,,,,67,98,102,103,108,111,114,117,84,87,90,92,97,101',
'105,107,110,113,116,83,86,89,91,,,,,,27,,,,46,,57,9,60,,17,21,26,31',
'36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8',
',,,,24,29,34,39,43,48,,54,,,,67,98,102,103,108,111,114,117,84,87,90',
'92,97,101,105,107,110,113,116,83,86,89,91,,,,,,27,,,,46,,57,9,60,,17',
'21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61',
'63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,98,102,103,108,111,114,117',
'84,87,90,92,97,101,105,107,110,113,116,83,86,89,91,,,,,,27,,,,46,,57',
'9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45',
',52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,98,102,103,108,111',
'114,117,84,87,90,92,97,101,105,107,110,113,116,83,86,89,91,,,,,,27,',
',,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22',
'25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,98,102,103',
'108,111,114,117,84,87,90,92,97,101,105,107,110,113,116,83,86,89,91,',
',,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14',
'18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,98',
'102,103,108,111,114,117,84,87,90,92,97,101,105,98,102,103,108,111,114',
'117,84,87,90,92,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,',
',65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43',
'48,,54,,,,67,98,102,103,108,111,114,117,84,87,90,92,97,101,105,98,102',
'103,108,111,114,117,84,87,90,92,,,27,,,,46,,57,9,60,,17,21,26,31,36',
'40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,',
',,24,29,34,39,43,48,,54,,,,67,98,102,103,108,111,114,117,84,87,90,92',
'97,101,105,98,102,103,108,111,114,117,84,87,90,92,,,27,,,,46,,57,9,60',
',17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52',
',61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,98,102,103,108,111,114',
'117,84,98,102,103,108,111,114,117,84,98,102,103,108,111,114,117,84,',
',,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14',
'18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,98',
'102,103,108,111,114,,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26',
'31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,',
'3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,',
',46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25',
',,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,',
',,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65',
'68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,142,,,,24,29,34,39,43',
'48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26',
'31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,',
'3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,',
',46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25',
',,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,',
',,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65',
'68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48',
',54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31',
'36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8',
',,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46',
',57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,',
'41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,',
',,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65',
'68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48',
',54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31',
'36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8',
'259,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,32',
'37,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22',
'25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,',
',,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59',
',,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43',
'48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26',
'31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,',
'3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,',
',46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25',
',,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,',
',,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65',
'68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,142,,,,24,29,34,39,43',
'48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26',
'31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,',
'3,8,142,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27',
',,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22',
'25,,,41,45,,52,,61,63,,,3,8,142,,,,24,29,34,39,43,48,,54,,,,67,,,,,',
',,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56',
'59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,171,,,24,29,34',
'39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17',
'21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61',
'63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18',
'22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,',
',,,,,,,,,,,,,,,,,,,,,,27,32,37,,46,,57,9,60,,17,21,26,31,36,40,49,51',
'56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34',
'39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17',
'21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61',
'63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18',
'22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,',
',,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56',
'59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39',
'43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21',
'26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63',
',,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27',
',,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22',
'25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,',
',,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59',
',,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43',
'48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26',
'31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,',
'3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,',
',46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25',
',,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,',
',,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65',
'68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48',
',54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31',
'36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8',
',,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46',
',57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,',
'41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,',
',,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65',
'68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48',
',54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31',
'36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8',
'142,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,',
'46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25',
',,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,',
',,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65',
'68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48',
',54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31',
'36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8',
',,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46',
',57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,',
'41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,',
',,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65',
'68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48',
',54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31',
'36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8',
',,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46',
',57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,',
'41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,',
',,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65',
'68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48',
',54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31',
'36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8',
',,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46',
',57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,',
'41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,',
',,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65',
'68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48',
',54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31',
'36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8',
',,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46',
',57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,',
'41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,',
',,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65',
'68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48',
',54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31',
'36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8',
',,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46',
',57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,',
'41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,',
',,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65',
'68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48',
',54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31',
'36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8',
',,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,27,,,,46',
',57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65,68,1,6,,,14,18,22,25,,',
'41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48,,54,,,,67,,,,,,,,,,,,,',
',,,,,,,,,,,,,,27,,,,46,,57,9,60,,17,21,26,31,36,40,49,51,56,59,,,65',
'68,1,6,,,14,18,22,25,,,41,45,,52,,61,63,,,3,8,,,,,24,29,34,39,43,48',
'88,54,93,,,67,,,,,,,,,,,,,,,,,,,94,,,,,,,81,,27,,,,46,,57,,60,,,,,98',
'102,103,108,111,114,117,84,87,90,92,97,101,105,107,110,113,116,83,86',
'89,91,96,100,104,106,109,112,115,82,85,223,,95,99,88,,93,,,244,,,,,',
',,,,,,,,,,,,,94,,,,,,,81,,,,,,,,,,,,,,,98,102,103,108,111,114,117,84',
'87,90,92,97,101,105,107,110,113,116,83,86,89,91,96,100,104,106,109,112',
'115,82,85,,,95,99,88,,93,,,283,,,,,,,,,,,,,,,,,,,94,,,,,,,81,,,,,,,',
',,,,,,,98,102,103,108,111,114,117,84,87,90,92,97,101,105,107,110,113',
'116,83,86,89,91,96,100,104,106,109,112,115,82,85,,,95,99,88,,93,,,286',
',,,,,,,,,,,,,,,,,,94,,,,,,,81,,,,,,,,,,,,,,,98,102,103,108,111,114,117',
'84,87,90,92,97,101,105,107,110,113,116,83,86,89,91,96,100,104,106,109',
'112,115,82,85,,,95,99,88,,93,,,,,,,,,,,,,,,,,,,,,,94,,,,,,,81,,,,,,',
'78,,,,,,,,98,102,103,108,111,114,117,84,87,90,92,97,101,105,107,110',
'113,116,83,86,89,91,96,100,104,106,109,112,115,82,85,,,95,99,88,,93',
',,,,,,,,,,,,,,,,,,,,,94,,,,,,,81,,,,,,,,,,,,,,,98,102,103,108,111,114',
'117,84,87,90,92,97,101,105,107,110,113,116,83,86,89,91,96,100,104,106',
'109,112,115,82,85,,,95,99,88,,93,,,,,,,,,,,,,,,,,,,,,,94,,,,,,,81,,',
',,,,,,,,,,,,98,102,103,108,111,114,117,84,87,90,92,97,101,105,107,110',
'113,116,83,86,89,91,96,100,104,106,109,112,115,82,85,,,95,99,88,,93',
',,,,,,,,,,,,,,,,,,,,,94,,,,,,,81,,,,,,,78,,,,,,,,98,102,103,108,111',
'114,117,84,87,90,92,97,101,105,107,110,113,116,83,86,89,91,96,100,104',
'106,109,112,115,82,85,,,95,99,88,,93,,,,,,,,,,,,,,,,,,,,,,94,,,,,,,81',
',,,,,,,,,,,,,,98,102,103,108,111,114,117,84,87,90,92,97,101,105,107',
'110,113,116,83,86,89,91,96,100,104,106,109,112,115,82,85,,,95,99,88',
',93,,,,,,,,,,,,,,,,,,,,,,94,,,,,,,81,,,,,,,,,,,,,,,98,102,103,108,111',
'114,117,84,87,90,92,97,101,105,107,110,113,116,83,86,89,91,96,100,104',
'106,109,112,115,82,85,,,95,99,88,,93,,,,,,,,,,,,,,,,,,,,,,94,,,,,,,81',
',,,,,,,,,,,,,,98,102,103,108,111,114,117,84,87,90,92,97,101,105,107',
'110,113,116,83,86,89,91,96,100,104,106,109,112,115,82,85,,,95,99,88',
',93,,,,,,,,,,,,,,,,,,,,,,94,,,,,,,81,,,,,,,78,,,,,,,,98,102,103,108',
'111,114,117,84,87,90,92,97,101,105,107,110,113,116,83,86,89,91,96,100',
'104,106,109,112,115,82,85,,,95,99,88,,93,,,,,,,,,,,,,,,,,,,,,,94,,,',
',,,81,,,,,,,,,,,,,,,98,102,103,108,111,114,117,84,87,90,92,97,101,105',
'107,110,113,116,83,86,89,91,96,100,104,106,109,112,115,82,85,,,95,99',
'88,,93,,,,,,,,,,,,,,,,,,,,,,94,,,,,,,81,,,,,,,,,,,,,,,98,102,103,108',
'111,114,117,84,87,90,92,97,101,105,107,110,113,116,83,86,89,91,96,100',
'104,106,109,112,115,82,85,,,95,99,88,,93,,,,,,,,,,,,,,,,,,,,,,94,,,',
',,,81,,,,,,,222,,,,,,,,98,102,103,108,111,114,117,84,87,90,92,97,101',
'105,107,110,113,116,83,86,89,91,96,100,104,106,109,112,115,82,85,,,95',
'99,88,,93,,,,,,,,,,,,,,,,,,,,,,94,,,,,,,81,,,,,,,,,,,,,,,98,102,103',
'108,111,114,117,84,87,90,92,97,101,105,107,110,113,116,83,86,89,91,96',
'100,104,106,109,112,115,82,85,223,,95,99,88,,93,,,,,,,,,,,,,,,,,,,,',
',94,,,,,,,81,,,,,,,,,,,,,,,98,102,103,108,111,114,117,84,87,90,92,97',
'101,105,107,110,113,116,83,86,89,91,96,100,104,106,109,112,115,82,85',
',,95,99,88,,93,,,,,,,,,,,,,,,,,,,,,,94,,,,,,,81,,,,,,,,,,,,,,,98,102',
'103,108,111,114,117,84,87,90,92,97,101,105,107,110,113,116,83,86,89',
'91,96,100,104,106,109,112,115,82,85,,,95,99,88,,93,,,,,,,,,,,,,,,,,',
',,,,94,,,,,,,81,,,,,,,,,,,,,,,98,102,103,108,111,114,117,84,87,90,92',
'97,101,105,107,110,113,116,83,86,89,91,96,100,104,106,109,112,115,82',
'85,,,95,99,88,,93,,,,,,,,,,,,,,,,,,,,,,94,,,,,,,81,,,,,,,,,,,,,,,98',
'102,103,108,111,114,117,84,87,90,92,97,101,105,107,110,113,116,83,86',
'89,91,96,100,104,106,109,112,115,82,85,88,,93,,,,,,,,,,,,,,,,,,,,,,94',
',,,,,,81,,,,,,,,,,,,,,,98,102,103,108,111,114,117,84,87,90,92,97,101',
'105,107,110,113,116,83,86,89,91,96,100,104,106,109,112,115,82,85,88',
',93,,,,,,,,,,,,,,,,,,,,,,94,,,,,,,81,,,,,,,,,,,,,,,98,102,103,108,111',
'114,117,84,87,90,92,97,101,105,107,110,113,116,83,86,89,91,96,100,104',
'106,109,112,115,82,85,94,,,,,,,81,,,,,,,,,,,,,,,98,102,103,108,111,114',
'117,84,87,90,92,97,101,105,107,110,113,116,83,86,89,91,96,100,104,106',
'109,112,115,82,85,94,,,,,,,81,,,,,,,,,,,,,,,98,102,103,108,111,114,117',
'84,87,90,92,97,101,105,107,110,113,116,83,86,89,91,96,100,104,106,109',
'112,115,82,85,94,,,,,,,81,,,,,,,,,,,,,,,98,102,103,108,111,114,117,84',
'87,90,92,97,101,105,107,110,113,116,83,86,89,91,96,100,104,106,109,112',
'115,82,85,81,,,,,,,,,,,,,,,98,102,103,108,111,114,117,84,87,90,92,97',
'101,105,107,110,113,116,83,86,89,91,96,100,104,106,109,112,115,82,85',
'81,,,,,,,,,,,,,,,98,102,103,108,111,114,117,84,87,90,92,97,101,105,107',
'110,113,116,83,86,89,91,96,100,104,106,109,112,115,82,85,81,,,,,,,,',
',,,,,,98,102,103,108,111,114,117,84,87,90,92,97,101,105,107,110,113',
'116,83,86,89,91,96,100,104,106,109,112,115,82,85,81,,,,,,,,,,,,,,,98',
'102,103,108,111,114,117,84,87,90,92,97,101,105,107,110,113,116,83,86',
'89,91,96,100,104,106,109,112,115,82,85,81,,,,,,,,,,,,,,,98,102,103,108',
'111,114,117,84,87,90,92,97,101,105,107,110,113,116,83,86,89,91,96,100',
'104,106,109,112,115,82,85,81,,,,,,,,,,,,,,,98,102,103,108,111,114,117',
'84,87,90,92,97,101,105,107,110,113,116,83,86,89,91,96,100,104,106,109',
'112,115,82,85,98,102,103,108,111,114,117,84,87,90,92,97,101,105,107',
'110,113,116,83,86,89,91,96,100,104,106,109,112,115,82,85,98,102,103',
'108,111,114,117,84,87,90,92,97,101,105,107,110,113,116,83,86,89,91,96',
'100,104,106,109,112,115,82,85,98,102,103,108,111,114,117,84,87,90,92',
'97,101,105,107,110,113,116,83,86,89,91,96,100,104,106,109,112,115,82',
'85,98,102,103,108,111,114,117,84,87,90,92,97,101,105,107,110,113,116',
'83,86,89,91,96,100,104,106,109,112,115,82,85,98,102,103,108,111,114',
'117,84,87,90,92,97,101,105,107,110,113,116,83,86,89,91,96,100,104,106',
'109,112,115,82,85' ]
        racc_action_table = arr = Array.new(8656, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'156,170,156,120,120,120,120,120,120,120,120,120,120,219,222,242,219',
'13,242,150,13,222,120,120,156,219,152,152,152,77,77,156,152,129,129',
'129,239,120,153,73,27,149,281,281,170,170,156,156,156,156,156,156,156',
'156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156',
'156,156,156,156,156,156,156,73,25,156,156,240,210,146,44,120,167,120',
'95,120,156,95,95,95,95,95,95,95,95,95,95,74,127,95,95,95,95,7,7,95,95',
'95,95,149,169,95,95,149,95,124,95,95,126,221,95,95,63,234,69,160,95',
'95,95,95,95,95,127,95,161,187,168,95,223,215,68,68,68,68,68,68,68,68',
'68,68,210,146,44,272,210,146,44,131,6,68,68,5,221,221,221,95,234,234',
'234,95,221,95,125,95,68,125,125,125,125,125,125,125,125,125,125,251',
'130,125,125,125,125,162,280,125,125,125,125,160,217,125,125,160,125',
'94,125,125,161,143,125,125,161,,,251,125,125,125,125,125,125,251,125',
'68,251,68,125,68,,54,54,54,54,54,54,54,54,54,54,,,54,232,133,133,133',
',,54,54,232,143,143,143,125,143,,,125,12,125,275,125,54,275,275,275',
'275,275,275,275,275,275,275,232,,275,275,275,275,12,,275,275,275,275',
',231,275,275,,275,,275,275,231,209,275,275,,236,262,,275,275,275,275',
'275,275,262,275,54,,54,275,54,134,134,134,231,232,232,,,12,177,177,177',
'177,177,177,12,,262,,12,201,201,201,209,209,209,275,236,236,236,275',
'209,275,259,275,236,259,259,259,259,259,259,259,259,259,259,,,259,259',
'259,259,,,259,259,259,259,,57,259,259,,259,154,259,259,57,,259,259,',
'154,,,259,259,259,259,259,259,,259,137,137,137,259,204,204,204,,57,',
'57,,,154,,154,200,200,200,200,200,200,200,200,200,200,200,200,200,200',
',259,144,144,144,259,,259,9,259,,9,9,9,9,9,9,9,9,9,9,,,9,9,9,9,,,9,9',
'9,9,,,9,9,,9,,9,9,,,9,9,198,198,198,,9,9,9,9,9,9,,9,135,135,135,9,192',
'192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192',
'192,192,192,192,159,159,159,,,9,,,,9,,9,257,9,,257,257,257,257,257,257',
'257,257,257,257,,,257,257,257,257,,,257,257,257,257,,,257,257,,257,',
'257,257,,,257,257,,,,,257,257,257,257,257,257,,257,,,,257,184,184,184',
'184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184',
'184,184,,,,,,257,,,,257,,257,255,257,,255,255,255,255,255,255,255,255',
'255,255,,,255,255,255,255,,,255,255,255,255,,,255,255,,255,,255,255',
',,255,255,,,,,255,255,255,255,255,255,,255,,,,255,194,194,194,194,194',
'194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194',
',255,,,,255,,,,255,,255,254,255,,254,254,254,254,254,254,254,254,254',
'254,,,254,254,254,254,,,254,254,254,254,,,254,254,,254,,254,254,,,254',
'254,,,,,254,254,254,254,254,254,,254,,,,254,189,189,189,189,189,189',
'189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,,,,',
',254,,,,254,,254,14,254,,14,14,14,14,14,14,14,14,14,14,,,14,14,14,14',
',,14,14,14,14,,,14,14,,14,,14,14,,,14,14,,,,,14,14,14,14,14,14,,14,',
',,14,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196',
'196,196,196,196,196,196,,,,,,14,,,,14,,14,24,14,,24,24,24,24,24,24,24',
'24,24,24,,,24,24,24,24,,,24,24,24,24,,,24,24,,24,,24,24,,,24,24,,,,',
'24,24,24,24,24,24,,24,,,,24,176,176,176,176,176,176,176,176,176,176',
'176,176,176,176,176,176,176,176,176,176,176,176,,,,,,24,,,,24,,24,249',
'24,,249,249,249,249,249,249,249,249,249,249,,,249,249,249,249,,,249',
'249,249,249,,,249,249,,249,,249,249,,,249,249,,,,,249,249,249,249,249',
'249,,249,,,,249,182,182,182,182,182,182,182,182,182,182,182,182,182',
'182,182,182,182,182,182,182,182,182,,,,,,249,,,,249,,249,248,249,,248',
'248,248,248,248,248,248,248,248,248,,,248,248,248,248,,,248,248,248',
'248,,,248,248,,248,,248,248,,,248,248,,,,,248,248,248,248,248,248,,248',
',,,248,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179',
'179,179,179,179,179,179,,,,,,248,,,,248,,248,29,248,,29,29,29,29,29',
'29,29,29,29,29,,,29,29,29,29,,,29,29,29,29,,,29,29,,29,,29,29,,,29,29',
',,,,29,29,29,29,29,29,,29,,,,29,197,197,197,197,197,197,197,197,197',
'197,197,197,197,197,193,193,193,193,193,193,193,193,193,193,193,,,29',
',,,29,,29,34,29,,34,34,34,34,34,34,34,34,34,34,,,34,34,34,34,,,34,34',
'34,34,,,34,34,,34,,34,34,,,34,34,,,,,34,34,34,34,34,34,,34,,,,34,206',
'206,206,206,206,206,206,206,206,206,206,206,206,206,190,190,190,190',
'190,190,190,190,190,190,190,,,34,,,,34,,34,39,34,,39,39,39,39,39,39',
'39,39,39,39,,,39,39,39,39,,,39,39,39,39,,,39,39,,39,,39,39,,,39,39,',
',,,39,39,39,39,39,39,,39,,,,39,203,203,203,203,203,203,203,203,203,203',
'203,203,203,203,195,195,195,195,195,195,195,195,195,195,195,,,39,,,',
'39,,39,41,39,,41,41,41,41,41,41,41,41,41,41,,,41,41,41,41,,,41,41,41',
'41,,,41,41,,41,,41,41,,,41,41,,,,,41,41,41,41,41,41,,41,,,,41,183,183',
'183,183,183,183,183,183,185,185,185,185,185,185,185,185,180,180,180',
'180,180,180,180,180,,,,41,,,,41,,41,43,41,,43,43,43,43,43,43,43,43,43',
'43,,,43,43,43,43,,,43,43,43,43,,,43,43,,43,,43,43,,,43,43,,,,,43,43',
'43,43,43,43,,43,,,,43,207,207,207,207,207,207,,,,,,,,,,,,,,,,,,,,,,43',
',,,43,,43,233,43,,233,233,233,233,233,233,233,233,233,233,,,233,233',
'233,233,,,233,233,233,233,,,233,233,,233,,233,233,,,233,233,,,,,233',
'233,233,233,233,233,,233,,,,233,,,,,,,,,,,,,,,,,,,,,,,,,,,,233,,,,233',
',233,45,233,,45,45,45,45,45,45,45,45,45,45,,,45,45,45,45,,,45,45,45',
'45,,,45,45,,45,,45,45,,,45,45,,,,,45,45,45,45,45,45,,45,,,,45,,,,,,',
',,,,,,,,,,,,,,,,,,,,,45,,,,45,,45,46,45,,46,46,46,46,46,46,46,46,46',
'46,,,46,46,46,46,,,46,46,46,46,,,46,46,,46,,46,46,,,46,46,46,,,,46,46',
'46,46,46,46,,46,,,,46,,,,,,,,,,,,,,,,,,,,,,,,,,,,46,,,,46,,46,48,46',
',48,48,48,48,48,48,48,48,48,48,,,48,48,48,48,,,48,48,48,48,,,48,48,',
'48,,48,48,,,48,48,,,,,48,48,48,48,48,48,,48,,,,48,,,,,,,,,,,,,,,,,,',
',,,,,,,,,48,,,,48,,48,52,48,,52,52,52,52,52,52,52,52,52,52,,,52,52,52',
'52,,,52,52,52,52,,,52,52,,52,,52,52,,,52,52,,,,,52,52,52,52,52,52,,52',
',,,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,52,,,,52,,52,142,52,,142,142,142,142',
'142,142,142,142,142,142,,,142,142,142,142,,,142,142,142,142,,,142,142',
',142,,142,142,,,142,142,,,,,142,142,142,142,142,142,,142,,,,142,,,,',
',,,,,,,,,,,,,,,,,,,,,,,142,,,,142,,142,229,142,,229,229,229,229,229',
'229,229,229,229,229,,,229,229,229,229,,,229,229,229,229,,,229,229,,229',
',229,229,,,229,229,,,,,229,229,229,229,229,229,,229,,,,229,,,,,,,,,',
',,,,,,,,,,,,,,,,,,229,,,,229,,229,60,229,,60,60,60,60,60,60,60,60,60',
'60,,,60,60,60,60,,,60,60,60,60,,,60,60,,60,,60,60,,,60,60,,,,,60,60',
'60,60,60,60,,60,,,,60,,,,,,,,,,,,,,,,,,,,,,,,,,,,60,,,,60,,60,61,60',
',61,61,61,61,61,61,61,61,61,61,,,61,61,61,61,,,61,61,61,61,,,61,61,',
'61,,61,61,,,61,61,,,,,61,61,61,61,61,61,,61,,,,61,,,,,,,,,,,,,,,,,,',
',,,,,,,,,61,,,,61,,61,228,61,,228,228,228,228,228,228,228,228,228,228',
',,228,228,228,228,,,228,228,228,228,,,228,228,,228,,228,228,,,228,228',
'228,,,,228,228,228,228,228,228,,228,,,,228,,,,,,,,,,,,,,,,,,,,,,,,,',
',,228,228,228,,228,,228,67,228,,67,67,67,67,67,67,67,67,67,67,,,67,67',
'67,67,,,67,67,67,67,,,67,67,,67,,67,67,,,67,67,,,,,67,67,67,67,67,67',
',67,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,67,,,,67,,67,122,67,,122,122,122',
'122,122,122,122,122,122,122,,,122,122,122,122,,,122,122,122,122,,,122',
'122,,122,,122,122,,,122,122,,,,,122,122,122,122,122,122,,122,,,,122',
',,,,,,,,,,,,,,,,,,,,,,,,,,,122,,,,122,,122,226,122,,226,226,226,226',
'226,226,226,226,226,226,,,226,226,226,226,,,226,226,226,226,,,226,226',
',226,,226,226,,,226,226,,,,,226,226,226,226,226,226,,226,,,,226,,,,',
',,,,,,,,,,,,,,,,,,,,,,,226,,,,226,,226,218,226,,218,218,218,218,218',
'218,218,218,218,218,,,218,218,218,218,,,218,218,218,218,,,218,218,,218',
',218,218,,,218,218,,,,,218,218,218,218,218,218,,218,,,,218,,,,,,,,,',
',,,,,,,,,,,,,,,,,,218,,,,218,,218,119,218,,119,119,119,119,119,119,119',
'119,119,119,,,119,119,119,119,,,119,119,119,119,,,119,119,,119,,119',
'119,,,119,119,119,,,,119,119,119,119,119,119,,119,,,,119,,,,,,,,,,,',
',,,,,,,,,,,,,,,,119,,,,119,,119,139,119,,139,139,139,139,139,139,139',
'139,139,139,,,139,139,139,139,,,139,139,139,139,,,139,139,,139,,139',
'139,,,139,139,139,,,,139,139,139,139,139,139,,139,,,,139,,,,,,,,,,,',
',,,,,,,,,,,,,,,,139,,,,139,,139,158,139,,158,158,158,158,158,158,158',
'158,158,158,,,158,158,158,158,,,158,158,158,158,,,158,158,,158,,158',
'158,,,158,158,158,,,,158,158,158,158,158,158,,158,,,,158,,,,,,,,,,,',
',,,,,,,,,,,,,,,,158,,,,158,,158,78,158,,78,78,78,78,78,78,78,78,78,78',
',,78,78,78,78,,,78,78,78,78,,,78,78,,78,,78,78,,,78,78,,78,,,78,78,78',
'78,78,78,,78,,,,78,,,,,,,,,,,,,,,,,,,,,,,,,,,,78,,,,78,,78,79,78,,79',
'79,79,79,79,79,79,79,79,79,,,79,79,79,79,,,79,79,79,79,,,79,79,,79,',
'79,79,,,79,79,,,,,79,79,79,79,79,79,,79,,,,79,,,,,,,,,,,,,,,,,,,,,,',
',,,,,79,,,,79,,79,0,79,,0,0,0,0,0,0,0,0,0,0,,,0,0,0,0,,,0,0,0,0,,,0',
'0,,0,,0,0,,,0,0,,,,,0,0,0,0,0,0,,0,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,0',
'0,0,,0,,0,81,0,,81,81,81,81,81,81,81,81,81,81,,,81,81,81,81,,,81,81',
'81,81,,,81,81,,81,,81,81,,,81,81,,,,,81,81,81,81,81,81,,81,,,,81,,,',
',,,,,,,,,,,,,,,,,,,,,,,,81,,,,81,,81,82,81,,82,82,82,82,82,82,82,82',
'82,82,,,82,82,82,82,,,82,82,82,82,,,82,82,,82,,82,82,,,82,82,,,,,82',
'82,82,82,82,82,,82,,,,82,,,,,,,,,,,,,,,,,,,,,,,,,,,,82,,,,82,,82,83',
'82,,83,83,83,83,83,83,83,83,83,83,,,83,83,83,83,,,83,83,83,83,,,83,83',
',83,,83,83,,,83,83,,,,,83,83,83,83,83,83,,83,,,,83,,,,,,,,,,,,,,,,,',
',,,,,,,,,,83,,,,83,,83,84,83,,84,84,84,84,84,84,84,84,84,84,,,84,84',
'84,84,,,84,84,84,84,,,84,84,,84,,84,84,,,84,84,,,,,84,84,84,84,84,84',
',84,,,,84,,,,,,,,,,,,,,,,,,,,,,,,,,,,84,,,,84,,84,85,84,,85,85,85,85',
'85,85,85,85,85,85,,,85,85,85,85,,,85,85,85,85,,,85,85,,85,,85,85,,,85',
'85,,,,,85,85,85,85,85,85,,85,,,,85,,,,,,,,,,,,,,,,,,,,,,,,,,,,85,,,',
'85,,85,86,85,,86,86,86,86,86,86,86,86,86,86,,,86,86,86,86,,,86,86,86',
'86,,,86,86,,86,,86,86,,,86,86,,,,,86,86,86,86,86,86,,86,,,,86,,,,,,',
',,,,,,,,,,,,,,,,,,,,,86,,,,86,,86,87,86,,87,87,87,87,87,87,87,87,87',
'87,,,87,87,87,87,,,87,87,87,87,,,87,87,,87,,87,87,,,87,87,,,,,87,87',
'87,87,87,87,,87,,,,87,,,,,,,,,,,,,,,,,,,,,,,,,,,,87,,,,87,,87,88,87',
',88,88,88,88,88,88,88,88,88,88,,,88,88,88,88,,,88,88,88,88,,,88,88,',
'88,,88,88,,,88,88,,,,,88,88,88,88,88,88,,88,,,,88,,,,,,,,,,,,,,,,,,',
',,,,,,,,,88,,,,88,,88,89,88,,89,89,89,89,89,89,89,89,89,89,,,89,89,89',
'89,,,89,89,89,89,,,89,89,,89,,89,89,,,89,89,,,,,89,89,89,89,89,89,,89',
',,,89,,,,,,,,,,,,,,,,,,,,,,,,,,,,89,,,,89,,89,90,89,,90,90,90,90,90',
'90,90,90,90,90,,,90,90,90,90,,,90,90,90,90,,,90,90,,90,,90,90,,,90,90',
',,,,90,90,90,90,90,90,,90,,,,90,,,,,,,,,,,,,,,,,,,,,,,,,,,,90,,,,90',
',90,91,90,,91,91,91,91,91,91,91,91,91,91,,,91,91,91,91,,,91,91,91,91',
',,91,91,,91,,91,91,,,91,91,,,,,91,91,91,91,91,91,,91,,,,91,,,,,,,,,',
',,,,,,,,,,,,,,,,,,91,,,,91,,91,92,91,,92,92,92,92,92,92,92,92,92,92',
',,92,92,92,92,,,92,92,92,92,,,92,92,,92,,92,92,,,92,92,,,,,92,92,92',
'92,92,92,,92,,,,92,,,,,,,,,,,,,,,,,,,,,,,,,,,,92,,,,92,,92,93,92,,93',
'93,93,93,93,93,93,93,93,93,,,93,93,93,93,,,93,93,93,93,,,93,93,,93,',
'93,93,,,93,93,,,,,93,93,93,93,93,93,,93,,,,93,,,,,,,,,,,,,,,,,,,,,,',
',,,,,93,,,,93,,93,148,93,,148,148,148,148,148,148,148,148,148,148,,',
'148,148,148,148,,,148,148,148,148,,,148,148,,148,,148,148,,,148,148',
'148,,,,148,148,148,148,148,148,,148,,,,148,,,,,,,,,,,,,,,,,,,,,,,,,',
',,148,,,,148,,148,1,148,,1,1,1,1,1,1,1,1,1,1,,,1,1,1,1,,,1,1,1,1,,,1',
'1,,1,,1,1,,,1,1,,,,,1,1,1,1,1,1,,1,,,,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,1',
',,,1,,1,96,1,,96,96,96,96,96,96,96,96,96,96,,,96,96,96,96,,,96,96,96',
'96,,,96,96,,96,,96,96,,,96,96,,,,,96,96,96,96,96,96,,96,,,,96,,,,,,',
',,,,,,,,,,,,,,,,,,,,,96,,,,96,,96,97,96,,97,97,97,97,97,97,97,97,97',
'97,,,97,97,97,97,,,97,97,97,97,,,97,97,,97,,97,97,,,97,97,,,,,97,97',
'97,97,97,97,,97,,,,97,,,,,,,,,,,,,,,,,,,,,,,,,,,,97,,,,97,,97,99,97',
',99,99,99,99,99,99,99,99,99,99,,,99,99,99,99,,,99,99,99,99,,,99,99,',
'99,,99,99,,,99,99,,,,,99,99,99,99,99,99,,99,,,,99,,,,,,,,,,,,,,,,,,',
',,,,,,,,,99,,,,99,,99,100,99,,100,100,100,100,100,100,100,100,100,100',
',,100,100,100,100,,,100,100,100,100,,,100,100,,100,,100,100,,,100,100',
',,,,100,100,100,100,100,100,,100,,,,100,,,,,,,,,,,,,,,,,,,,,,,,,,,,100',
',,,100,,100,117,100,,117,117,117,117,117,117,117,117,117,117,,,117,117',
'117,117,,,117,117,117,117,,,117,117,,117,,117,117,,,117,117,,,,,117',
'117,117,117,117,117,,117,,,,117,,,,,,,,,,,,,,,,,,,,,,,,,,,,117,,,,117',
',117,104,117,,104,104,104,104,104,104,104,104,104,104,,,104,104,104',
'104,,,104,104,104,104,,,104,104,,104,,104,104,,,104,104,,,,,104,104',
'104,104,104,104,,104,,,,104,,,,,,,,,,,,,,,,,,,,,,,,,,,,104,,,,104,,104',
'105,104,,105,105,105,105,105,105,105,105,105,105,,,105,105,105,105,',
',105,105,105,105,,,105,105,,105,,105,105,,,105,105,,,,,105,105,105,105',
'105,105,,105,,,,105,,,,,,,,,,,,,,,,,,,,,,,,,,,,105,,,,105,,105,106,105',
',106,106,106,106,106,106,106,106,106,106,,,106,106,106,106,,,106,106',
'106,106,,,106,106,,106,,106,106,,,106,106,,,,,106,106,106,106,106,106',
',106,,,,106,,,,,,,,,,,,,,,,,,,,,,,,,,,,106,,,,106,,106,107,106,,107',
'107,107,107,107,107,107,107,107,107,,,107,107,107,107,,,107,107,107',
'107,,,107,107,,107,,107,107,,,107,107,,,,,107,107,107,107,107,107,,107',
',,,107,,,,,,,,,,,,,,,,,,,,,,,,,,,,107,,,,107,,107,108,107,,108,108,108',
'108,108,108,108,108,108,108,,,108,108,108,108,,,108,108,108,108,,,108',
'108,,108,,108,108,,,108,108,,,,,108,108,108,108,108,108,,108,,,,108',
',,,,,,,,,,,,,,,,,,,,,,,,,,,108,,,,108,,108,109,108,,109,109,109,109',
'109,109,109,109,109,109,,,109,109,109,109,,,109,109,109,109,,,109,109',
',109,,109,109,,,109,109,,,,,109,109,109,109,109,109,,109,,,,109,,,,',
',,,,,,,,,,,,,,,,,,,,,,,109,,,,109,,109,110,109,,110,110,110,110,110',
'110,110,110,110,110,,,110,110,110,110,,,110,110,110,110,,,110,110,,110',
',110,110,,,110,110,,,,,110,110,110,110,110,110,,110,,,,110,,,,,,,,,',
',,,,,,,,,,,,,,,,,,110,,,,110,,110,111,110,,111,111,111,111,111,111,111',
'111,111,111,,,111,111,111,111,,,111,111,111,111,,,111,111,,111,,111',
'111,,,111,111,,,,,111,111,111,111,111,111,,111,,,,111,,,,,,,,,,,,,,',
',,,,,,,,,,,,,111,,,,111,,111,112,111,,112,112,112,112,112,112,112,112',
'112,112,,,112,112,112,112,,,112,112,112,112,,,112,112,,112,,112,112',
',,112,112,,,,,112,112,112,112,112,112,,112,,,,112,,,,,,,,,,,,,,,,,,',
',,,,,,,,,112,,,,112,,112,113,112,,113,113,113,113,113,113,113,113,113',
'113,,,113,113,113,113,,,113,113,113,113,,,113,113,,113,,113,113,,,113',
'113,,,,,113,113,113,113,113,113,,113,,,,113,,,,,,,,,,,,,,,,,,,,,,,,',
',,,113,,,,113,,113,114,113,,114,114,114,114,114,114,114,114,114,114',
',,114,114,114,114,,,114,114,114,114,,,114,114,,114,,114,114,,,114,114',
',,,,114,114,114,114,114,114,,114,,,,114,,,,,,,,,,,,,,,,,,,,,,,,,,,,114',
',,,114,,114,115,114,,115,115,115,115,115,115,115,115,115,115,,,115,115',
'115,115,,,115,115,115,115,,,115,115,,115,,115,115,,,115,115,,,,,115',
'115,115,115,115,115,,115,,,,115,,,,,,,,,,,,,,,,,,,,,,,,,,,,115,,,,115',
',115,116,115,,116,116,116,116,116,116,116,116,116,116,,,116,116,116',
'116,,,116,116,116,116,,,116,116,,116,,116,116,,,116,116,,,,,116,116',
'116,116,116,116,,116,,,,116,,,,,,,,,,,,,,,,,,,,,,,,,,,,116,,,,116,,116',
'101,116,,101,101,101,101,101,101,101,101,101,101,,,101,101,101,101,',
',101,101,101,101,,,101,101,,101,,101,101,,,101,101,,,,,101,101,101,101',
'101,101,213,101,213,,,101,,,,,,,,,,,,,,,,,,,213,,,,,,,213,,101,,,,101',
',101,,101,,,,,213,213,213,213,213,213,213,213,213,213,213,213,213,213',
'213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213',
'213,,213,213,276,,276,,,213,,,,,,,,,,,,,,,,,,,276,,,,,,,276,,,,,,,,',
',,,,,,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276',
'276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,,,276,276',
'282,,282,,,276,,,,,,,,,,,,,,,,,,,282,,,,,,,282,,,,,,,,,,,,,,,282,282',
'282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282',
'282,282,282,282,282,282,282,282,282,282,282,282,,,282,282,71,,71,,,282',
',,,,,,,,,,,,,,,,,,71,,,,,,,71,,,,,,,,,,,,,,,71,71,71,71,71,71,71,71',
'71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71',
',,71,71,80,,80,,,,,,,,,,,,,,,,,,,,,,80,,,,,,,80,,,,,,,80,,,,,,,,80,80',
'80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80',
'80,80,80,80,80,80,,,80,80,278,,278,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,278',
',,,,,,,,,,,,,,278,278,278,278,278,278,278,278,278,278,278,278,278,278',
'278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278',
',,278,278,277,,277,,,,,,,,,,,,,,,,,,,,,,277,,,,,,,277,,,,,,,,,,,,,,',
'277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277',
'277,277,277,277,277,277,277,277,277,277,277,277,277,277,,,277,277,274',
',274,,,,,,,,,,,,,,,,,,,,,,274,,,,,,,274,,,,,,,274,,,,,,,,274,274,274',
'274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274',
'274,274,274,274,274,274,274,274,274,274,274,,,274,274,224,,224,,,,,',
',,,,,,,,,,,,,,,,224,,,,,,,224,,,,,,,,,,,,,,,224,224,224,224,224,224',
'224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224',
'224,224,224,224,224,224,224,224,,,224,224,172,,172,,,,,,,,,,,,,,,,,',
',,,,172,,,,,,,172,,,,,,,,,,,,,,,172,172,172,172,172,172,172,172,172',
'172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172',
'172,172,172,172,172,,,172,172,264,,264,,,,,,,,,,,,,,,,,,,,,,264,,,,',
',,264,,,,,,,,,,,,,,,264,264,264,264,264,264,264,264,264,264,264,264',
'264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264',
'264,264,,,264,264,136,,136,,,,,,,,,,,,,,,,,,,,,,136,,,,,,,136,,,,,,',
'136,,,,,,,,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136',
'136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,,,136',
'136,260,,260,,,,,,,,,,,,,,,,,,,,,,260,,,,,,,260,,,,,,,,,,,,,,,260,260',
'260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260',
'260,260,260,260,260,260,260,260,260,260,260,260,,,260,260,258,,258,',
',,,,,,,,,,,,,,,,,,,,258,,,,,,,258,,,,,,,,,,,,,,,258,258,258,258,258',
'258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258',
'258,258,258,258,258,258,258,258,258,,,258,258,140,,140,,,,,,,,,,,,,',
',,,,,,,,140,,,,,,,140,,,,,,,140,,,,,,,,140,140,140,140,140,140,140,140',
'140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140',
'140,140,140,140,140,140,,,140,140,141,,141,,,,,,,,,,,,,,,,,,,,,,141',
',,,,,,141,,,,,,,,,,,,,,,141,141,141,141,141,141,141,141,141,141,141',
'141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141',
'141,141,141,141,,141,141,256,,256,,,,,,,,,,,,,,,,,,,,,,256,,,,,,,256',
',,,,,,,,,,,,,,256,256,256,256,256,256,256,256,256,256,256,256,256,256',
'256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256',
',,256,256,208,,208,,,,,,,,,,,,,,,,,,,,,,208,,,,,,,208,,,,,,,,,,,,,,',
'208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208',
'208,208,208,208,208,208,208,208,208,208,208,208,208,208,,,208,208,10',
',10,,,,,,,,,,,,,,,,,,,,,,10,,,,,,,10,,,,,,,,,,,,,,,10,10,10,10,10,10',
'10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10',
'10,10,,,10,10,188,,188,,,,,,,,,,,,,,,,,,,,,,188,,,,,,,188,,,,,,,,,,',
',,,,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188',
'188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,211,,211',
',,,,,,,,,,,,,,,,,,,,,211,,,,,,,211,,,,,,,,,,,,,,,211,211,211,211,211',
'211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211',
'211,211,211,211,211,211,211,211,211,191,,191,,,,,,,,,,,,,,,,,,,,,,191',
',,,,,,191,,,,,,,,,,,,,,,191,191,191,191,191,191,191,191,191,191,191',
'191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191',
'191,191,191,186,,,,,,,186,,,,,,,,,,,,,,,186,186,186,186,186,186,186',
'186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186',
'186,186,186,186,186,186,186,128,,,,,,,128,,,,,,,,,,,,,,,128,128,128',
'128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128',
'128,128,128,128,128,128,128,128,128,128,128,181,,,,,,,181,,,,,,,,,,',
',,,,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181',
'181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,174,,,,',
',,,,,,,,,,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174',
'174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174,246',
',,,,,,,,,,,,,,246,246,246,246,246,246,246,246,246,246,246,246,246,246',
'246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246',
'270,,,,,,,,,,,,,,,270,270,270,270,270,270,270,270,270,270,270,270,270',
'270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270',
'270,269,,,,,,,,,,,,,,,269,269,269,269,269,269,269,269,269,269,269,269',
'269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269',
'269,269,145,,,,,,,,,,,,,,,145,145,145,145,145,145,145,145,145,145,145',
'145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145',
'145,145,145,157,,,,,,,,,,,,,,,157,157,157,157,157,157,157,157,157,157',
'157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157',
'157,157,157,157,199,199,199,199,199,199,199,199,199,199,199,199,199',
'199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199',
'199,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175',
'175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,202,202',
'202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,202,202,202,202,202,202,202,202,202,178,178,178,178,178',
'178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178',
'178,178,178,178,178,178,178,178,178,205,205,205,205,205,205,205,205',
'205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205',
'205,205,205,205,205,205' ]
        racc_action_check = arr = Array.new(8656, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  3254,  4574,   nil,   nil,   nil,   162,   122,    23,   nil,   438,
  7752,   nil,   247,   -66,   790,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   878,    64,   nil,     0,   nil,  1142,
   nil,   nil,   nil,   nil,  1230,   nil,   nil,   nil,   nil,  1318,
   nil,  1406,   nil,  1494,    69,  1670,  1758,   nil,  1846,   nil,
   nil,   nil,  1934,   nil,   227,   nil,   nil,   372,   nil,   nil,
  2198,  2286,   nil,    35,   nil,   nil,   nil,  2462,   139,   128,
   nil,  6537,   nil,    37,    98,   nil,   nil,     8,  3078,  3166,
  6618,  3342,  3430,  3518,  3606,  3694,  3782,  3870,  3958,  4046,
  4134,  4222,  4310,  4398,   193,    86,  4662,  4750,   nil,  4838,
  4926,  6246,   nil,   nil,  5102,  5190,  5278,  5366,  5454,  5542,
  5630,  5718,  5806,  5894,  5982,  6070,  6158,  5014,   nil,  2814,
    -2,   nil,  2550,   nil,   105,   174,    82,    85,  8093,   -15,
   104,   134,   nil,   198,   271,   442,  7185,   354,   nil,  2902,
  7428,  7509,  2022,   170,   386,  8376,    68,   nil,  4486,    26,
   -61,   nil,   -58,   -42,   377,   nil,    -2,  8422,  2990,   468,
   114,   123,   195,   nil,   nil,   nil,   nil,    46,   118,   100,
   -40,   nil,  7023,   nil,  8192,  8484,   886,   280,  8546,  1062,
  1430,  8146,   974,  1414,   534,  1422,  8040,   112,  7833,   710,
  1252,  7987,   446,  1164,   622,  1340,   798,  1150,   430,  8453,
   370,   291,  8515,  1326,   358,  8577,  1238,  1502,  7671,   258,
    67,  7910,   nil,  6294,   nil,   126,   nil,   188,  2726,   -15,
   nil,    82,   -17,    63,  6942,   nil,  2638,   nil,  2374,  2110,
   nil,   284,   239,  1582,    86,   nil,   262,   nil,   nil,    -4,
    41,   nil,   -13,   nil,   nil,   nil,  8238,   nil,  1054,   966,
   nil,   186,   nil,   nil,   702,   614,  7590,   526,  7347,   350,
  7266,   nil,   298,   nil,  7104,   nil,   nil,   nil,   nil,  8330,
  8284,   nil,   117,   nil,  6861,   262,  6375,  6780,  6699,   nil,
   155,   -42,  6456,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -1,  -164,    -2,   -45,   -23,  -157,  -164,    -3,   -30,  -164,
    -4,   -97,    -7,  -164,  -164,    -8,   -91,   -28,   -32,    -9,
   -98,   -29,   -33,   -10,  -164,  -164,   -31,  -164,   -11,  -164,
   -99,   -34,   -26,   -12,  -164,  -100,   -35,   -27,   -13,  -164,
   -36,  -164,   -14,  -164,  -114,  -164,  -124,   -15,  -164,   -37,
   -16,   -38,  -164,   -17,  -164,  -116,   -39,  -108,   -18,   -96,
  -164,  -164,   -19,  -164,   -20,   -93,   -21,  -164,  -164,  -164,
   -22,   -44,  -155,  -164,  -157,  -159,  -161,  -164,  -164,    -6,
  -164,  -164,  -164,  -164,  -164,  -164,  -164,  -164,  -164,  -164,
  -164,  -164,  -164,  -164,  -164,  -164,  -164,  -164,   -56,  -164,
  -164,  -164,   -55,   -88,  -164,  -164,  -164,  -164,  -164,  -164,
  -164,  -164,  -164,  -164,  -164,  -164,  -164,  -164,  -101,  -124,
  -164,  -105,  -164,  -104,  -164,  -164,  -164,  -164,  -136,   -49,
  -141,  -164,   -90,   -46,   -47,   -50,  -164,   -52,  -102,  -124,
  -164,  -125,  -164,  -164,   -51,   -53,  -164,   -94,  -124,   -95,
  -164,   -43,  -164,  -164,  -108,  -109,  -164,   -54,  -124,   -48,
  -115,  -164,  -164,  -154,  -158,  -156,  -160,  -164,  -132,  -164,
  -164,   -25,    -5,  -153,   -87,   -83,   -72,   -61,   -84,   -73,
   -62,  -162,   -74,   -63,   -75,   -64,  -163,  -164,   -85,   -76,
   -65,   -86,   -77,   -66,   -78,   -67,   -79,   -68,   -57,   -80,
   -69,   -58,   -81,   -70,   -59,   -82,   -71,   -60,  -125,  -164,
  -117,   -40,  -103,  -164,   -89,  -164,   -92,  -164,  -164,  -164,
  -138,  -164,  -164,  -164,  -126,  -123,  -164,  -131,  -164,  -164,
  -107,  -164,  -164,  -164,  -164,  -137,  -164,   287,  -133,  -164,
  -164,   -24,  -139,  -118,  -106,  -142,  -143,  -140,  -164,  -164,
  -119,  -164,  -148,  -152,  -164,  -164,  -128,  -164,  -127,  -164,
   -41,  -111,  -164,  -110,   -42,  -113,  -120,  -134,  -135,  -145,
  -144,  -149,  -164,  -146,  -164,  -164,  -164,  -129,  -130,  -112,
  -164,  -150,  -164,  -121,  -147,  -151,  -122 ]

racc_goto_table = [
     2,     7,   131,    75,    72,   121,   151,    79,   146,    10,
    71,   219,   149,   252,   152,   261,   263,    69,    80,   209,
   168,   163,   160,   128,   251,   138,   161,    74,   216,    76,
   nil,   nil,   nil,   129,   nil,   nil,   nil,   121,   133,   221,
   nil,   nil,   271,   134,   nil,   nil,   279,   nil,   135,   nil,
   136,   nil,   137,   nil,   140,   141,   nil,   144,   236,   nil,
   nil,   145,    77,   nil,   nil,   nil,   nil,   242,   nil,   156,
   157,   187,   166,   165,   146,   nil,   159,   nil,   210,   170,
   nil,   nil,   nil,   132,   nil,   nil,   nil,    10,   172,   nil,
   174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
   184,   185,   186,   151,   188,   189,   190,   nil,   191,   192,
   193,   234,   nil,   194,   195,   196,   197,   198,   199,   200,
   201,   202,   203,   204,   205,   206,   207,   138,   nil,   164,
   nil,   211,   nil,   nil,   213,   nil,   173,   nil,   nil,   121,
   nil,   138,   121,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   224,   231,   121,   121,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    79,   253,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   151,   151,   214,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   220,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   253,   nil,   nil,   121,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   151,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   238,   nil,   nil,   nil,   246,   257,   nil,
   nil,   nil,   262,   nil,   231,   256,   nil,   258,   260,   nil,
   nil,   nil,   264,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   269,   270,   nil,
   nil,   nil,   nil,   274,   276,   nil,   277,   nil,   278,   nil,
   nil,   nil,   nil,   nil,   nil,   247,   nil,   nil,   nil,   nil,
   nil,   285,   nil,   nil,   282,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   267,   268,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   280,   nil,
   281 ]

racc_goto_check = [
     2,     3,    37,    44,    42,     9,    21,     2,    31,     4,
     4,    38,     5,    40,    33,    24,    24,     1,     4,    35,
    36,    41,    31,     4,    39,    30,     5,    43,    26,    45,
   nil,   nil,   nil,     4,   nil,   nil,   nil,     9,     4,    35,
   nil,   nil,    40,     4,   nil,   nil,    24,   nil,     4,   nil,
     4,   nil,     4,   nil,     4,     4,   nil,     4,    35,   nil,
   nil,     4,    22,   nil,   nil,   nil,   nil,    38,   nil,     4,
     4,    37,    44,    42,    31,   nil,     4,   nil,     5,     3,
   nil,   nil,   nil,    22,   nil,   nil,   nil,     4,     4,   nil,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,    21,     4,     4,     4,   nil,     4,     4,
     4,    33,   nil,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,    30,   nil,    22,
   nil,     4,   nil,   nil,     4,   nil,    22,   nil,   nil,     9,
   nil,    30,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     4,     2,     9,     9,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    21,    21,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    21,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    22,   nil,   nil,   nil,     4,     2,   nil,
   nil,   nil,     2,   nil,     2,     4,   nil,     4,     4,   nil,
   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,     4,   nil,
   nil,   nil,   nil,     4,     4,   nil,     4,   nil,     4,   nil,
   nil,   nil,   nil,   nil,   nil,    22,   nil,   nil,   nil,   nil,
   nil,     2,   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    22,    22,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,   nil,
    22 ]

racc_goto_pointer = [
   nil,    17,     0,     1,     9,   -42,   nil,   nil,   nil,    -7,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -51,    56,   nil,  -216,   nil,   -99,   nil,   nil,   nil,
   -19,   -46,   nil,   -43,   nil,  -100,   -57,   -23,  -120,  -198,
  -209,   -52,    -1,    22,    -2,    24 ]

racc_goto_default = [
   nil,   nil,   226,   nil,   208,    12,    15,    19,    23,    28,
    33,    38,    42,    47,    50,    53,    58,    62,    64,    66,
    70,     4,   nil,    11,   155,    13,    16,    20,    30,    35,
   118,    44,   123,   nil,    55,   143,   nil,   nil,   nil,   nil,
   nil,     5,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 94, :_reduce_1,
  1, 94, :_reduce_2,
  1, 94, :_reduce_3,
  1, 96, :_reduce_4,
  3, 96, :_reduce_5,
  2, 96, :_reduce_6,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  3, 115, :_reduce_24,
  2, 115, :_reduce_25,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 116, :_reduce_28,
  1, 116, :_reduce_29,
  1, 116, :_reduce_30,
  1, 116, :_reduce_31,
  1, 116, :_reduce_32,
  1, 116, :_reduce_33,
  1, 116, :_reduce_34,
  1, 116, :_reduce_35,
  1, 116, :_reduce_36,
  1, 116, :_reduce_37,
  1, 116, :_reduce_38,
  1, 116, :_reduce_39,
  3, 103, :_reduce_40,
  3, 117, :_reduce_41,
  3, 117, :_reduce_42,
  1, 117, :_reduce_43,
  2, 107, :_reduce_44,
  1, 114, :_reduce_45,
  2, 101, :_reduce_46,
  2, 101, :_reduce_47,
  2, 101, :_reduce_48,
  2, 101, :_reduce_49,
  2, 101, :_reduce_50,
  2, 101, :_reduce_51,
  2, 101, :_reduce_52,
  2, 101, :_reduce_53,
  2, 101, :_reduce_54,
  2, 101, :_reduce_55,
  2, 101, :_reduce_56,
  3, 101, :_reduce_57,
  3, 101, :_reduce_58,
  3, 101, :_reduce_59,
  3, 101, :_reduce_60,
  3, 101, :_reduce_61,
  3, 101, :_reduce_62,
  3, 101, :_reduce_63,
  3, 101, :_reduce_64,
  3, 101, :_reduce_65,
  3, 101, :_reduce_66,
  3, 101, :_reduce_67,
  3, 101, :_reduce_68,
  3, 101, :_reduce_69,
  3, 101, :_reduce_70,
  3, 101, :_reduce_71,
  3, 101, :_reduce_72,
  3, 101, :_reduce_73,
  3, 101, :_reduce_74,
  3, 101, :_reduce_75,
  3, 101, :_reduce_76,
  3, 101, :_reduce_77,
  3, 101, :_reduce_78,
  3, 101, :_reduce_79,
  3, 101, :_reduce_80,
  3, 101, :_reduce_81,
  3, 101, :_reduce_82,
  3, 101, :_reduce_83,
  3, 101, :_reduce_84,
  3, 101, :_reduce_85,
  3, 101, :_reduce_86,
  3, 101, :_reduce_87,
  2, 113, :_reduce_88,
  3, 100, :_reduce_89,
  2, 100, :_reduce_90,
  1, 118, :_reduce_91,
  3, 118, :_reduce_92,
  1, 119, :_reduce_none,
  2, 119, :_reduce_94,
  2, 112, :_reduce_95,
  1, 98, :_reduce_96,
  1, 98, :_reduce_97,
  1, 98, :_reduce_98,
  1, 98, :_reduce_99,
  1, 98, :_reduce_100,
  2, 98, :_reduce_101,
  2, 98, :_reduce_102,
  2, 123, :_reduce_103,
  1, 123, :_reduce_104,
  1, 123, :_reduce_105,
  3, 125, :_reduce_106,
  3, 121, :_reduce_107,
  0, 126, :_reduce_108,
  1, 126, :_reduce_109,
  3, 126, :_reduce_110,
  3, 126, :_reduce_111,
  4, 126, :_reduce_112,
  3, 126, :_reduce_113,
  1, 99, :_reduce_114,
  2, 99, :_reduce_115,
  1, 99, :_reduce_116,
  3, 111, :_reduce_117,
  4, 124, :_reduce_118,
  4, 124, :_reduce_119,
  4, 127, :_reduce_120,
  6, 102, :_reduce_121,
  7, 102, :_reduce_122,
  3, 120, :_reduce_123,
  0, 128, :_reduce_124,
  1, 128, :_reduce_125,
  2, 128, :_reduce_126,
  3, 128, :_reduce_127,
  3, 128, :_reduce_128,
  4, 128, :_reduce_129,
  4, 128, :_reduce_130,
  2, 128, :_reduce_131,
  3, 105, :_reduce_132,
  4, 105, :_reduce_133,
  5, 105, :_reduce_134,
  3, 129, :_reduce_135,
  2, 106, :_reduce_136,
  3, 122, :_reduce_137,
  3, 108, :_reduce_138,
  4, 109, :_reduce_139,
  4, 109, :_reduce_140,
  1, 130, :_reduce_141,
  3, 130, :_reduce_142,
  2, 131, :_reduce_143,
  3, 131, :_reduce_144,
  3, 131, :_reduce_145,
  5, 110, :_reduce_146,
  7, 110, :_reduce_147,
  1, 132, :_reduce_148,
  2, 132, :_reduce_149,
  3, 133, :_reduce_150,
  4, 133, :_reduce_151,
  1, 133, :_reduce_none,
  3, 134, :_reduce_153,
  2, 135, :_reduce_154,
  1, 136, :_reduce_155,
  2, 136, :_reduce_156,
  0, 137, :_reduce_157,
  2, 137, :_reduce_158,
  1, 138, :_reduce_159,
  2, 138, :_reduce_160,
  2, 104, :_reduce_161,
  3, 104, :_reduce_162,
  3, 104, :_reduce_163 ]

racc_reduce_n = 164

racc_shift_n = 287

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :UNLESS => 4,
  :NUMBER => 5,
  :STRING => 6,
  :REGEX => 7,
  :TRUE => 8,
  :FALSE => 9,
  :YES => 10,
  :NO => 11,
  :ON => 12,
  :OFF => 13,
  :IDENTIFIER => 14,
  :PROPERTY_ACCESS => 15,
  :CODE => 16,
  :PARAM => 17,
  :NEW => 18,
  :RETURN => 19,
  :TRY => 20,
  :CATCH => 21,
  :FINALLY => 22,
  :THROW => 23,
  :BREAK => 24,
  :CONTINUE => 25,
  :FOR => 26,
  :IN => 27,
  :BY => 28,
  :WHILE => 29,
  :SWITCH => 30,
  :WHEN => 31,
  :DELETE => 32,
  :INSTANCEOF => 33,
  :TYPEOF => 34,
  :SUPER => 35,
  :EXTENDS => 36,
  :NEWLINE => 37,
  :COMMENT => 38,
  :JS => 39,
  :INDENT => 40,
  :OUTDENT => 41,
  :UMINUS => 42,
  :SPLAT => 43,
  :NOT => 44,
  "!" => 45,
  "!!" => 46,
  "~" => 47,
  "++" => 48,
  "--" => 49,
  "?" => 50,
  "*" => 51,
  "/" => 52,
  "%" => 53,
  "+" => 54,
  "-" => 55,
  "<<" => 56,
  ">>" => 57,
  ">>>" => 58,
  "&" => 59,
  "|" => 60,
  "^" => 61,
  "<=" => 62,
  "<" => 63,
  ">" => 64,
  ">=" => 65,
  "==" => 66,
  "!=" => 67,
  :IS => 68,
  :ISNT => 69,
  "&&" => 70,
  "||" => 71,
  :AND => 72,
  :OR => 73,
  "-=" => 74,
  "+=" => 75,
  "/=" => 76,
  "*=" => 77,
  "%=" => 78,
  "." => 79,
  :ASSIGN => 80,
  "||=" => 81,
  "&&=" => 82,
  "=>" => 83,
  "\n" => 84,
  ";" => 85,
  "," => 86,
  "[" => 87,
  "]" => 88,
  "{" => 89,
  "}" => 90,
  "(" => 91,
  ")" => 92 }

racc_nt_base = 93

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "UNLESS",
  "NUMBER",
  "STRING",
  "REGEX",
  "TRUE",
  "FALSE",
  "YES",
  "NO",
  "ON",
  "OFF",
  "IDENTIFIER",
  "PROPERTY_ACCESS",
  "CODE",
  "PARAM",
  "NEW",
  "RETURN",
  "TRY",
  "CATCH",
  "FINALLY",
  "THROW",
  "BREAK",
  "CONTINUE",
  "FOR",
  "IN",
  "BY",
  "WHILE",
  "SWITCH",
  "WHEN",
  "DELETE",
  "INSTANCEOF",
  "TYPEOF",
  "SUPER",
  "EXTENDS",
  "NEWLINE",
  "COMMENT",
  "JS",
  "INDENT",
  "OUTDENT",
  "UMINUS",
  "SPLAT",
  "NOT",
  "\"!\"",
  "\"!!\"",
  "\"~\"",
  "\"++\"",
  "\"--\"",
  "\"?\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\">>>\"",
  "\"&\"",
  "\"|\"",
  "\"^\"",
  "\"<=\"",
  "\"<\"",
  "\">\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "IS",
  "ISNT",
  "\"&&\"",
  "\"||\"",
  "AND",
  "OR",
  "\"-=\"",
  "\"+=\"",
  "\"/=\"",
  "\"*=\"",
  "\"%=\"",
  "\".\"",
  "ASSIGN",
  "\"||=\"",
  "\"&&=\"",
  "\"=>\"",
  "\"\\n\"",
  "\";\"",
  "\",\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Root",
  "Terminator",
  "Expressions",
  "Expression",
  "Value",
  "Call",
  "Code",
  "Operation",
  "Range",
  "Assign",
  "If",
  "Try",
  "Throw",
  "Return",
  "While",
  "For",
  "Switch",
  "Extends",
  "Splat",
  "Existence",
  "Comment",
  "Block",
  "Literal",
  "AssignObj",
  "ParamList",
  "Param",
  "Array",
  "Object",
  "Parenthetical",
  "Accessor",
  "Invocation",
  "Index",
  "AssignList",
  "Super",
  "ArgList",
  "Catch",
  "ForVariables",
  "ForSource",
  "Whens",
  "When",
  "IfBlock",
  "ElsIf",
  "ElsIfs",
  "ElseBody",
  "IfEnd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_1(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_2(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_4(val, _values, result)
     result = Expressions.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_5(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_24(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_25(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_28(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_29(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_30(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_31(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_32(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_33(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_34(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_35(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_36(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_37(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_38(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_39(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_40(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_41(val, _values, result)
     result = AssignNode.new(ValueNode.new(val[0]), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_42(val, _values, result)
     result = AssignNode.new(ValueNode.new(LiteralNode.new(val[0])), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_43(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_44(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_45(val, _values, result)
     result = CommentNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 131)
  def _reduce_46(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_47(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_48(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 134)
  def _reduce_49(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_50(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 136)
  def _reduce_51(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_52(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_53(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_54(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 140)
  def _reduce_55(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_56(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_57(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_58(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_59(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_60(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_61(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 150)
  def _reduce_62(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_63(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_64(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 154)
  def _reduce_65(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_66(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_67(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_68(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_69(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_70(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 161)
  def _reduce_71(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_72(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_73(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 165)
  def _reduce_74(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_75(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_76(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_77(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 170)
  def _reduce_78(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_79(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_80(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_81(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_82(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_83(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_84(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_85(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_86(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 181)
  def _reduce_87(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_88(val, _values, result)
     result = ExistenceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 190)
  def _reduce_89(val, _values, result)
     result = CodeNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_90(val, _values, result)
     result = CodeNode.new([], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 196)
  def _reduce_91(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 197)
  def _reduce_92(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

# reduce 93 omitted

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_94(val, _values, result)
     result = ParamSplatNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 206)
  def _reduce_95(val, _values, result)
     result = ArgSplatNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 211)
  def _reduce_96(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 212)
  def _reduce_97(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 213)
  def _reduce_98(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 214)
  def _reduce_99(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 215)
  def _reduce_100(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 216)
  def _reduce_101(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 217)
  def _reduce_102(val, _values, result)
     result = ValueNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 222)
  def _reduce_103(val, _values, result)
     result = AccessorNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 223)
  def _reduce_104(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 224)
  def _reduce_105(val, _values, result)
     result = SliceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 229)
  def _reduce_106(val, _values, result)
     result = IndexNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_107(val, _values, result)
     result = ObjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 239)
  def _reduce_108(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 240)
  def _reduce_109(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 241)
  def _reduce_110(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 242)
  def _reduce_111(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_112(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_113(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 250)
  def _reduce_114(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 251)
  def _reduce_115(val, _values, result)
     result = val[1].new_instance 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_116(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_117(val, _values, result)
     result = ExtendsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_118(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_119(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 268)
  def _reduce_120(val, _values, result)
     result = CallNode.new(:super, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 274)
  def _reduce_121(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 276)
  def _reduce_122(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 281)
  def _reduce_123(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 286)
  def _reduce_124(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 287)
  def _reduce_125(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 288)
  def _reduce_126(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 289)
  def _reduce_127(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 290)
  def _reduce_128(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 291)
  def _reduce_129(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 292)
  def _reduce_130(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_131(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 298)
  def _reduce_132(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 299)
  def _reduce_133(val, _values, result)
     result = TryNode.new(val[1], nil, nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 301)
  def _reduce_134(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_135(val, _values, result)
     result = [val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 311)
  def _reduce_136(val, _values, result)
     result = ThrowNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_137(val, _values, result)
     result = ParentheticalNode.new(val[1], val[0].line) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 321)
  def _reduce_138(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 328)
  def _reduce_139(val, _values, result)
     result = ForNode.new(val[0], val[3], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 329)
  def _reduce_140(val, _values, result)
     result = ForNode.new(val[3], val[2], val[1][0], val[1][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_141(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 335)
  def _reduce_142(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 340)
  def _reduce_143(val, _values, result)
     result = {:source => val[1]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 342)
  def _reduce_144(val, _values, result)
     result = val[0].merge(:filter => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 344)
  def _reduce_145(val, _values, result)
     result = val[0].merge(:step => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 350)
  def _reduce_146(val, _values, result)
     result = val[3].rewrite_condition(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 352)
  def _reduce_147(val, _values, result)
     result = val[3].rewrite_condition(val[1]).add_else(val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 357)
  def _reduce_148(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 358)
  def _reduce_149(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 363)
  def _reduce_150(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 364)
  def _reduce_151(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

# reduce 152 omitted

module_eval(<<'.,.,', 'grammar.y', 372)
  def _reduce_153(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 377)
  def _reduce_154(val, _values, result)
     result = val[1].force_statement 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 382)
  def _reduce_155(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 383)
  def _reduce_156(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 388)
  def _reduce_157(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 389)
  def _reduce_158(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 394)
  def _reduce_159(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 395)
  def _reduce_160(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 400)
  def _reduce_161(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 401)
  def _reduce_162(val, _values, result)
     result = IfNode.new(val[2], Expressions.new([val[0]]), nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 402)
  def _reduce_163(val, _values, result)
     result = IfNode.new(val[2], Expressions.new([val[0]]), nil, {:statement => true, :invert => true}) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
