#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

module CoffeeScript

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 449)
  # Lex and parse a CoffeeScript.
  def parse(code)
    # Uncomment the following line to enable grammar debugging, in combination
    # with the -g flag in the Rake build task.
    # @yydebug = true
    @tokens = Lexer.new.tokenize(code)
    do_parse
  end

  # Retrieve the next token from the list.
  def next_token
    @tokens.shift
  end

  # Raise a custom error class that knows about line numbers.
  def on_error(error_token_id, error_value, value_stack)
    raise ParseError.new(token_to_str(error_token_id), error_value, value_stack)
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'106,9,114,20,24,27,32,36,40,46,50,55,61,276,270,271,30,1,5,11,14,18',
'276,22,28,33,122,126,30,30,18,99,63,218,72,115,3,6,284,15,145,18,26',
'179,30,111,1,44,48,53,59,135,139,102,105,109,113,118,121,125,128,131',
'134,138,101,104,108,112,117,120,124,127,130,133,137,100,103,107,110',
'116,119,123,30,129,132,136,51,56,149,151,152,71,178,2,9,10,183,20,24',
'27,32,36,40,46,50,55,61,294,149,151,152,1,5,11,14,51,56,22,28,33,35',
'62,66,189,242,57,63,97,72,302,3,6,80,15,241,18,26,255,256,276,79,44',
'48,53,59,64,68,18,111,239,293,13,111,263,135,139,30,249,135,139,102',
'105,109,113,118,145,150,62,66,18,156,149,151,152,149,151,152,149,151',
'152,51,56,62,66,176,71,150,2,9,10,156,20,24,27,32,36,40,46,50,55,61',
'62,66,251,91,1,5,11,14,262,1,22,28,33,35,30,62,66,249,57,63,249,72,80',
'3,6,111,15,30,18,26,79,-181,-181,265,44,48,53,59,64,68,111,30,80,266',
'13,187,-181,-181,150,190,79,150,156,30,150,156,51,56,156,18,141,62,66',
'251,62,66,251,85,252,275,149,151,152,51,56,62,66,173,71,18,2,9,10,273',
'20,24,27,32,36,40,46,50,55,61,309,153,270,271,1,5,11,14,75,80,22,28',
'33,35,80,62,66,79,57,63,97,72,79,3,6,111,15,,18,26,,-181,-181,,44,48',
'53,59,64,68,184,185,,111,13,154,18,,76,-181,-181,18,,76,150,111,191',
'192,156,62,66,135,139,102,105,109,113,118,121,125,128,191,192,51,56',
',,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,111,,1,5,11,14,135,139',
'22,28,33,35,62,66,176,,57,63,177,72,,3,6,111,15,,18,26,,135,139,,44',
'48,53,59,64,68,111,,,,13,,135,139,102,105,109,113,118,121,125,128,131',
'134,138,101,104,108,112,117,120,124,127,,,111,,,,51,56,-181,-181,,71',
',2,9,10,,20,24,27,32,36,40,46,50,55,61,,,111,,1,5,11,14,-181,-181,22',
'28,33,35,,,,,57,63,,72,,3,6,111,15,,18,26,,-181,-181,,44,48,53,59,64',
'68,111,,,,13,,135,139,102,105,109,113,118,121,125,128,131,134,138,101',
'104,108,112,117,120,124,127,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36',
'40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18',
'26,,,,,44,48,53,59,64,68,111,,,,13,,135,139,102,105,109,113,118,121',
'125,128,131,134,138,101,104,108,112,117,120,124,127,,,,,,,51,56,,,,71',
',2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,',
',,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,111,,,,13,,135,139',
'102,105,109,113,118,121,125,128,131,134,138,101,104,108,112,117,120',
'124,127,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,',
',1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53',
'59,64,68,111,,,,13,,135,139,102,105,109,113,118,121,125,128,131,134',
'138,101,104,108,112,117,120,124,127,,,,,,,51,56,,,,71,,2,9,10,,20,24',
'27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3',
'6,,15,,18,26,,,,,44,48,53,59,64,68,111,,,,13,,135,139,102,105,109,113',
'118,121,125,128,131,134,138,101,104,108,112,117,120,124,127,,,,,,,51',
'56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28',
'33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,111,,,,13',
',135,139,102,105,109,113,118,121,125,128,131,134,138,101,104,108,112',
'117,120,124,127,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55',
'61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44',
'48,53,59,64,68,111,,,,13,,135,139,102,105,109,113,118,121,125,128,131',
'134,138,101,104,108,112,117,120,124,127,,299,,,,,51,56,,,,71,,2,9,10',
',20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63',
',72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,111,,,,13,,135,139,102,105',
'109,113,118,121,125,128,131,134,138,111,,,,,,135,139,102,105,109,113',
'118,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14',
',,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,111',
',,,13,,135,139,102,105,109,113,118,121,125,128,131,134,138,111,,,,,',
'135,139,102,105,109,113,118,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40',
'46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26',
',95,,,44,48,53,59,64,68,111,,,,13,,135,139,102,105,109,113,118,121,125',
'128,131,134,138,111,,,,,,135,139,102,105,109,,,,51,56,,,,71,,2,9,10',
',20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63',
',72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,111,,,,13,,135,139,102,105',
'109,113,118,121,125,128,131,134,138,111,,,,,,135,139,102,105,109,,,',
'51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22',
'28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,111,,,',
'13,,135,139,102,105,109,113,118,121,125,128,111,,,,,,135,139,102,105',
'109,113,118,121,125,128,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50',
'55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,',
'44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2',
'9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,',
'57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,',
',,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,282,,,,44,48',
'53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,62,66,,71,,2,9',
'10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57',
'63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1',
'5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59',
'64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24',
'27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3',
'6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,',
',22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,',
',13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36',
'40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18',
'26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,',
',71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33',
'35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55',
'61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44',
'48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10',
',20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63',
',72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5',
'11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64',
'68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27',
'32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6',
',15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22',
'28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46',
'50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,170',
',,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71',
',2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,',
',,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61',
',,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48',
'53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,',
'20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63',
',72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5',
'11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64',
'68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27',
'32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6',
',15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22',
'28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,170,,,,44,48,53,59,64,68,,,,',
'13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40',
'46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26',
',,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71',
',2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,',
',,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61',
',,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48',
'53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,',
'20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63',
',72,,3,6,,15,,18,26,170,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1',
'5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59',
'64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24',
'27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3',
'6,,15,,18,26,30,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,51,56,62,66,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11',
'14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68',
',,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32',
'36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15',
',18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56',
',,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33',
'35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55',
'61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44',
'48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10',
',20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63',
',72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5',
'11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64',
'68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27',
'32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6',
',15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22',
'28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46',
'50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,',
',,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71',
',2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,',
',,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61',
',,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48',
'53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,',
'20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63',
',72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5',
'11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64',
'68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27',
'32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6',
',15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22',
'28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46',
'50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,',
',,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71',
',2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,',
',,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61',
',,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48',
'53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,',
'20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63',
',72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5',
'11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64',
'68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27',
'32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6',
',15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22',
'28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46',
'50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,',
',,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71',
',2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,',
',,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61',
',,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48',
'53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,',
'20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63',
',72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5',
'11,14,,,22,28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64',
'68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,9,10,,20,24,27',
'32,36,40,46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,57,63,,72,,3,6',
',15,,18,26,,,,,44,48,53,59,64,68,,,,,13,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'51,56,,,,71,,2,9,10,,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11,14,,,22',
'28,33,35,,,,,57,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,,,13',
'20,24,27,32,36,40,46,50,55,61,,,,,,,,,,,,28,33,,,,,,51,56,,,,71,,2,15',
'10,,26,,,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126,,,,99,,,,115,,,,,,',
',,,111,71,,2,,10,135,139,102,105,109,113,118,121,125,128,131,134,138',
'101,104,108,112,117,120,124,127,130,133,137,100,103,107,110,116,119',
'254,,129,132,136,,,,,,,274,20,24,27,32,36,40,46,50,55,61,,,,,1,5,11',
'14,,,22,28,33,,,,,,,63,,72,,3,6,,15,,18,26,,,,,44,48,53,59,64,68,,,',
',13,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,56,,,,71,,2,,10,20,24,27,32,36,40',
'46,50,55,61,,,,,1,5,11,14,,,22,28,33,35,,,,,,63,,72,,3,6,,15,,18,26',
',,,,44,48,53,59,64,68,106,,114,,13,,,20,24,27,32,36,40,46,50,55,61,',
',,,,,,,,122,126,28,33,,99,,51,56,115,,,71,,2,,10,15,,111,26,,,,,135',
'139,102,105,109,113,118,121,125,128,131,134,138,101,104,108,112,117',
'120,124,127,130,133,137,100,103,107,110,116,119,123,,129,132,136,106',
',114,,,,306,,,71,,2,,10,,,,,,,,,,,,,122,126,,,,99,,,,115,,,,,,,,,,111',
',,,,,135,139,102,105,109,113,118,121,125,128,131,134,138,101,104,108',
'112,117,120,124,127,130,133,137,100,103,107,110,116,119,123,,129,132',
'136,106,,114,,,,310,,,,,,,,,,,,,,,,,,,,122,126,,,,99,,,,115,,,,,,,,30',
',111,,,,,,135,139,102,105,109,113,118,121,125,128,131,134,138,101,104',
'108,112,117,120,124,127,130,133,137,100,103,107,110,116,119,123,,129',
'132,136,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126,,,,99,,,,115,,,,,,,',
',,111,,,,,,135,139,102,105,109,113,118,121,125,128,131,134,138,101,104',
'108,112,117,120,124,127,130,133,137,100,103,107,110,116,119,123,,129',
'132,136,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126,,,,99,,,,115,,,,,,,',
',,111,,,,,,135,139,102,105,109,113,118,121,125,128,131,134,138,101,104',
'108,112,117,120,124,127,130,133,137,100,103,107,110,116,119,123,,129',
'132,136,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126,,,,99,,,,115,,,,,,,',
',,111,,,,,,135,139,102,105,109,113,118,121,125,128,131,134,138,101,104',
'108,112,117,120,124,127,130,133,137,100,103,107,110,116,119,123,,129',
'132,136,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126,,,,99,,,,115,,,,,,,',
',,111,,,,,,135,139,102,105,109,113,118,121,125,128,131,134,138,101,104',
'108,112,117,120,124,127,130,133,137,100,103,107,110,116,119,123,,129',
'132,136,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126,,,,99,,,,115,,,,,,,',
',,111,,,,,,135,139,102,105,109,113,118,121,125,128,131,134,138,101,104',
'108,112,117,120,124,127,130,133,137,100,103,107,110,116,119,123,,129',
'132,136,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126,,,,99,,,,115,,,,,,,',
',,111,,,,,,135,139,102,105,109,113,118,121,125,128,131,134,138,101,104',
'108,112,117,120,124,127,130,133,137,100,103,107,110,116,119,123,,129',
'132,136,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126,,,,99,,,,115,,,,,,,',
',,111,,,,,,135,139,102,105,109,113,118,121,125,128,131,134,138,101,104',
'108,112,117,120,124,127,130,133,137,100,103,107,110,116,119,123,,129',
'132,136,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126,,,,99,,,,115,,,,,,,',
',,111,,,,,,135,139,102,105,109,113,118,121,125,128,131,134,138,101,104',
'108,112,117,120,124,127,130,133,137,100,103,107,110,116,119,123,,129',
'132,136,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126,,,,99,,,,115,,,,,,,',
'30,,111,,,,,,135,139,102,105,109,113,118,121,125,128,131,134,138,101',
'104,108,112,117,120,124,127,130,133,137,100,103,107,110,116,119,123',
',129,132,136,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126,,,,99,,,,115,,',
',,,,,,,111,,,,,,135,139,102,105,109,113,118,121,125,128,131,134,138',
'101,104,108,112,117,120,124,127,130,133,137,100,103,107,110,116,119',
'254,,129,132,136,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126,,,,99,,,,115',
',,,,,,,,,111,,,,,,135,139,102,105,109,113,118,121,125,128,131,134,138',
'101,104,108,112,117,120,124,127,130,133,137,100,103,107,110,116,119',
'123,,129,132,136,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126,,,,99,,,,115',
',,,,,,,,,111,,,,,,135,139,102,105,109,113,118,121,125,128,131,134,138',
'101,104,108,112,117,120,124,127,130,133,137,100,103,107,110,116,119',
'123,,129,132,136,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126,,,,99,,,,115',
',,,,,,,248,,111,,,,,,135,139,102,105,109,113,118,121,125,128,131,134',
'138,101,104,108,112,117,120,124,127,130,133,137,100,103,107,110,116',
'119,123,,129,132,136,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126,,,,99,',
',,115,,,,,,,,,,111,,,,,,135,139,102,105,109,113,118,121,125,128,131',
'134,138,101,104,108,112,117,120,124,127,130,133,137,100,103,107,110',
'116,119,123,,129,132,136,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126,,,',
'99,,,,115,,,,,,,,,,111,,,,,,135,139,102,105,109,113,118,121,125,128',
'131,134,138,101,104,108,112,117,120,124,127,130,133,137,100,103,107',
'110,116,119,123,,129,132,136,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126',
',,,99,,,,115,,,,,,,,,,111,,,,,,135,139,102,105,109,113,118,121,125,128',
'131,134,138,101,104,108,112,117,120,124,127,130,133,137,100,103,107',
'110,116,119,123,,129,132,136,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126',
',,,99,,,,115,,,,,,,,,,111,,,,,,135,139,102,105,109,113,118,121,125,128',
'131,134,138,101,104,108,112,117,120,124,127,130,133,137,100,103,107',
'110,116,119,123,,129,132,136,106,,114,,,,,,,,,,,,,,,,,,,,,,,,122,126',
',,,99,,,,115,,,,,,,,,,111,,,,,,135,139,102,105,109,113,118,121,125,128',
'131,134,138,101,104,108,112,117,120,124,127,130,133,137,100,103,107',
'110,116,119,123,,129,132,136,122,126,,,,,,,,115,,,,,,,,,,111,,,,,,135',
'139,102,105,109,113,118,121,125,128,131,134,138,101,104,108,112,117',
'120,124,127,130,133,137,100,103,107,110,116,119,123,,129,132,136,122',
'126,,,,,,,,115,,,,,,,,,,111,,,,,,135,139,102,105,109,113,118,121,125',
'128,131,134,138,101,104,108,112,117,120,124,127,130,133,137,100,103',
'107,110,116,119,123,122,126,,,,,,,,115,,,,,,,,,,111,,,,,,135,139,102',
'105,109,113,118,121,125,128,131,134,138,101,104,108,112,117,120,124',
'127,130,133,137,100,103,107,110,116,119,123,122,126,,,,,,,,115,,,,,',
',,,,111,,,,,,135,139,102,105,109,113,118,121,125,128,131,134,138,101',
'104,108,112,117,120,124,127,130,133,137,100,103,107,110,116,119,123',
'122,126,,,,,,,,115,,,,,,,,,,111,,,,,,135,139,102,105,109,113,118,121',
'125,128,131,134,138,101,104,108,112,117,120,124,127,130,133,137,100',
'103,107,110,116,119,123,122,126,,,,,,,,115,,,,,,,,,,111,,,,,,135,139',
'102,105,109,113,118,121,125,128,131,134,138,101,104,108,112,117,120',
'124,127,130,133,137,100,103,107,110,116,119,123,126,,,,,,,,115,,,,,',
',,,,111,,,,,,135,139,102,105,109,113,118,121,125,128,131,134,138,101',
'104,108,112,117,120,124,127,130,133,137,100,103,107,110,116,119,123',
'126,,,,,,,,115,,,,,,,,,,111,,,,,,135,139,102,105,109,113,118,121,125',
'128,131,134,138,101,104,108,112,117,120,124,127,130,133,137,100,103',
'107,110,116,119,123,126,,,,,,,,115,,,,,,,,,,111,,,,,,135,139,102,105',
'109,113,118,121,125,128,131,134,138,101,104,108,112,117,120,124,127',
'130,133,137,100,103,107,110,116,119,123,126,,,,,,,,115,,,,,,,,,,111',
',,,,,135,139,102,105,109,113,118,121,125,128,131,134,138,101,104,108',
'112,117,120,124,127,130,133,137,100,103,107,110,116,119,123,126,,,,',
',,,115,,,,,,,,,,111,,,,,,135,139,102,105,109,113,118,121,125,128,131',
'134,138,101,104,108,112,117,120,124,127,130,133,137,100,103,107,110',
'116,119,123,115,,,,,,,,,,111,,,,,,135,139,102,105,109,113,118,121,125',
'128,131,134,138,101,104,108,112,117,120,124,127,130,133,137,100,103',
'107,110,116,119,115,,,,,,,,,,111,,,,,,135,139,102,105,109,113,118,121',
'125,128,131,134,138,101,104,108,112,117,120,124,127,130,133,137,100',
'103,107,110,116,119,115,,,,,,,,,,111,,,,,,135,139,102,105,109,113,118',
'121,125,128,131,134,138,101,104,108,112,117,120,124,127,130,133,137',
'100,103,107,110,116,119,111,,,,,,135,139,102,105,109,113,118,121,125',
'128,131,134,138,101,104,108,112,117,120,124,127,130,133,137,100,103',
'107,110,116,119,111,,,,,,135,139,102,105,109,113,118,121,125,128,131',
'134,138,101,104,108,112,117,120,124,127,130,133,137,100,103,107,110',
'116,119,111,,,,,,135,139,102,105,109,113,118,121,125,128,131,134,138',
'101,104,108,112,117,120,124,127,130,133,137,100,103,107,110,116,119',
'111,,,,,,135,139,102,105,109,113,118,121,125,128,131,134,138,101,104',
'108,112,117,120,124,127,130,133,137,100,103,107,110,116,119,111,,,,',
',135,139,102,105,109,113,118,121,125,128,131,134,138,101,104,108,112',
'117,120,124,127,130,133,137,100,103,107,110,116,119' ]
        racc_action_table = arr = Array.new(9843, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'87,145,87,111,111,111,111,111,111,111,111,111,111,296,193,193,263,111',
'111,111,111,296,248,111,111,111,87,87,193,265,248,87,111,123,111,87',
'111,111,254,111,39,111,111,80,145,87,275,111,111,111,111,87,87,87,87',
'87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87',
'87,87,87,87,291,87,87,87,111,111,243,243,243,111,79,111,100,111,87,100',
'100,100,100,100,100,100,100,100,100,277,83,83,83,100,100,100,100,275',
'275,100,100,100,100,278,278,94,152,100,100,35,100,291,100,100,176,100',
'151,100,100,173,174,277,176,100,100,100,100,100,100,277,197,149,277',
'100,216,184,197,197,42,180,216,216,216,216,216,216,216,143,243,94,94',
'176,243,244,244,244,70,70,70,84,84,84,100,100,174,174,174,100,83,100',
'302,100,83,302,302,302,302,302,302,302,302,302,302,180,180,180,21,302',
'302,302,302,180,141,302,302,302,302,140,176,176,246,302,302,169,302',
'175,302,302,159,302,185,302,302,175,159,159,186,302,302,302,302,302',
'302,161,294,259,190,302,91,161,161,244,97,259,70,244,14,84,70,38,38',
'84,175,38,246,246,246,169,169,169,6,169,246,41,41,41,302,302,34,34,75',
'302,259,302,3,302,218,3,3,3,3,3,3,3,3,3,3,303,41,272,272,3,3,3,3,1,76',
'3,3,3,3,2,29,29,76,3,3,122,3,2,3,3,163,3,,3,3,,163,163,,3,3,3,3,3,3',
'90,90,,89,3,41,76,,76,89,89,2,,2,41,232,98,98,41,301,301,232,232,232',
'232,232,232,232,232,232,232,217,217,3,3,,,,3,,3,125,3,,125,125,125,125',
'125,125,125,125,125,125,,,204,,125,125,125,125,204,204,125,125,125,125',
'78,78,78,,125,125,78,125,,125,125,200,125,,125,125,,200,200,,125,125',
'125,125,125,125,215,,,,125,,215,215,215,215,215,215,215,215,215,215',
'215,215,215,215,215,215,215,215,215,215,215,,,165,,,,125,125,165,165',
',125,,125,124,125,,124,124,124,124,124,124,124,124,124,124,,,166,,124',
'124,124,124,166,166,124,124,124,124,,,,,124,124,,124,,124,124,160,124',
',124,124,,160,160,,124,124,124,124,124,124,228,,,,124,,228,228,228,228',
'228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228',
',,,,,,124,124,,,,124,,124,9,124,,9,9,9,9,9,9,9,9,9,9,,,,,9,9,9,9,,,9',
'9,9,9,,,,,9,9,,9,,9,9,,9,,9,9,,,,,9,9,9,9,9,9,231,,,,9,,231,231,231',
'231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231',
'231,,,,,,,9,9,,,,9,,9,10,9,,10,10,10,10,10,10,10,10,10,10,,,,,10,10',
'10,10,,,10,10,10,10,,,,,10,10,,10,,10,10,,10,,10,10,,,,,10,10,10,10',
'10,10,219,,,,10,,219,219,219,219,219,219,219,219,219,219,219,219,219',
'219,219,219,219,219,219,219,219,,,,,,,10,10,,,,10,,10,127,10,,127,127',
'127,127,127,127,127,127,127,127,,,,,127,127,127,127,,,127,127,127,127',
',,,,127,127,,127,,127,127,,127,,127,127,,,,,127,127,127,127,127,127',
'222,,,,127,,222,222,222,222,222,222,222,222,222,222,222,222,222,222',
'222,222,222,222,222,222,222,,,,,,,127,127,,,,127,,127,13,127,,13,13',
'13,13,13,13,13,13,13,13,,,,,13,13,13,13,,,13,13,13,13,,,,,13,13,,13',
',13,13,,13,,13,13,,,,,13,13,13,13,13,13,225,,,,13,,225,225,225,225,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,,,,',
',,13,13,,,,13,,13,128,13,,128,128,128,128,128,128,128,128,128,128,,',
',,128,128,128,128,,,128,128,128,128,,,,,128,128,,128,,128,128,,128,',
'128,128,,,,,128,128,128,128,128,128,195,,,,128,,195,195,195,195,195',
'195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,,,,',
',,128,128,,,,128,,128,284,128,,284,284,284,284,284,284,284,284,284,284',
',,,,284,284,284,284,,,284,284,284,284,,,,,284,284,,284,,284,284,,284',
',284,284,,,,,284,284,284,284,284,284,212,,,,284,,212,212,212,212,212',
'212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,,284',
',,,,284,284,,,,284,,284,22,284,,22,22,22,22,22,22,22,22,22,22,,,,,22',
'22,22,22,,,22,22,22,22,,,,,22,22,,22,,22,22,,22,,22,22,,,,,22,22,22',
'22,22,22,196,,,,22,,196,196,196,196,196,196,196,196,196,196,196,196',
'196,220,,,,,,220,220,220,220,220,220,220,,22,22,,,,22,,22,282,22,,282',
'282,282,282,282,282,282,282,282,282,,,,,282,282,282,282,,,282,282,282',
'282,,,,,282,282,,282,,282,282,,282,,282,282,,,,,282,282,282,282,282',
'282,199,,,,282,,199,199,199,199,199,199,199,199,199,199,199,199,199',
'223,,,,,,223,223,223,223,223,223,223,,282,282,,,,282,,282,30,282,,30',
'30,30,30,30,30,30,30,30,30,,,,,30,30,30,30,,,30,30,30,30,,,,,30,30,',
'30,,30,30,,30,,30,30,,30,,,30,30,30,30,30,30,203,,,,30,,203,203,203',
'203,203,203,203,203,203,203,203,203,203,208,,,,,,208,208,208,208,208',
',,,30,30,,,,30,,30,281,30,,281,281,281,281,281,281,281,281,281,281,',
',,,281,281,281,281,,,281,281,281,281,,,,,281,281,,281,,281,281,,281',
',281,281,,,,,281,281,281,281,281,281,207,,,,281,,207,207,207,207,207',
'207,207,207,207,207,207,207,207,213,,,,,,213,213,213,213,213,,,,281',
'281,,,,281,,281,276,281,,276,276,276,276,276,276,276,276,276,276,,,',
',276,276,276,276,,,276,276,276,276,,,,,276,276,,276,,276,276,,276,,276',
'276,,,,,276,276,276,276,276,276,229,,,,276,,229,229,229,229,229,229',
'229,229,229,229,226,,,,,,226,226,226,226,226,226,226,226,226,226,,276',
'276,,,,276,,276,271,276,,271,271,271,271,271,271,271,271,271,271,,,',
',271,271,271,271,,,271,271,271,271,,,,,271,271,,271,,271,271,,271,,271',
'271,,,,,271,271,271,271,271,271,,,,,271,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'271,271,,,,271,,271,270,271,,270,270,270,270,270,270,270,270,270,270',
',,,,270,270,270,270,,,270,270,270,270,,,,,270,270,,270,,270,270,,270',
',270,270,,,,,270,270,270,270,270,270,,,,,270,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,270,270,,,,270,,270,251,270,,251,251,251,251,251,251,251,251,251',
'251,,,,,251,251,251,251,,,251,251,251,251,,,,,251,251,,251,,251,251',
',251,,251,251,251,,,,251,251,251,251,251,251,,,,,251,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,251,251,251,251,,251,,251,250,251,,250,250,250,250,250',
'250,250,250,250,250,,,,,250,250,250,250,,,250,250,250,250,,,,,250,250',
',250,,250,250,,250,,250,250,,,,,250,250,250,250,250,250,,,,,250,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,250,250,,,,250,,250,121,250,,121,121,121,121',
'121,121,121,121,121,121,,,,,121,121,121,121,,,121,121,121,121,,,,,121',
'121,,121,,121,121,,121,,121,121,,,,,121,121,121,121,121,121,,,,,121',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,121,121,,,,121,,121,44,121,,44,44,44,44',
'44,44,44,44,44,44,,,,,44,44,44,44,,,44,44,44,44,,,,,44,44,,44,,44,44',
',44,,44,44,,,,,44,44,44,44,44,44,,,,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'44,44,,,,44,,44,48,44,,48,48,48,48,48,48,48,48,48,48,,,,,48,48,48,48',
',,48,48,48,48,,,,,48,48,,48,,48,48,,48,,48,48,,,,,48,48,48,48,48,48',
',,,,48,,,,,,,,,,,,,,,,,,,,,,,,,,,,,48,48,,,,48,,48,53,48,,53,53,53,53',
'53,53,53,53,53,53,,,,,53,53,53,53,,,53,53,53,53,,,,,53,53,,53,,53,53',
',53,,53,53,,,,,53,53,53,53,53,53,,,,,53,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'53,53,,,,53,,53,57,53,,57,57,57,57,57,57,57,57,57,57,,,,,57,57,57,57',
',,57,57,57,57,,,,,57,57,,57,,57,57,,57,,57,57,,,,,57,57,57,57,57,57',
',,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,57,,,,57,,57,59,57,,59,59,59,59',
'59,59,59,59,59,59,,,,,59,59,59,59,,,59,59,59,59,,,,,59,59,,59,,59,59',
',59,,59,59,,,,,59,59,59,59,59,59,,,,,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'59,59,,,,59,,59,63,59,,63,63,63,63,63,63,63,63,63,63,,,,,63,63,63,63',
',,63,63,63,63,,,,,63,63,,63,,63,63,,63,,63,63,,,,,63,63,63,63,63,63',
',,,,63,,,,,,,,,,,,,,,,,,,,,,,,,,,,,63,63,,,,63,,63,64,63,,64,64,64,64',
'64,64,64,64,64,64,,,,,64,64,64,64,,,64,64,64,64,,,,,64,64,,64,,64,64',
',64,,64,64,,,,,64,64,64,64,64,64,,,,,64,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'64,64,,,,64,,64,68,64,,68,68,68,68,68,68,68,68,68,68,,,,,68,68,68,68',
',,68,68,68,68,,,,,68,68,,68,,68,68,,68,,68,68,,,,,68,68,68,68,68,68',
',,,,68,,,,,,,,,,,,,,,,,,,,,,,,,,,,,68,68,,,,68,,68,192,68,,192,192,192',
'192,192,192,192,192,192,192,,,,,192,192,192,192,,,192,192,192,192,,',
',,192,192,,192,,192,192,,192,,192,192,,,,,192,192,192,192,192,192,,',
',,192,,,,,,,,,,,,,,,,,,,,,,,,,,,,,192,192,,,,192,,192,71,192,,71,71',
'71,71,71,71,71,71,71,71,,,,,71,71,71,71,,,71,71,71,71,,,,,71,71,,71',
',71,71,,71,,71,71,71,,,,71,71,71,71,71,71,,,,,71,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,71,71,,,,71,,71,72,71,,72,72,72,72,72,72,72,72,72,72,,,,,72',
'72,72,72,,,72,72,72,72,,,,,72,72,,72,,72,72,,72,,72,72,,,,,72,72,72',
'72,72,72,,,,,72,,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,72,,,,72,,72,191,72,',
'191,191,191,191,191,191,191,191,191,191,,,,,191,191,191,191,,,191,191',
'191,191,,,,,191,191,,191,,191,191,,191,,191,191,,,,,191,191,191,191',
'191,191,,,,,191,,,,,,,,,,,,,,,,,,,,,,,,,,,,,191,191,,,,191,,191,179',
'191,,179,179,179,179,179,179,179,179,179,179,,,,,179,179,179,179,,,179',
'179,179,179,,,,,179,179,,179,,179,179,,179,,179,179,,,,,179,179,179',
'179,179,179,,,,,179,,,,,,,,,,,,,,,,,,,,,,,,,,,,,179,179,,,,179,,179',
'178,179,,178,178,178,178,178,178,178,178,178,178,,,,,178,178,178,178',
',,178,178,178,178,,,,,178,178,,178,,178,178,,178,,178,178,,,,,178,178',
'178,178,178,178,,,,,178,,,,,,,,,,,,,,,,,,,,,,,,,,,,,178,178,,,,178,',
'178,170,178,,170,170,170,170,170,170,170,170,170,170,,,,,170,170,170',
'170,,,170,170,170,170,,,,,170,170,,170,,170,170,,170,,170,170,,,,,170',
'170,170,170,170,170,,,,,170,,,,,,,,,,,,,,,,,,,,,,,,,,,,,170,170,,,,170',
',170,156,170,,156,156,156,156,156,156,156,156,156,156,,,,,156,156,156',
'156,,,156,156,156,156,,,,,156,156,,156,,156,156,,156,,156,156,156,,',
',156,156,156,156,156,156,,,,,156,,,,,,,,,,,,,,,,,,,,,,,,,,,,,156,156',
',,,156,,156,154,156,,154,154,154,154,154,154,154,154,154,154,,,,,154',
'154,154,154,,,154,154,154,154,,,,,154,154,,154,,154,154,,154,,154,154',
',,,,154,154,154,154,154,154,,,,,154,,,,,,,,,,,,,,,,,,,,,,,,,,,,,154',
'154,,,,154,,154,120,154,,120,120,120,120,120,120,120,120,120,120,,,',
',120,120,120,120,,,120,120,120,120,,,,,120,120,,120,,120,120,,120,,120',
'120,,,,,120,120,120,120,120,120,,,,,120,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'120,120,,,,120,,120,150,120,,150,150,150,150,150,150,150,150,150,150',
',,,,150,150,150,150,,,150,150,150,150,,,,,150,150,,150,,150,150,,150',
',150,150,,,,,150,150,150,150,150,150,,,,,150,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,150,150,,,,150,,150,85,150,,85,85,85,85,85,85,85,85,85,85,,,,,85',
'85,85,85,,,85,85,85,85,,,,,85,85,,85,,85,85,,85,,85,85,85,,,,85,85,85',
'85,85,85,,,,,85,,,,,,,,,,,,,,,,,,,,,,,,,,,,,85,85,,,,85,,85,138,85,',
'138,138,138,138,138,138,138,138,138,138,,,,,138,138,138,138,,,138,138',
'138,138,,,,,138,138,,138,,138,138,,138,,138,138,,,,,138,138,138,138',
'138,138,,,,,138,,,,,,,,,,,,,,,,,,,,,,,,,,,,,138,138,,,,138,,138,0,138',
',0,0,0,0,0,0,0,0,0,0,,,,,0,0,0,0,,,0,0,0,0,,,,,0,0,,0,,0,0,,0,,0,0,0',
',,,0,0,0,0,0,0,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,0,0,0,,0,,0,137,0',
',137,137,137,137,137,137,137,137,137,137,,,,,137,137,137,137,,,137,137',
'137,137,,,,,137,137,,137,,137,137,,137,,137,137,,,,,137,137,137,137',
'137,137,,,,,137,,,,,,,,,,,,,,,,,,,,,,,,,,,,,137,137,,,,137,,137,136',
'137,,136,136,136,136,136,136,136,136,136,136,,,,,136,136,136,136,,,136',
'136,136,136,,,,,136,136,,136,,136,136,,136,,136,136,,,,,136,136,136',
'136,136,136,,,,,136,,,,,,,,,,,,,,,,,,,,,,,,,,,,,136,136,,,,136,,136',
'134,136,,134,134,134,134,134,134,134,134,134,134,,,,,134,134,134,134',
',,134,134,134,134,,,,,134,134,,134,,134,134,,134,,134,134,,,,,134,134',
'134,134,134,134,,,,,134,,,,,,,,,,,,,,,,,,,,,,,,,,,,,134,134,,,,134,',
'134,133,134,,133,133,133,133,133,133,133,133,133,133,,,,,133,133,133',
'133,,,133,133,133,133,,,,,133,133,,133,,133,133,,133,,133,133,,,,,133',
'133,133,133,133,133,,,,,133,,,,,,,,,,,,,,,,,,,,,,,,,,,,,133,133,,,,133',
',133,132,133,,132,132,132,132,132,132,132,132,132,132,,,,,132,132,132',
'132,,,132,132,132,132,,,,,132,132,,132,,132,132,,132,,132,132,,,,,132',
'132,132,132,132,132,,,,,132,,,,,,,,,,,,,,,,,,,,,,,,,,,,,132,132,,,,132',
',132,93,132,,93,93,93,93,93,93,93,93,93,93,,,,,93,93,93,93,,,93,93,93',
'93,,,,,93,93,,93,,93,93,,93,,93,93,,,,,93,93,93,93,93,93,,,,,93,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,93,93,,,,93,,93,131,93,,131,131,131,131,131',
'131,131,131,131,131,,,,,131,131,131,131,,,131,131,131,131,,,,,131,131',
',131,,131,131,,131,,131,131,,,,,131,131,131,131,131,131,,,,,131,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,131,131,,,,131,,131,130,131,,130,130,130,130',
'130,130,130,130,130,130,,,,,130,130,130,130,,,130,130,130,130,,,,,130',
'130,,130,,130,130,,130,,130,130,,,,,130,130,130,130,130,130,,,,,130',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,130,130,,,,130,,130,129,130,,129,129,129',
'129,129,129,129,129,129,129,,,,,129,129,129,129,,,129,129,129,129,,',
',,129,129,,129,,129,129,,129,,129,129,,,,,129,129,129,129,129,129,,',
',,129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,129,129,,,,129,,129,99,129,,99,99',
'99,99,99,99,99,99,99,99,,,,,99,99,99,99,,,99,99,99,99,,,,,99,99,,99',
',99,99,,99,,99,99,,,,,99,99,99,99,99,99,,,,,99,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,99,99,,,,99,,99,126,99,,126,126,126,126,126,126,126,126,126,126',
',,,,126,126,126,126,,,126,126,126,126,,,,,126,126,,126,,126,126,,126',
',126,126,,,,,126,126,126,126,126,126,,,,,126,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,126,126,,,,126,,126,101,126,,101,101,101,101,101,101,101,101,101',
'101,,,,,101,101,101,101,,,101,101,101,101,,,,,101,101,,101,,101,101',
',101,,101,101,,,,,101,101,101,101,101,101,,,,,101,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,101,101,,,,101,,101,102,101,,102,102,102,102,102,102,102,102',
'102,102,,,,,102,102,102,102,,,102,102,102,102,,,,,102,102,,102,,102',
'102,,102,,102,102,,,,,102,102,102,102,102,102,,,,,102,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,102,102,,,,102,,102,103,102,,103,103,103,103,103,103,103',
'103,103,103,,,,,103,103,103,103,,,103,103,103,103,,,,,103,103,,103,',
'103,103,,103,,103,103,,,,,103,103,103,103,103,103,,,,,103,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,103,103,,,,103,,103,104,103,,104,104,104,104,104,104',
'104,104,104,104,,,,,104,104,104,104,,,104,104,104,104,,,,,104,104,,104',
',104,104,,104,,104,104,,,,,104,104,104,104,104,104,,,,,104,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,104,104,,,,104,,104,105,104,,105,105,105,105,105',
'105,105,105,105,105,,,,,105,105,105,105,,,105,105,105,105,,,,,105,105',
',105,,105,105,,105,,105,105,,,,,105,105,105,105,105,105,,,,,105,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,105,105,,,,105,,105,118,105,,118,118,118,118',
'118,118,118,118,118,118,,,,,118,118,118,118,,,118,118,118,118,,,,,118',
'118,,118,,118,118,,118,,118,118,,,,,118,118,118,118,118,118,,,,,118',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,118,118,,,,118,,118,107,118,,107,107,107',
'107,107,107,107,107,107,107,,,,,107,107,107,107,,,107,107,107,107,,',
',,107,107,,107,,107,107,,107,,107,107,,,,,107,107,107,107,107,107,,',
',,107,,,,,,,,,,,,,,,,,,,,,,,,,,,,,107,107,,,,107,,107,108,107,,108,108',
'108,108,108,108,108,108,108,108,,,,,108,108,108,108,,,108,108,108,108',
',,,,108,108,,108,,108,108,,108,,108,108,,,,,108,108,108,108,108,108',
',,,,108,,,,,,,,,,,,,,,,,,,,,,,,,,,,,108,108,,,,108,,108,109,108,,109',
'109,109,109,109,109,109,109,109,109,,,,,109,109,109,109,,,109,109,109',
'109,,,,,109,109,,109,,109,109,,109,,109,109,,,,,109,109,109,109,109',
'109,,,,,109,,,,,,,,,,,,,,,,,,,,,,,,,,,,,109,109,,,,109,,109,110,109',
',110,110,110,110,110,110,110,110,110,110,,,,,110,110,110,110,,,110,110',
'110,110,,,,,110,110,,110,,110,110,,110,,110,110,,,,,110,110,110,110',
'110,110,,,,,110,,,,,,,,,,,,,,,,,,,,,,,,,,,,,110,110,,,,110,,110,119',
'110,,119,119,119,119,119,119,119,119,119,119,,,,,119,119,119,119,,,119',
'119,119,119,,,,,119,119,,119,,119,119,,119,,119,119,,,,,119,119,119',
'119,119,119,,,,,119,,,,,,,,,,,,,,,,,,,,,,,,,,,,,119,119,,,,119,,119',
'112,119,,112,112,112,112,112,112,112,112,112,112,,,,,112,112,112,112',
',,112,112,112,112,,,,,112,112,,112,,112,112,,112,,112,112,,,,,112,112',
'112,112,112,112,,,,,112,,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,112,,,,112,',
'112,113,112,,113,113,113,113,113,113,113,113,113,113,,,,,113,113,113',
'113,,,113,113,113,113,,,,,113,113,,113,,113,113,,113,,113,113,,,,,113',
'113,113,113,113,113,,,,,113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,113,113,,,,113',
',113,114,113,,114,114,114,114,114,114,114,114,114,114,,,,,114,114,114',
'114,,,114,114,114,114,,,,,114,114,,114,,114,114,,114,,114,114,,,,,114',
'114,114,114,114,114,,,,,114,,,,,,,,,,,,,,,,,,,,,,,,,,,,,114,114,,,,114',
',114,115,114,,115,115,115,115,115,115,115,115,115,115,,,,,115,115,115',
'115,,,115,115,115,115,,,,,115,115,,115,,115,115,,115,,115,115,,,,,115',
'115,115,115,115,115,,,,,115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,115,115,,,,115',
',115,116,115,,116,116,116,116,116,116,116,116,116,116,,,,,116,116,116',
'116,,,116,116,116,116,,,,,116,116,,116,,116,116,,116,,116,116,,,,,116',
'116,116,116,116,116,,,,,116,,,,,,,,,,,,,,,,,,,,,,,,,,,,,116,116,,,,116',
',116,117,116,,117,117,117,117,117,117,117,117,117,117,,,,,117,117,117',
'117,,,117,117,117,117,,,,,117,117,,117,,117,117,,117,,117,117,,,,,117',
'117,117,117,117,117,,,,,117,,,,,,,,,,,,,,,,,,,,,,,,,,,,,117,117,,,,117',
',117,106,117,,106,106,106,106,106,106,106,106,106,106,,,,,106,106,106',
'106,,,106,106,106,106,,,,,106,106,,106,,106,106,,106,,106,106,,,,,106',
'106,106,106,106,106,,,,,106,153,153,153,153,153,153,153,153,153,153',
',,,,,,,,,,,153,153,,,,,,106,106,,,,106,,106,153,106,,153,,,240,,240',
',,,,,,,,,,,,,,,,,,,,,,,240,240,,,,240,,,,240,,,,,,,,,,240,153,,153,',
'153,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240',
'240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,,240,240',
'240,,,,,,,240,299,299,299,299,299,299,299,299,299,299,,,,,299,299,299',
'299,,,299,299,299,,,,,,,299,,299,,299,299,,299,,299,299,,,,,299,299',
'299,299,299,299,,,,,299,,,,,,,,,,,,,,,,,,,,,,,,,,,,,299,299,,,,299,',
'299,,299,11,11,11,11,11,11,11,11,11,11,,,,,11,11,11,11,,,11,11,11,11',
',,,,,11,,11,,11,11,,11,,11,11,,,,,11,11,11,11,11,11,300,,300,,11,,,5',
'5,5,5,5,5,5,5,5,5,,,,,,,,,,300,300,5,5,,300,,11,11,300,,,11,,11,,11',
'5,,300,5,,,,,300,300,300,300,300,300,300,300,300,300,300,300,300,300',
'300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300',
',300,300,300,305,,305,,,,300,,,5,,5,,5,,,,,,,,,,,,,305,305,,,,305,,',
',305,,,,,,,,,,305,,,,,,305,305,305,305,305,305,305,305,305,305,305,305',
'305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305',
'305,305,,305,305,305,162,,162,,,,305,,,,,,,,,,,,,,,,,,,,162,162,,,,162',
',,,162,,,,,,,,162,,162,,,,,,162,162,162,162,162,162,162,162,162,162',
'162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162',
'162,162,162,162,,162,162,162,308,,308,,,,,,,,,,,,,,,,,,,,,,,,308,308',
',,,308,,,,308,,,,,,,,,,308,,,,,,308,308,308,308,308,308,308,308,308',
'308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308',
'308,308,308,308,308,,308,308,308,209,,209,,,,,,,,,,,,,,,,,,,,,,,,209',
'209,,,,209,,,,209,,,,,,,,,,209,,,,,,209,209,209,209,209,209,209,209',
'209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209',
'209,209,209,209,209,209,,209,209,209,298,,298,,,,,,,,,,,,,,,,,,,,,,',
',298,298,,,,298,,,,298,,,,,,,,,,298,,,,,,298,298,298,298,298,298,298',
'298,298,298,298,298,298,298,298,298,298,298,298,298,298,298,298,298',
'298,298,298,298,298,298,298,,298,298,298,194,,194,,,,,,,,,,,,,,,,,,',
',,,,,194,194,,,,194,,,,194,,,,,,,,,,194,,,,,,194,194,194,194,194,194',
'194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194',
'194,194,194,194,194,194,194,194,,194,194,194,188,,188,,,,,,,,,,,,,,',
',,,,,,,,,188,188,,,,188,,,,188,,,,,,,,,,188,,,,,,188,188,188,188,188',
'188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188',
'188,188,188,188,188,188,188,188,188,,188,188,188,297,,297,,,,,,,,,,',
',,,,,,,,,,,,,297,297,,,,297,,,,297,,,,,,,,,,297,,,,,,297,297,297,297',
'297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297',
'297,297,297,297,297,297,297,297,297,297,,297,297,297,292,,292,,,,,,',
',,,,,,,,,,,,,,,,,292,292,,,,292,,,,292,,,,,,,,,,292,,,,,,292,292,292',
'292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292,292',
'292,292,292,292,292,292,292,292,292,292,292,,292,292,292,181,,181,,',
',,,,,,,,,,,,,,,,,,,,,181,181,,,,181,,,,181,,,,,,,,,,181,,,,,,181,181',
'181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181',
'181,181,181,181,181,181,181,181,181,181,181,181,,181,181,181,86,,86',
',,,,,,,,,,,,,,,,,,,,,,,86,86,,,,86,,,,86,,,,,,,,86,,86,,,,,,86,86,86',
'86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86',
'86,86,86,86,86,,86,86,86,171,,171,,,,,,,,,,,,,,,,,,,,,,,,171,171,,,',
'171,,,,171,,,,,,,,,,171,,,,,,171,171,171,171,171,171,171,171,171,171',
'171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171',
'171,171,171,171,,171,171,171,253,,253,,,,,,,,,,,,,,,,,,,,,,,,253,253',
',,,253,,,,253,,,,,,,,,,253,,,,,,253,253,253,253,253,253,253,253,253',
'253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253',
'253,253,253,253,253,,253,253,253,283,,283,,,,,,,,,,,,,,,,,,,,,,,,283',
'283,,,,283,,,,283,,,,,,,,,,283,,,,,,283,283,283,283,283,283,283,283',
'283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283',
'283,283,283,283,283,283,,283,283,283,164,,164,,,,,,,,,,,,,,,,,,,,,,',
',164,164,,,,164,,,,164,,,,,,,,164,,164,,,,,,164,164,164,164,164,164',
'164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164',
'164,164,164,164,164,164,164,164,,164,164,164,280,,280,,,,,,,,,,,,,,',
',,,,,,,,,280,280,,,,280,,,,280,,,,,,,,,,280,,,,,,280,280,280,280,280',
'280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280',
'280,280,280,280,280,280,280,280,280,,280,280,280,37,,37,,,,,,,,,,,,',
',,,,,,,,,,,37,37,,,,37,,,,37,,,,,,,,,,37,,,,,,37,37,37,37,37,37,37,37',
'37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37',
',37,37,37,260,,260,,,,,,,,,,,,,,,,,,,,,,,,260,260,,,,260,,,,260,,,,',
',,,,,260,,,,,,260,260,260,260,260,260,260,260,260,260,260,260,260,260',
'260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260',
',260,260,260,261,,261,,,,,,,,,,,,,,,,,,,,,,,,261,261,,,,261,,,,261,',
',,,,,,,,261,,,,,,261,261,261,261,261,261,261,261,261,261,261,261,261',
'261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261',
'261,,261,261,261,201,,201,,,,,,,,,,,,,,,,,,,,,,,,201,201,,,,201,,,,201',
',,,,,,,,,201,,,,,,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,,201,201,201,88,88,,,,,,,,88,,,,,,,,,,88,,,,,,88,88,88,88,88,88',
'88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88',
'88,88,,88,88,88,92,92,,,,,,,,92,,,,,,,,,,92,,,,,,92,92,92,92,92,92,92',
'92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92',
'92,227,227,,,,,,,,227,,,,,,,,,,227,,,,,,227,227,227,227,227,227,227',
'227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227',
'227,227,227,227,227,227,227,245,245,,,,,,,,245,,,,,,,,,,245,,,,,,245',
'245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245',
'245,245,245,245,245,245,245,245,245,245,245,245,245,230,230,,,,,,,,230',
',,,,,,,,,230,,,,,,230,230,230,230,230,230,230,230,230,230,230,230,230',
'230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230',
'230,224,224,,,,,,,,224,,,,,,,,,,224,,,,,,224,224,224,224,224,224,224',
'224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224',
'224,224,224,224,224,224,224,289,,,,,,,,289,,,,,,,,,,289,,,,,,289,289',
'289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289',
'289,289,289,289,289,289,289,289,289,289,289,289,268,,,,,,,,268,,,,,',
',,,,268,,,,,,268,268,268,268,268,268,268,268,268,268,268,268,268,268',
'268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268',
'267,,,,,,,,267,,,,,,,,,,267,,,,,,267,267,267,267,267,267,267,267,267',
'267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267',
'267,267,267,267,267,221,,,,,,,,221,,,,,,,,,,221,,,,,,221,221,221,221',
'221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221',
'221,221,221,221,221,221,221,221,221,221,288,,,,,,,,288,,,,,,,,,,288',
',,,,,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288',
'288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,82,,,,,',
',,,,82,,,,,,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82',
'82,82,82,82,82,82,82,82,82,82,82,172,,,,,,,,,,172,,,,,,172,172,172,172',
'172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172',
'172,172,172,172,172,172,172,172,172,210,,,,,,,,,,210,,,,,,210,210,210',
'210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210',
'210,210,210,210,210,210,210,210,210,210,198,,,,,,198,198,198,198,198',
'198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198',
'198,198,198,198,198,198,198,198,211,,,,,,211,211,211,211,211,211,211',
'211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211',
'211,211,211,211,211,211,214,,,,,,214,214,214,214,214,214,214,214,214',
'214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214,214',
'214,214,214,214,205,,,,,,205,205,205,205,205,205,205,205,205,205,205',
'205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205',
'205,205,202,,,,,,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202' ]
        racc_action_check = arr = Array.new(9843, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  4040,   220,   303,   280,   nil,  7106,   171,   nil,   nil,   562,
   656,  7049,   nil,   844,   209,   nil,   nil,   nil,   nil,   nil,
   nil,   204,  1126,   nil,   nil,   nil,   nil,   nil,   nil,   220,
  1314,   nil,   nil,   nil,   186,   113,   nil,  8564,   169,    37,
   nil,   256,   111,   nil,  2066,   nil,   nil,   nil,  2160,   nil,
   nil,   nil,   nil,  2254,   nil,   nil,   nil,  2348,   nil,  2442,
   nil,   nil,   nil,  2536,  2630,   nil,   nil,   nil,  2724,   nil,
   159,  2912,  3006,   nil,   nil,   195,   298,   nil,   313,     8,
   -41,   nil,  9488,    93,   162,  3852,  8048,    -2,  8882,   291,
   312,   246,  8942,  4604,    77,   nil,   nil,   158,   322,  4980,
    92,  5168,  5262,  5356,  5450,  5544,  6766,  5732,  5826,  5920,
  6014,    -2,  6202,  6296,  6390,  6484,  6578,  6672,  5638,  6108,
  3664,  1972,   301,   -50,   468,   374,  5074,   750,   938,  4886,
  4792,  4698,  4510,  4416,  4322,   nil,  4228,  4134,  3946,   nil,
   170,   191,   nil,   162,   nil,    -1,   nil,   nil,   nil,   135,
  3758,   120,   110,  6821,  3570,   nil,  3476,   nil,   nil,   179,
   461,   194,  7274,   273,  8392,   411,   438,   nil,   nil,   175,
  3382,  8134,  9534,    54,    92,   217,   126,   nil,  3288,  3194,
   111,  7962,   nil,   nil,   139,   183,   210,   nil,  7704,   nil,
   230,  3100,  2818,   -17,  7618,   946,  1134,   101,  9616,  1228,
   367,  8822,  9760,  1322,   344,  9724,   nil,  1416,  1341,  7446,
  9580,  9652,  1040,  1435,  9688,   382,   105,   337,   201,   664,
  1153,  9386,   758,  1247,  9166,   852,  1526,  8998,   476,  1510,
  9110,   570,   303,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
  6866,   nil,   nil,    73,   156,  9054,   172,   nil,   -13,   nil,
  1878,  1784,   nil,  8220,   -45,   nil,   nil,   nil,   nil,   237,
  8650,  8736,   nil,   -29,   nil,   -16,   nil,  9331,  9276,   nil,
  1690,  1596,   266,   nil,   nil,    27,  1502,   104,    31,   nil,
  8478,  1408,  1220,  8306,  1032,   nil,   nil,   nil,  9441,  9221,
   nil,    37,  7876,   nil,   197,   nil,   -22,  7790,  7532,  6956,
  7102,   264,   186,   249,   nil,  7188,   nil,   nil,  7360,   nil,
   nil ]

racc_action_default = [
    -1,  -100,  -118,  -181,   -17,  -181,  -181,   -18,  -126,  -181,
  -181,   -46,   -19,  -181,  -181,   -34,   -20,   -21,   -47,   -22,
   -28,  -181,  -181,   -23,   -29,    -2,   -30,   -31,   -32,    -3,
  -181,  -104,   -35,   -33,  -181,  -181,   -36,    -5,  -181,  -174,
   -37,    -8,  -181,    -9,  -181,   -98,   -38,   -10,  -181,  -105,
   -39,   -96,   -11,  -181,  -106,   -40,   -97,  -181,   -12,  -181,
  -107,  -103,   -26,  -181,  -181,  -108,   -27,   -13,  -181,   -14,
  -124,  -136,  -181,   -15,   -16,  -181,  -118,  -119,  -181,  -181,
  -181,   -44,   -56,  -181,  -125,  -136,  -181,  -181,   -45,   -50,
  -181,  -181,  -150,    -7,  -181,   -25,    -4,  -157,  -181,  -181,
  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,
  -181,   -93,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,
  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,
  -181,  -181,  -181,  -181,  -181,   -58,  -181,  -181,  -181,   -57,
  -181,  -181,  -172,  -174,  -176,  -181,  -178,  -114,  -128,  -181,
  -181,  -181,  -181,  -181,  -181,  -115,  -136,  -109,   -95,   -51,
   -48,   -49,  -153,   -52,  -181,   -54,   -53,  -129,  -110,  -181,
  -181,  -137,   -55,  -181,  -181,  -181,  -181,  -117,  -181,  -181,
  -181,  -137,  -170,  -151,  -181,  -181,  -146,   311,    -6,   -24,
  -181,  -181,  -181,  -181,  -154,   -81,   -70,   -59,   -83,   -71,
   -60,  -179,   -84,   -72,   -61,   -85,   -82,   -73,   -62,  -180,
   -91,   -86,   -74,   -63,   -87,   -75,   -64,  -181,  -181,   -76,
   -65,   -92,   -77,   -66,   -88,   -78,   -67,   -89,   -79,   -68,
   -90,   -80,   -69,   -94,   -99,  -173,  -177,  -171,  -175,  -111,
  -181,  -112,  -113,  -127,  -181,   -41,  -181,  -152,  -181,  -143,
  -181,  -181,  -135,  -138,  -181,  -101,  -123,  -121,  -120,  -181,
   -42,   -43,  -132,  -181,  -147,  -181,  -158,  -159,  -160,  -156,
  -181,  -181,  -155,  -102,  -116,  -130,  -181,  -181,  -181,  -165,
  -140,  -181,  -181,  -139,  -181,  -122,  -149,  -148,  -162,  -161,
  -131,  -181,  -144,  -163,  -181,  -166,  -181,  -141,  -142,  -102,
  -181,  -167,  -181,  -181,  -169,  -181,  -133,  -168,  -145,  -164,
  -134 ]

racc_goto_table = [
    25,    84,    83,   155,   167,   168,    82,   193,    98,   257,
   258,    78,    86,    87,    88,    81,    89,    21,   167,   168,
   279,   144,    29,   291,   186,    92,   277,   234,   237,    93,
   140,   143,   155,   290,    96,   146,   nil,   nil,   142,   nil,
   nil,   nil,   nil,   nil,   nil,   155,   155,   159,   nil,   295,
   nil,   160,    94,   nil,   nil,   nil,   161,   nil,   169,    34,
   162,   nil,   163,   nil,   nil,   nil,   164,   165,   304,   nil,
   nil,   166,   180,    90,   171,   172,   nil,   nil,   175,   nil,
   nil,   nil,   nil,   nil,   nil,   174,   nil,   nil,   181,    81,
   nil,   nil,   nil,   285,    93,   217,   188,   nil,   nil,   nil,
   nil,   158,   194,   195,   196,   197,   198,   199,   200,   201,
   202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
   212,   213,   214,   215,   216,   236,   272,   219,   220,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   nil,   230,
   231,   232,   235,   246,   nil,   182,   nil,   nil,   nil,   244,
   243,   nil,   nil,   240,   nil,   nil,   nil,   245,   nil,   181,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   253,   175,   nil,   259,   nil,   167,   168,
   nil,   260,   261,   nil,   nil,   nil,   nil,   nil,    81,    81,
   nil,   nil,   nil,   nil,   267,   268,   nil,   nil,   nil,   233,
   nil,   nil,   nil,   nil,   238,   155,   155,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   247,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   264,   nil,   nil,   nil,   nil,   nil,
   nil,   281,   269,   280,   283,   nil,   nil,   nil,   nil,   nil,
   nil,   278,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    81,   288,   289,   nil,   nil,   nil,   296,   292,
   nil,   nil,   nil,   nil,   297,   298,   nil,   300,   nil,   nil,
   278,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   307,   305,   nil,   nil,   308,   nil,   nil,   nil,   278,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   286,   nil,   287,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   301,   nil,   nil,   303 ]

racc_goto_check = [
     2,    32,     6,    30,    36,    31,     5,    41,    40,    23,
    23,    34,     5,     5,     5,    21,     5,     1,    36,    31,
    43,    47,     3,    38,    39,     5,    42,    26,    44,     2,
    25,    46,    30,     8,     2,    48,   nil,   nil,    45,   nil,
   nil,   nil,   nil,   nil,   nil,    30,    30,     5,   nil,    43,
   nil,     5,     3,   nil,   nil,   nil,     5,   nil,    37,     4,
     5,   nil,     5,   nil,   nil,   nil,     5,     5,    43,   nil,
   nil,     5,    37,     4,     5,     5,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,   nil,    34,   nil,   nil,     5,    21,
   nil,   nil,   nil,    23,     2,    40,     5,   nil,   nil,   nil,
   nil,     4,     5,     5,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     5,    47,    41,     5,     5,     5,
     5,     5,     5,     5,     5,     5,     5,     5,   nil,     5,
     5,     5,    45,    37,   nil,     4,   nil,   nil,   nil,    32,
     6,   nil,   nil,     5,   nil,   nil,   nil,     5,   nil,     5,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     5,     2,   nil,     2,   nil,    36,    31,
   nil,     5,     5,   nil,   nil,   nil,   nil,   nil,    21,    21,
   nil,   nil,   nil,   nil,     5,     5,   nil,   nil,   nil,     4,
   nil,   nil,   nil,   nil,     4,    30,    30,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,
   nil,     2,     4,     5,     5,   nil,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,     5,     5,   nil,   nil,   nil,     2,     5,
   nil,   nil,   nil,   nil,     5,     5,   nil,     5,   nil,   nil,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,     5,   nil,   nil,     5,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     4,   nil,     4,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     4,   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,    17,     0,    22,    59,     3,    -3,   nil,  -242,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    13,   nil,  -166,   nil,    -8,  -114,   nil,   nil,   nil,
   -38,   -65,    -4,   nil,     9,   nil,   -66,   -13,  -253,   -66,
   -27,   -91,  -222,  -228,  -117,    -1,    -8,   -18,    -4 ]

racc_goto_default = [
   nil,   nil,   250,   nil,   nil,    37,    41,    43,    47,    52,
    58,    67,    69,    73,    74,     4,     7,    12,    16,    17,
    19,    23,    31,    77,    38,    42,    45,    49,    54,    60,
    65,   157,    70,   147,   nil,     8,   148,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    39,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 100, :_reduce_1,
  1, 100, :_reduce_2,
  1, 100, :_reduce_3,
  2, 100, :_reduce_4,
  1, 102, :_reduce_5,
  3, 102, :_reduce_6,
  2, 102, :_reduce_7,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  1, 104, :_reduce_none,
  3, 103, :_reduce_24,
  2, 103, :_reduce_25,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 121, :_reduce_28,
  1, 121, :_reduce_29,
  1, 121, :_reduce_30,
  1, 121, :_reduce_31,
  1, 121, :_reduce_32,
  1, 121, :_reduce_33,
  1, 121, :_reduce_34,
  1, 121, :_reduce_35,
  1, 121, :_reduce_36,
  1, 121, :_reduce_37,
  1, 121, :_reduce_38,
  1, 121, :_reduce_39,
  1, 121, :_reduce_40,
  3, 109, :_reduce_41,
  3, 122, :_reduce_42,
  3, 122, :_reduce_43,
  1, 122, :_reduce_44,
  2, 113, :_reduce_45,
  1, 113, :_reduce_46,
  1, 120, :_reduce_47,
  2, 108, :_reduce_48,
  2, 108, :_reduce_49,
  2, 108, :_reduce_50,
  2, 108, :_reduce_51,
  2, 108, :_reduce_52,
  2, 108, :_reduce_53,
  2, 108, :_reduce_54,
  2, 108, :_reduce_55,
  2, 108, :_reduce_56,
  2, 108, :_reduce_57,
  2, 108, :_reduce_58,
  3, 108, :_reduce_59,
  3, 108, :_reduce_60,
  3, 108, :_reduce_61,
  3, 108, :_reduce_62,
  3, 108, :_reduce_63,
  3, 108, :_reduce_64,
  3, 108, :_reduce_65,
  3, 108, :_reduce_66,
  3, 108, :_reduce_67,
  3, 108, :_reduce_68,
  3, 108, :_reduce_69,
  3, 108, :_reduce_70,
  3, 108, :_reduce_71,
  3, 108, :_reduce_72,
  3, 108, :_reduce_73,
  3, 108, :_reduce_74,
  3, 108, :_reduce_75,
  3, 108, :_reduce_76,
  3, 108, :_reduce_77,
  3, 108, :_reduce_78,
  3, 108, :_reduce_79,
  3, 108, :_reduce_80,
  3, 108, :_reduce_81,
  3, 108, :_reduce_82,
  3, 108, :_reduce_83,
  3, 108, :_reduce_84,
  3, 108, :_reduce_85,
  3, 108, :_reduce_86,
  3, 108, :_reduce_87,
  3, 108, :_reduce_88,
  3, 108, :_reduce_89,
  3, 108, :_reduce_90,
  3, 108, :_reduce_91,
  3, 108, :_reduce_92,
  2, 119, :_reduce_93,
  3, 107, :_reduce_94,
  2, 107, :_reduce_95,
  1, 124, :_reduce_96,
  1, 124, :_reduce_97,
  1, 123, :_reduce_98,
  3, 123, :_reduce_99,
  1, 125, :_reduce_none,
  4, 125, :_reduce_101,
  4, 118, :_reduce_102,
  1, 105, :_reduce_103,
  1, 105, :_reduce_104,
  1, 105, :_reduce_105,
  1, 105, :_reduce_106,
  1, 105, :_reduce_107,
  1, 105, :_reduce_108,
  2, 105, :_reduce_109,
  2, 105, :_reduce_110,
  2, 130, :_reduce_111,
  2, 130, :_reduce_112,
  2, 130, :_reduce_113,
  1, 130, :_reduce_114,
  1, 130, :_reduce_115,
  3, 132, :_reduce_116,
  3, 127, :_reduce_117,
  0, 133, :_reduce_118,
  1, 133, :_reduce_119,
  3, 133, :_reduce_120,
  3, 133, :_reduce_121,
  4, 133, :_reduce_122,
  3, 133, :_reduce_123,
  1, 106, :_reduce_124,
  2, 106, :_reduce_125,
  1, 106, :_reduce_126,
  3, 117, :_reduce_127,
  2, 131, :_reduce_128,
  2, 131, :_reduce_129,
  3, 135, :_reduce_130,
  4, 135, :_reduce_131,
  4, 134, :_reduce_132,
  6, 129, :_reduce_133,
  7, 129, :_reduce_134,
  3, 126, :_reduce_135,
  0, 136, :_reduce_136,
  1, 136, :_reduce_137,
  2, 136, :_reduce_138,
  3, 136, :_reduce_139,
  3, 136, :_reduce_140,
  4, 136, :_reduce_141,
  4, 136, :_reduce_142,
  2, 136, :_reduce_143,
  1, 137, :_reduce_144,
  3, 137, :_reduce_145,
  3, 111, :_reduce_146,
  4, 111, :_reduce_147,
  5, 111, :_reduce_148,
  3, 138, :_reduce_149,
  2, 112, :_reduce_150,
  3, 128, :_reduce_151,
  3, 114, :_reduce_152,
  2, 114, :_reduce_153,
  3, 114, :_reduce_154,
  4, 115, :_reduce_155,
  4, 115, :_reduce_156,
  1, 139, :_reduce_157,
  3, 139, :_reduce_158,
  2, 140, :_reduce_159,
  2, 140, :_reduce_160,
  3, 140, :_reduce_161,
  3, 140, :_reduce_162,
  5, 116, :_reduce_163,
  7, 116, :_reduce_164,
  1, 141, :_reduce_165,
  2, 141, :_reduce_166,
  3, 142, :_reduce_167,
  4, 142, :_reduce_168,
  3, 142, :_reduce_169,
  3, 143, :_reduce_170,
  2, 144, :_reduce_171,
  1, 145, :_reduce_172,
  2, 145, :_reduce_173,
  0, 146, :_reduce_174,
  2, 146, :_reduce_175,
  1, 147, :_reduce_176,
  2, 147, :_reduce_177,
  2, 110, :_reduce_178,
  3, 110, :_reduce_179,
  3, 110, :_reduce_180 ]

racc_reduce_n = 181

racc_shift_n = 311

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :UNLESS => 4,
  :NUMBER => 5,
  :STRING => 6,
  :REGEX => 7,
  :TRUE => 8,
  :FALSE => 9,
  :YES => 10,
  :NO => 11,
  :ON => 12,
  :OFF => 13,
  :IDENTIFIER => 14,
  :PROPERTY_ACCESS => 15,
  :PROTOTYPE_ACCESS => 16,
  :SOAK_ACCESS => 17,
  :CODE => 18,
  :PARAM => 19,
  :NEW => 20,
  :RETURN => 21,
  :TRY => 22,
  :CATCH => 23,
  :FINALLY => 24,
  :THROW => 25,
  :BREAK => 26,
  :CONTINUE => 27,
  :FOR => 28,
  :IN => 29,
  :OF => 30,
  :BY => 31,
  :WHEN => 32,
  :WHILE => 33,
  :SWITCH => 34,
  :LEADING_WHEN => 35,
  :DELETE => 36,
  :INSTANCEOF => 37,
  :TYPEOF => 38,
  :SUPER => 39,
  :EXTENDS => 40,
  :ARGUMENTS => 41,
  :NEWLINE => 42,
  :COMMENT => 43,
  :JS => 44,
  :INDENT => 45,
  :OUTDENT => 46,
  "?" => 47,
  :UMINUS => 48,
  :NOT => 49,
  "!" => 50,
  "!!" => 51,
  "~" => 52,
  "++" => 53,
  "--" => 54,
  "*" => 55,
  "/" => 56,
  "%" => 57,
  "+" => 58,
  "-" => 59,
  "<<" => 60,
  ">>" => 61,
  ">>>" => 62,
  "&" => 63,
  "|" => 64,
  "^" => 65,
  "<=" => 66,
  "<" => 67,
  ">" => 68,
  ">=" => 69,
  "==" => 70,
  "!=" => 71,
  :IS => 72,
  :ISNT => 73,
  "&&" => 74,
  "||" => 75,
  :AND => 76,
  :OR => 77,
  "-=" => 78,
  "+=" => 79,
  "/=" => 80,
  "*=" => 81,
  "%=" => 82,
  "." => 83,
  :ASSIGN => 84,
  "||=" => 85,
  "&&=" => 86,
  "?=" => 87,
  "=>" => 88,
  "==>" => 89,
  "\n" => 90,
  ";" => 91,
  "," => 92,
  "[" => 93,
  "]" => 94,
  "{" => 95,
  "}" => 96,
  "(" => 97,
  ")" => 98 }

racc_nt_base = 99

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "UNLESS",
  "NUMBER",
  "STRING",
  "REGEX",
  "TRUE",
  "FALSE",
  "YES",
  "NO",
  "ON",
  "OFF",
  "IDENTIFIER",
  "PROPERTY_ACCESS",
  "PROTOTYPE_ACCESS",
  "SOAK_ACCESS",
  "CODE",
  "PARAM",
  "NEW",
  "RETURN",
  "TRY",
  "CATCH",
  "FINALLY",
  "THROW",
  "BREAK",
  "CONTINUE",
  "FOR",
  "IN",
  "OF",
  "BY",
  "WHEN",
  "WHILE",
  "SWITCH",
  "LEADING_WHEN",
  "DELETE",
  "INSTANCEOF",
  "TYPEOF",
  "SUPER",
  "EXTENDS",
  "ARGUMENTS",
  "NEWLINE",
  "COMMENT",
  "JS",
  "INDENT",
  "OUTDENT",
  "\"?\"",
  "UMINUS",
  "NOT",
  "\"!\"",
  "\"!!\"",
  "\"~\"",
  "\"++\"",
  "\"--\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\">>>\"",
  "\"&\"",
  "\"|\"",
  "\"^\"",
  "\"<=\"",
  "\"<\"",
  "\">\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "IS",
  "ISNT",
  "\"&&\"",
  "\"||\"",
  "AND",
  "OR",
  "\"-=\"",
  "\"+=\"",
  "\"/=\"",
  "\"*=\"",
  "\"%=\"",
  "\".\"",
  "ASSIGN",
  "\"||=\"",
  "\"&&=\"",
  "\"?=\"",
  "\"=>\"",
  "\"==>\"",
  "\"\\n\"",
  "\";\"",
  "\",\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Root",
  "Terminator",
  "Expressions",
  "Block",
  "Expression",
  "Value",
  "Call",
  "Code",
  "Operation",
  "Assign",
  "If",
  "Try",
  "Throw",
  "Return",
  "While",
  "For",
  "Switch",
  "Extends",
  "Splat",
  "Existence",
  "Comment",
  "Literal",
  "AssignObj",
  "ParamList",
  "FuncGlyph",
  "Param",
  "Array",
  "Object",
  "Parenthetical",
  "Range",
  "Accessor",
  "Invocation",
  "Index",
  "AssignList",
  "Super",
  "Arguments",
  "ArgList",
  "SimpleArgs",
  "Catch",
  "ForVariables",
  "ForSource",
  "Whens",
  "When",
  "IfBlock",
  "ElsIf",
  "ElsIfs",
  "ElseBody",
  "IfEnd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_1(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_2(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 51)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_5(val, _values, result)
     result = Expressions.wrap(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_6(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_24(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 86)
  def _reduce_25(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_28(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_29(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_30(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_31(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_32(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_33(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_34(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_35(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_36(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_37(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_38(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_39(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_40(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_41(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_42(val, _values, result)
     result = AssignNode.new(ValueNode.new(val[0]), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_43(val, _values, result)
     result = AssignNode.new(ValueNode.new(LiteralNode.new(val[0])), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 121)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 126)
  def _reduce_45(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 127)
  def _reduce_46(val, _values, result)
     result = ReturnNode.new(ValueNode.new(Value.new('null'))) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_47(val, _values, result)
     result = CommentNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_48(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 140)
  def _reduce_49(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_50(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_51(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_52(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_53(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_54(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 146)
  def _reduce_55(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_56(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_57(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_58(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_59(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_60(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 153)
  def _reduce_61(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_62(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_63(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_64(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_65(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_66(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_67(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_68(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_69(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_70(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_71(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_72(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_73(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_74(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_75(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_76(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_77(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_78(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_79(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_80(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_81(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_82(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_83(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_84(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_85(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_86(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_87(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 187)
  def _reduce_88(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 188)
  def _reduce_89(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 189)
  def _reduce_90(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_91(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 192)
  def _reduce_92(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 197)
  def _reduce_93(val, _values, result)
     result = ExistenceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_94(val, _values, result)
     result = CodeNode.new(val[0], val[2], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 203)
  def _reduce_95(val, _values, result)
     result = CodeNode.new([], val[1], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_96(val, _values, result)
     result = :func 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 209)
  def _reduce_97(val, _values, result)
     result = :boundfunc 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 214)
  def _reduce_98(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 215)
  def _reduce_99(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'grammar.y', 221)
  def _reduce_101(val, _values, result)
     result = SplatNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 226)
  def _reduce_102(val, _values, result)
     result = SplatNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 231)
  def _reduce_103(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 232)
  def _reduce_104(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_105(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_106(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 235)
  def _reduce_107(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_108(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 237)
  def _reduce_109(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 238)
  def _reduce_110(val, _values, result)
     result = ValueNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 243)
  def _reduce_111(val, _values, result)
     result = AccessorNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_112(val, _values, result)
     result = AccessorNode.new(val[1], :prototype) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_113(val, _values, result)
     result = AccessorNode.new(val[1], :soak) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_114(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 247)
  def _reduce_115(val, _values, result)
     result = SliceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_116(val, _values, result)
     result = IndexNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_117(val, _values, result)
     result = ObjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_118(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_119(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 264)
  def _reduce_120(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 265)
  def _reduce_121(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 267)
  def _reduce_122(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 268)
  def _reduce_123(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 273)
  def _reduce_124(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 274)
  def _reduce_125(val, _values, result)
     result = val[1].new_instance 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 275)
  def _reduce_126(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 280)
  def _reduce_127(val, _values, result)
     result = ExtendsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 285)
  def _reduce_128(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 286)
  def _reduce_129(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 291)
  def _reduce_130(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 292)
  def _reduce_131(val, _values, result)
     result = val[1] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 297)
  def _reduce_132(val, _values, result)
     result = CallNode.new(Value.new('super'), val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 303)
  def _reduce_133(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 305)
  def _reduce_134(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 310)
  def _reduce_135(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 315)
  def _reduce_136(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_137(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 317)
  def _reduce_138(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 318)
  def _reduce_139(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 319)
  def _reduce_140(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 320)
  def _reduce_141(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 321)
  def _reduce_142(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 322)
  def _reduce_143(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 327)
  def _reduce_144(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 328)
  def _reduce_145(val, _values, result)
     result = ([val[0]] << val[2]).flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 333)
  def _reduce_146(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_147(val, _values, result)
     result = TryNode.new(val[1], nil, nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 336)
  def _reduce_148(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 341)
  def _reduce_149(val, _values, result)
     result = [val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 346)
  def _reduce_150(val, _values, result)
     result = ThrowNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 351)
  def _reduce_151(val, _values, result)
     result = ParentheticalNode.new(val[1], val[0].line) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 356)
  def _reduce_152(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 357)
  def _reduce_153(val, _values, result)
     result = WhileNode.new(val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 358)
  def _reduce_154(val, _values, result)
     result = WhileNode.new(val[2], Expressions.wrap(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 365)
  def _reduce_155(val, _values, result)
     result = ForNode.new(val[0], val[3], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 366)
  def _reduce_156(val, _values, result)
     result = ForNode.new(val[3], val[2], val[1][0], val[1][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 371)
  def _reduce_157(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 372)
  def _reduce_158(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 377)
  def _reduce_159(val, _values, result)
     result = {:source => val[1]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 378)
  def _reduce_160(val, _values, result)
     result = {:source => val[1], :object => true} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 380)
  def _reduce_161(val, _values, result)
     result = val[0].merge(:filter => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 382)
  def _reduce_162(val, _values, result)
     result = val[0].merge(:step => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 388)
  def _reduce_163(val, _values, result)
     result = val[3].rewrite_condition(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 390)
  def _reduce_164(val, _values, result)
     result = val[3].rewrite_condition(val[1]).add_else(val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 395)
  def _reduce_165(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 396)
  def _reduce_166(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 401)
  def _reduce_167(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 403)
  def _reduce_168(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 404)
  def _reduce_169(val, _values, result)
     result = val[2].add_comment(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 409)
  def _reduce_170(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 414)
  def _reduce_171(val, _values, result)
     result = val[1].force_statement 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 419)
  def _reduce_172(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 420)
  def _reduce_173(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 425)
  def _reduce_174(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 426)
  def _reduce_175(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 431)
  def _reduce_176(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 432)
  def _reduce_177(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 437)
  def _reduce_178(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 438)
  def _reduce_179(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 439)
  def _reduce_180(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true, :invert => true}) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
