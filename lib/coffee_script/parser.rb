#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

module CoffeeScript

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 423)
  # Lex and parse a CoffeeScript.
  def parse(code)
    # Uncomment the following line to enable grammar debugging, in combination
    # with the -g flag in the Rake build task.
    # @yydebug = true
    @tokens = Lexer.new.tokenize(code)
    do_parse
  end

  # Retrieve the next token from the list.
  def next_token
    @tokens.shift
  end

  # Raise a custom error class that knows about line numbers.
  def on_error(error_token_id, error_value, value_stack)
    raise ParseError.new(token_to_str(error_token_id), error_value, value_stack)
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'100,230,108,21,23,26,31,34,37,46,50,56,59,96,161,68,72,249,250,96,-168',
'-168,160,24,27,112,123,126,129,95,99,19,140,101,96,139,224,4,19,253',
'14,123,126,96,42,51,231,12,232,12,123,126,129,95,99,104,107,111,114',
'116,119,122,125,128,94,98,103,106,110,113,115,118,121,124,127,93,97',
'102,105,109,131,131,117,120,38,19,131,244,75,131,66,7,71,240,21,23,26',
'31,34,37,46,50,56,59,132,131,68,72,1,3,8,7,257,18,24,27,30,249,250,252',
'47,52,168,62,19,69,73,161,4,267,12,14,84,181,19,160,161,40,44,49,54',
'58,61,64,160,131,96,6,131,135,96,242,19,-168,-168,130,130,123,126,134',
'134,130,12,169,130,134,42,51,134,172,173,12,42,51,236,38,42,51,225,60',
'130,66,7,71,134,21,23,26,31,34,37,46,50,56,59,96,230,68,72,1,3,8,-168',
'-168,18,24,27,30,42,51,230,47,52,224,62,19,69,73,276,4,130,12,14,130',
'134,68,72,134,40,44,49,54,58,61,64,96,42,51,6,42,51,231,123,126,129',
'95,99,268,253,234,96,42,51,42,51,231,12,-168,-168,275,96,247,235,42',
'51,236,38,-168,-168,237,60,175,66,7,71,19,21,23,26,31,34,37,46,50,56',
'59,82,19,68,72,1,3,8,161,217,18,24,27,30,84,142,160,47,52,288,62,161',
'69,73,96,4,142,12,14,160,,123,126,,40,44,49,54,58,61,64,96,,12,6,164',
'96,,-168,-168,,,96,-168,-168,,12,,164,123,126,129,95,99,104,107,111',
'114,116,119,122,125,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59',
',,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44',
'49,54,58,61,64,96,,,6,,,,123,126,129,95,99,104,107,111,114,116,119,122',
'125,128,94,98,103,106,110,113,115,,,,38,,,,60,,66,7,71,,21,23,26,31',
'34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4',
',12,14,,,,,,40,44,49,54,58,61,64,96,,,6,,,,123,126,129,95,99,104,107',
'111,114,116,119,122,125,128,94,98,103,106,110,113,115,,,,38,,,,60,,66',
'7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47',
'52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,96,,,6,,,,123,126',
'129,95,99,104,107,111,114,116,119,122,125,128,94,98,103,106,110,113',
'115,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3',
'8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61',
'64,96,,,6,,,,123,126,129,95,99,104,107,111,114,116,119,122,125,128,94',
'98,103,106,110,113,115,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50',
'56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,',
',40,44,49,54,58,61,64,96,,,6,,,,123,126,129,95,99,104,107,111,114,116',
'119,122,125,128,94,98,103,106,110,113,115,,,,38,,,,60,,66,7,71,,21,23',
'26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69',
'73,,4,,12,14,,,,,,40,44,49,54,58,61,64,96,,,6,,,,123,126,129,95,99,104',
'107,111,114,116,119,122,125,128,94,98,103,106,110,113,115,,,,38,,,,60',
',66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30',
',,,47,52,,62,,69,73,,4,,12,14,,91,,,,40,44,49,54,58,61,64,96,,,6,,,',
'123,126,129,95,99,104,107,111,114,116,119,122,125,128,94,98,103,106',
'110,113,115,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68',
'72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54',
'58,61,64,96,,,6,,,,123,126,129,95,99,104,107,111,114,116,119,122,125',
',,,,,,,278,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68',
'72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54',
'58,61,64,96,,,6,,,,123,126,129,95,99,104,107,111,114,116,119,122,125',
'128,94,98,103,106,110,113,115,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37',
'46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14',
',,,,,40,44,49,54,58,61,64,96,,,6,,,,123,126,129,95,99,104,107,111,114',
'116,119,122,125,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50',
'56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,',
',40,44,49,54,58,61,64,96,,,6,,,,123,126,129,95,99,104,107,111,114,116',
'119,122,125,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56',
'59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40',
'44,49,54,58,61,64,96,,,6,,,,123,126,129,95,99,104,107,111,114,116,96',
',,,,,,123,126,129,95,99,104,107,38,,,,60,,66,7,71,,21,23,26,31,34,37',
'46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14',
',,,,,40,44,49,54,58,61,64,96,,,6,,,,123,126,129,95,99,104,107,111,114',
'116,96,,,,,,,123,126,129,95,99,104,107,38,,,,60,,66,7,71,,21,23,26,31',
'34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4',
',12,14,,,,,,40,44,49,54,58,61,64,96,,,6,,,,123,126,129,95,99,104,107',
'111,114,116,96,,,,,,,123,126,129,95,99,104,107,38,,,,60,,66,7,71,,21',
'23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62',
',69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,',
',,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3',
'8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61',
'64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34',
'37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12',
'14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60',
',66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30',
',,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,',
',,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59',
',,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44',
'49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21',
'23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62',
',69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,',
',,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3',
'8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61',
'64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34',
'37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12',
'14,153,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,',
',,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27',
'30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,',
',,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56',
'59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40',
'44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71',
',21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52',
',62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,',
',,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72',
'1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,259,,,,,40,44,49,54',
'58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,42,51,,60,,66,7,71,,21,23',
'26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69',
'73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,',
',,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,',
'18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64',
',,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37',
'46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14',
',,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,',
'66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,',
',,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,',
',,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59',
',,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,153,,,,,40',
'44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71',
',21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52',
',62,,69,73,,4,,12,14,153,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,',
',,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68',
'72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,19,,,,,40,44,49',
'54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,42,51,,60,,66,7,71,,21',
'23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62',
',69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,',
',,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3',
'8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61',
'64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34',
'37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12',
'14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60',
',66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30',
',,,47,52,,62,,69,73,,4,,12,14,153,,,,,40,44,49,54,58,61,64,,,,6,,,,',
',,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56',
'59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40',
'44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71',
',21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52',
',62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,',
',,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72',
'1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58',
'61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31',
'34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4',
',12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38',
',,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24',
'27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,',
',,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50',
'56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,',
',40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7',
'71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47',
'52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,',
',,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68',
'72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54',
'58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26',
'31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73',
',4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18',
'24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,',
'6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46',
'50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,',
',,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66',
'7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47',
'52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,',
',,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68',
'72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54',
'58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26',
'31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73',
',4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18',
'24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,',
'6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46',
'50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,',
',,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66',
'7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47',
'52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,',
',,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68',
'72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54',
'58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26',
'31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73',
',4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18',
'24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,',
'6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46',
'50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,',
',,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66',
'7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47',
'52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,',
',,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68',
'72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54',
'58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26',
'31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73',
',4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18',
'24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,',
'6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46',
'50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,',
',,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66',
'7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47',
'52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,',
',,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68',
'72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,,,,40,44,49,54',
'58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,,,60,,66,7,71,,21,23,26',
'31,34,37,46,50,56,59,,,68,72,1,3,8,,,18,24,27,30,,,,47,52,,62,,69,73',
',4,,12,14,,,,,,40,44,49,54,58,61,64,,,,6,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'38,,,,60,,66,7,71,,21,23,26,31,34,37,46,50,56,59,,,68,72,1,3,8,,,18',
'24,27,30,,,,47,52,,62,,69,73,,4,,12,14,,,100,,108,40,44,49,54,58,61',
'64,,,,6,,,,,,,,,,,,112,,,,,,,,101,,,,,,,,38,,96,,60,,66,,71,123,126',
'129,95,99,104,107,111,114,116,119,122,125,128,94,98,103,106,110,113',
'115,118,121,124,127,93,97,102,105,109,229,,117,120,,,,,,246,21,23,26',
'31,34,37,46,50,56,59,,,,,,,,,,,24,27,,,,,,,,,,,,,4,,,14,,,100,,108,21',
'23,26,31,34,37,46,50,56,59,,,,,,,,,,,24,27,112,,,,,,,,101,,,,4,,,14',
',,96,,75,,66,,71,123,126,129,95,99,104,107,111,114,116,119,122,125,128',
'94,98,103,106,110,113,115,118,121,124,127,93,97,102,105,109,,,117,120',
'100,,108,,75,286,66,,71,,,,,,,,,,,,,,,,,112,,,,,,,,101,,,,,,,,,,96,',
',,,,,123,126,129,95,99,104,107,111,114,116,119,122,125,128,94,98,103',
'106,110,113,115,118,121,124,127,93,97,102,105,109,,,117,120,100,,108',
',,289,,,,,,,,,,,,,,,,,,,,112,,,,,,,,101,,,,,,,,,,96,,,,,,,123,126,129',
'95,99,104,107,111,114,116,119,122,125,128,94,98,103,106,110,113,115',
'118,121,124,127,93,97,102,105,109,229,,117,120,100,,108,,,,,,,,,,,,',
',,,,,,,,,,112,,,,,,,,101,,,,,,,,,,96,,,,,,,123,126,129,95,99,104,107',
'111,114,116,119,122,125,128,94,98,103,106,110,113,115,118,121,124,127',
'93,97,102,105,109,,,117,120,100,,108,,,,,,,,,,,,,,,,,,,,,,,112,,,,,',
',,101,,,,,,,,,,96,,,,,,,123,126,129,95,99,104,107,111,114,116,119,122',
'125,128,94,98,103,106,110,113,115,118,121,124,127,93,97,102,105,109',
',,117,120,100,,108,,,,,,,,,,,,,,,,,,,,,,,112,,,,,,,,101,,,,,,,,,,96',
',,,,,,123,126,129,95,99,104,107,111,114,116,119,122,125,128,94,98,103',
'106,110,113,115,118,121,124,127,93,97,102,105,109,,,117,120,100,,108',
',,,,,,,,,,,,,,,,,,,,,,112,,,,,,,,101,,,,,,,,,,96,,,,,,,123,126,129,95',
'99,104,107,111,114,116,119,122,125,128,94,98,103,106,110,113,115,118',
'121,124,127,93,97,102,105,109,,,117,120,100,,108,,,,,,,,,,,,,,,,,,,',
',,,112,,,,,,,,101,,,,,,,,,,96,,,,,,,123,126,129,95,99,104,107,111,114',
'116,119,122,125,128,94,98,103,106,110,113,115,118,121,124,127,93,97',
'102,105,109,,,117,120,100,,108,,,,,,,,,,,,,,,,,,,,,,,112,,,,,,,,101',
',,,,,,,19,,96,,,,,,,123,126,129,95,99,104,107,111,114,116,119,122,125',
'128,94,98,103,106,110,113,115,118,121,124,127,93,97,102,105,109,,,117',
'120,100,,108,,,,,,,,,,,,,,,,,,,,,,,112,,,,,,,,101,,,,,,,,,,96,,,,,,',
'123,126,129,95,99,104,107,111,114,116,119,122,125,128,94,98,103,106',
'110,113,115,118,121,124,127,93,97,102,105,109,,,117,120,100,,108,,,',
',,,,,,,,,,,,,,,,,,,112,,,,,,,,101,,,,,,,,19,,96,,,,,,,123,126,129,95',
'99,104,107,111,114,116,119,122,125,128,94,98,103,106,110,113,115,118',
'121,124,127,93,97,102,105,109,,,117,120,100,,108,,,,,,,,,,,,,,,,,,,',
',,,112,,,,,,,,101,,,,,,,,,,96,,,,,,,123,126,129,95,99,104,107,111,114',
'116,119,122,125,128,94,98,103,106,110,113,115,118,121,124,127,93,97',
'102,105,109,,,117,120,100,,108,,,,,,,,,,,,,,,,,,,,,,,112,,,,,,,,101',
',,,,,,,,,96,,,,,,,123,126,129,95,99,104,107,111,114,116,119,122,125',
'128,94,98,103,106,110,113,115,118,121,124,127,93,97,102,105,109,,,117',
'120,100,,108,,,,,,,,,,,,,,,,,,,,,,,112,,,,,,,,101,,,,,,,,,,96,,,,,,',
'123,126,129,95,99,104,107,111,114,116,119,122,125,128,94,98,103,106',
'110,113,115,118,121,124,127,93,97,102,105,109,,,117,120,100,,108,,,',
',,,,,,,,,,,,,,,,,,,112,,,,,,,,101,,,,,,,,,,96,,,,,,,123,126,129,95,99',
'104,107,111,114,116,119,122,125,128,94,98,103,106,110,113,115,118,121',
'124,127,93,97,102,105,109,,,117,120,100,,108,,,,,,,,,,,,,,,,,,,,,,,112',
',,,,,,,101,,,,,,,,,,96,,,,,,,123,126,129,95,99,104,107,111,114,116,119',
'122,125,128,94,98,103,106,110,113,115,118,121,124,127,93,97,102,105',
'109,,,117,120,100,,108,,,,,,,,,,,,,,,,,,,,,,,112,,,,,,,,101,,,,,,,,',
',96,,,,,,,123,126,129,95,99,104,107,111,114,116,119,122,125,128,94,98',
'103,106,110,113,115,118,121,124,127,93,97,102,105,109,,,117,120,100',
',108,,,,,,,,,,,,,,,,,,,,,,,112,,,,,,,,101,,,,,,,,19,,96,,,,,,,123,126',
'129,95,99,104,107,111,114,116,119,122,125,128,94,98,103,106,110,113',
'115,118,121,124,127,93,97,102,105,109,,,117,120,100,,108,,,,,,,,,,,',
',,,,,,,,,,,112,,,,,,,,101,,,,,,,,,,96,,,,,,,123,126,129,95,99,104,107',
'111,114,116,119,122,125,128,94,98,103,106,110,113,115,118,121,124,127',
'93,97,102,105,109,,,117,120,100,,108,,,,,,,,,,,,,,,,,,,,,,,112,,,,,',
',,101,,,,,,,,227,,96,,,,,,,123,126,129,95,99,104,107,111,114,116,119',
'122,125,128,94,98,103,106,110,113,115,118,121,124,127,93,97,102,105',
'109,112,,117,120,,,,,101,,,,,,,,,,96,,,,,,,123,126,129,95,99,104,107',
'111,114,116,119,122,125,128,94,98,103,106,110,113,115,118,121,124,127',
'93,97,102,105,109,112,,,,,,,,101,,,,,,,,,,96,,,,,,,123,126,129,95,99',
'104,107,111,114,116,119,122,125,128,94,98,103,106,110,113,115,118,121',
'124,127,93,97,102,105,109,112,,,,,,,,101,,,,,,,,,,96,,,,,,,123,126,129',
'95,99,104,107,111,114,116,119,122,125,128,94,98,103,106,110,113,115',
'118,121,124,127,93,97,102,105,109,112,,,,,,,,101,,,,,,,,,,96,,,,,,,123',
'126,129,95,99,104,107,111,114,116,119,122,125,128,94,98,103,106,110',
'113,115,118,121,124,127,93,97,102,105,109,101,,,,,,,,,,96,,,,,,,123',
'126,129,95,99,104,107,111,114,116,119,122,125,128,94,98,103,106,110',
'113,115,118,121,124,127,93,97,102,105,109,101,,,,,,,,,,96,,,,,,,123',
'126,129,95,99,104,107,111,114,116,119,122,125,128,94,98,103,106,110',
'113,115,118,121,124,127,93,97,102,105,109,101,,,,,,,,,,96,,,,,,,123',
'126,129,95,99,104,107,111,114,116,119,122,125,128,94,98,103,106,110',
'113,115,118,121,124,127,93,97,102,105,109,101,,,,,,,,,,96,,,,,,,123',
'126,129,95,99,104,107,111,114,116,119,122,125,128,94,98,103,106,110',
'113,115,118,121,124,127,93,97,102,105,109,101,,,,,,,,,,96,,,,,,,123',
'126,129,95,99,104,107,111,114,116,119,122,125,128,94,98,103,106,110',
'113,115,118,121,124,127,93,97,102,105,109,101,,,,,,,,,,96,,,,,,,123',
'126,129,95,99,104,107,111,114,116,119,122,125,128,94,98,103,106,110',
'113,115,118,121,124,127,93,97,102,105,109,96,,,,,,,123,126,129,95,99',
'104,107,111,114,116,119,122,125,128,94,98,103,106,110,113,115,118,121',
'124,127,93,97,102,105,109,96,,,,,,,123,126,129,95,99,104,107,111,114',
'116,119,122,125,128,94,98,103,106,110,113,115,118,121,124,127,93,97',
'102,105,109,96,,,,,,,123,126,129,95,99,104,107,111,114,116,119,122,125',
'128,94,98,103,106,110,113,115,118,121,124,127,93,97,102,105,109,96,',
',,,,,123,126,129,95,99,104,107,111,114,116,119,122,125,128,94,98,103',
'106,110,113,115,118,121,124,127,93,97,102,105,109,96,,,,,,,123,126,129',
'95,99,104,107,111,114,116,119,122,125,128,94,98,103,106,110,113,115',
'118,121,124,127,93,97,102,105,109' ]
        racc_action_table = arr = Array.new(8906, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'167,155,167,132,132,132,132,132,132,132,132,132,132,149,264,247,247',
'223,223,195,149,149,264,132,132,167,195,195,195,195,195,223,29,167,215',
'29,200,132,38,227,132,215,215,167,155,155,155,227,155,264,167,167,167',
'167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167',
'167,167,167,167,167,167,167,167,167,167,76,28,167,167,247,173,77,174',
'132,55,132,99,132,167,99,99,99,99,99,99,99,99,99,99,28,218,99,99,99',
'99,99,84,229,99,99,99,99,245,245,225,99,99,72,99,244,99,99,236,99,239',
'99,99,17,90,242,236,238,99,99,99,99,99,99,99,238,158,144,99,159,28,187',
'172,84,144,144,76,28,187,187,76,28,77,236,73,55,77,283,283,55,81,81',
'238,239,239,239,99,90,90,142,99,218,99,3,99,218,3,3,3,3,3,3,3,3,3,3',
'147,241,3,3,3,3,3,147,147,3,3,3,3,236,236,219,3,3,141,3,140,3,3,254',
'3,158,3,3,159,158,139,139,159,3,3,3,3,3,3,3,192,16,16,3,241,241,241',
'192,192,192,192,192,241,254,160,145,22,22,219,219,219,254,145,145,254',
'156,219,161,162,162,162,3,156,156,162,3,82,3,6,3,276,6,6,6,6,6,6,6,6',
'6,6,9,8,6,6,6,6,6,66,131,6,6,6,6,86,30,66,6,6,284,6,164,6,6,184,6,112',
'6,6,164,,184,184,,6,6,6,6,6,6,6,152,,66,6,66,79,,152,152,,,186,79,79',
',164,,164,186,186,186,186,186,186,186,186,186,186,186,186,186,6,,,,6',
',6,7,6,,7,7,7,7,7,7,7,7,7,7,,,7,7,7,7,7,,,7,7,7,7,,,,7,7,,7,,7,7,,7',
',7,7,,,,,,7,7,7,7,7,7,7,198,,,7,,,,198,198,198,198,198,198,198,198,198',
'198,198,198,198,198,198,198,198,198,198,198,198,,,,7,,,,7,,7,121,7,',
'121,121,121,121,121,121,121,121,121,121,,,121,121,121,121,121,,,121',
'121,121,121,,,,121,121,,121,,121,121,,121,,121,121,,,,,,121,121,121',
'121,121,121,121,209,,,121,,,,209,209,209,209,209,209,209,209,209,209',
'209,209,209,209,209,209,209,209,209,209,209,,,,121,,,,121,,121,278,121',
',278,278,278,278,278,278,278,278,278,278,,,278,278,278,278,278,,,278',
'278,278,278,,,,278,278,,278,,278,278,,278,,278,278,,,,,,278,278,278',
'278,278,278,278,206,,,278,,,,206,206,206,206,206,206,206,206,206,206',
'206,206,206,206,206,206,206,206,206,206,206,,,,278,,,,278,,278,259,278',
',259,259,259,259,259,259,259,259,259,259,,,259,259,259,259,259,,,259',
'259,259,259,,,,259,259,,259,,259,259,,259,,259,259,,,,,,259,259,259',
'259,259,259,259,203,,,259,,,,203,203,203,203,203,203,203,203,203,203',
'203,203,203,203,203,203,203,203,203,203,203,,,,259,,,,259,,259,258,259',
',258,258,258,258,258,258,258,258,258,258,,,258,258,258,258,258,,,258',
'258,258,258,,,,258,258,,258,,258,258,,258,,258,258,,,,,,258,258,258',
'258,258,258,258,211,,,258,,,,211,211,211,211,211,211,211,211,211,211',
'211,211,211,211,211,211,211,211,211,211,211,,,,258,,,,258,,258,18,258',
',18,18,18,18,18,18,18,18,18,18,,,18,18,18,18,18,,,18,18,18,18,,,,18',
'18,,18,,18,18,,18,,18,18,,,,,,18,18,18,18,18,18,18,201,,,18,,,,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,201,,,,18,,,,18,,18,19,18,,19,19,19,19,19,19,19,19,19,19,,,19,19',
'19,19,19,,,19,19,19,19,,,,19,19,,19,,19,19,,19,,19,19,,19,,,,19,19,19',
'19,19,19,19,194,,,19,,,,194,194,194,194,194,194,194,194,194,194,194',
'194,194,194,194,194,194,194,194,194,194,,,,19,,,,19,,19,257,19,,257',
'257,257,257,257,257,257,257,257,257,,,257,257,257,257,257,,,257,257',
'257,257,,,,257,257,,257,,257,257,,257,,257,257,,,,,,257,257,257,257',
'257,257,257,214,,,257,,,,214,214,214,214,214,214,214,214,214,214,214',
'214,214,,,,,,,,257,,,,257,,,,257,,257,253,257,,253,253,253,253,253,253',
'253,253,253,253,,,253,253,253,253,253,,,253,253,253,253,,,,253,253,',
'253,,253,253,,253,,253,253,,,,,,253,253,253,253,253,253,253,213,,,253',
',,,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,213',
'213,213,213,213,,,,253,,,,253,,253,250,253,,250,250,250,250,250,250',
'250,250,250,250,,,250,250,250,250,250,,,250,250,250,250,,,,250,250,',
'250,,250,250,,250,,250,250,,,,,,250,250,250,250,250,250,250,183,,,250',
',,,183,183,183,183,183,183,183,183,183,183,183,183,183,,,,,,,,,,,,250',
',,,250,,250,249,250,,249,249,249,249,249,249,249,249,249,249,,,249,249',
'249,249,249,,,249,249,249,249,,,,249,249,,249,,249,249,,249,,249,249',
',,,,,249,249,249,249,249,249,249,191,,,249,,,,191,191,191,191,191,191',
'191,191,191,191,191,191,191,,,,,,,,,,,,249,,,,249,,249,235,249,,235',
'235,235,235,235,235,235,235,235,235,,,235,235,235,235,235,,,235,235',
'235,235,,,,235,235,,235,,235,235,,235,,235,235,,,,,,235,235,235,235',
'235,235,235,207,,,235,,,,207,207,207,207,207,207,207,207,207,207,204',
',,,,,,204,204,204,204,204,204,204,235,,,,235,,235,234,235,,234,234,234',
'234,234,234,234,234,234,234,,,234,234,234,234,234,,,234,234,234,234',
',,,234,234,,234,,234,234,,234,,234,234,,,,,,234,234,234,234,234,234',
'234,212,,,234,,,,212,212,212,212,212,212,212,212,212,212,199,,,,,,,199',
'199,199,199,199,199,199,234,,,,234,,234,40,234,,40,40,40,40,40,40,40',
'40,40,40,,,40,40,40,40,40,,,40,40,40,40,,,,40,40,,40,,40,40,,40,,40',
'40,,,,,,40,40,40,40,40,40,40,210,,,40,,,,210,210,210,210,210,210,210',
'210,210,210,202,,,,,,,202,202,202,202,202,202,202,40,,,,40,,40,44,40',
',44,44,44,44,44,44,44,44,44,44,,,44,44,44,44,44,,,44,44,44,44,,,,44',
'44,,44,,44,44,,44,,44,44,,,,,,44,44,44,44,44,44,44,,,,44,,,,,,,,,,,',
',,,,,,,,,,,,,,,,44,,,,44,,44,47,44,,47,47,47,47,47,47,47,47,47,47,,',
'47,47,47,47,47,,,47,47,47,47,,,,47,47,,47,,47,47,,47,,47,47,,,,,,47',
'47,47,47,47,47,47,,,,47,,,,,,,,,,,,,,,,,,,,,,,,,,,,47,,,,47,,47,49,47',
',49,49,49,49,49,49,49,49,49,49,,,49,49,49,49,49,,,49,49,49,49,,,,49',
'49,,49,,49,49,,49,,49,49,,,,,,49,49,49,49,49,49,49,,,,49,,,,,,,,,,,',
',,,,,,,,,,,,,,,,49,,,,49,,49,52,49,,52,52,52,52,52,52,52,52,52,52,,',
'52,52,52,52,52,,,52,52,52,52,,,,52,52,,52,,52,52,,52,,52,52,,,,,,52',
'52,52,52,52,52,52,,,,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,52,,,,52,,52,54,52',
',54,54,54,54,54,54,54,54,54,54,,,54,54,54,54,54,,,54,54,54,54,,,,54',
'54,,54,,54,54,,54,,54,54,,,,,,54,54,54,54,54,54,54,,,,54,,,,,,,,,,,',
',,,,,,,,,,,,,,,,54,,,,54,,54,233,54,,233,233,233,233,233,233,233,233',
'233,233,,,233,233,233,233,233,,,233,233,233,233,,,,233,233,,233,,233',
'233,,233,,233,233,,,,,,233,233,233,233,233,233,233,,,,233,,,,,,,,,,',
',,,,,,,,,,,,,,,,,233,,,,233,,233,58,233,,58,58,58,58,58,58,58,58,58',
'58,,,58,58,58,58,58,,,58,58,58,58,,,,58,58,,58,,58,58,,58,,58,58,,,',
',,58,58,58,58,58,58,58,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,58,,,,58,,58',
'60,58,,60,60,60,60,60,60,60,60,60,60,,,60,60,60,60,60,,,60,60,60,60',
',,,60,60,,60,,60,60,,60,,60,60,60,,,,,60,60,60,60,60,60,60,,,,60,,,',
',,,,,,,,,,,,,,,,,,,,,,,,60,,,,60,,60,61,60,,61,61,61,61,61,61,61,61',
'61,61,,,61,61,61,61,61,,,61,61,61,61,,,,61,61,,61,,61,61,,61,,61,61',
',,,,,61,61,61,61,61,61,61,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,61,,,,61',
',61,62,61,,62,62,62,62,62,62,62,62,62,62,,,62,62,62,62,62,,,62,62,62',
'62,,,,62,62,,62,,62,62,,62,,62,62,,,,,,62,62,62,62,62,62,62,,,,62,,',
',,,,,,,,,,,,,,,,,,,,,,,,,62,,,,62,,62,120,62,,120,120,120,120,120,120',
'120,120,120,120,,,120,120,120,120,120,,,120,120,120,120,,,,120,120,',
'120,,120,120,,120,,120,120,,,,,,120,120,120,120,120,120,120,,,,120,',
',,,,,,,,,,,,,,,,,,,,,,,,,,120,,,,120,,120,231,120,,231,231,231,231,231',
'231,231,231,231,231,,,231,231,231,231,231,,,231,231,231,231,,,,231,231',
',231,,231,231,,231,,231,231,231,,,,,231,231,231,231,231,231,231,,,,231',
',,,,,,,,,,,,,,,,,,,,,,,,,,,231,231,231,,231,,231,69,231,,69,69,69,69',
'69,69,69,69,69,69,,,69,69,69,69,69,,,69,69,69,69,,,,69,69,,69,,69,69',
',69,,69,69,,,,,,69,69,69,69,69,69,69,,,,69,,,,,,,,,,,,,,,,,,,,,,,,,',
',,69,,,,69,,69,71,69,,71,71,71,71,71,71,71,71,71,71,,,71,71,71,71,71',
',,71,71,71,71,,,,71,71,,71,,71,71,,71,,71,71,,,,,,71,71,71,71,71,71',
'71,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,71,,,,71,,71,224,71,,224,224,224',
'224,224,224,224,224,224,224,,,224,224,224,224,224,,,224,224,224,224',
',,,224,224,,224,,224,224,,224,,224,224,,,,,,224,224,224,224,224,224',
'224,,,,224,,,,,,,,,,,,,,,,,,,,,,,,,,,,224,,,,224,,224,119,224,,119,119',
'119,119,119,119,119,119,119,119,,,119,119,119,119,119,,,119,119,119',
'119,,,,119,119,,119,,119,119,,119,,119,119,,,,,,119,119,119,119,119',
'119,119,,,,119,,,,,,,,,,,,,,,,,,,,,,,,,,,,119,,,,119,,119,75,119,,75',
'75,75,75,75,75,75,75,75,75,,,75,75,75,75,75,,,75,75,75,75,,,,75,75,',
'75,,75,75,,75,,75,75,75,,,,,75,75,75,75,75,75,75,,,,75,,,,,,,,,,,,,',
',,,,,,,,,,,,,,75,,,,75,,75,169,75,,169,169,169,169,169,169,169,169,169',
'169,,,169,169,169,169,169,,,169,169,169,169,,,,169,169,,169,,169,169',
',169,,169,169,169,,,,,169,169,169,169,169,169,169,,,,169,,,,,,,,,,,',
',,,,,,,,,,,,,,,,169,,,,169,,169,0,169,,0,0,0,0,0,0,0,0,0,0,,,0,0,0,0',
'0,,,0,0,0,0,,,,0,0,,0,,0,0,,0,,0,0,0,,,,,0,0,0,0,0,0,0,,,,0,,,,,,,,',
',,,,,,,,,,,,,,,,,,,0,0,0,,0,,0,124,0,,124,124,124,124,124,124,124,124',
'124,124,,,124,124,124,124,124,,,124,124,124,124,,,,124,124,,124,,124',
'124,,124,,124,124,,,,,,124,124,124,124,124,124,124,,,,124,,,,,,,,,,',
',,,,,,,,,,,,,,,,,124,,,,124,,124,153,124,,153,153,153,153,153,153,153',
'153,153,153,,,153,153,153,153,153,,,153,153,153,153,,,,153,153,,153',
',153,153,,153,,153,153,,,,,,153,153,153,153,153,153,153,,,,153,,,,,',
',,,,,,,,,,,,,,,,,,,,,,153,,,,153,,153,135,153,,135,135,135,135,135,135',
'135,135,135,135,,,135,135,135,135,135,,,135,135,135,135,,,,135,135,',
'135,,135,135,,135,,135,135,,,,,,135,135,135,135,135,135,135,,,,135,',
',,,,,,,,,,,,,,,,,,,,,,,,,,135,,,,135,,135,134,135,,134,134,134,134,134',
'134,134,134,134,134,,,134,134,134,134,134,,,134,134,134,134,,,,134,134',
',134,,134,134,,134,,134,134,134,,,,,134,134,134,134,134,134,134,,,,134',
',,,,,,,,,,,,,,,,,,,,,,,,,,,134,,,,134,,134,118,134,,118,118,118,118',
'118,118,118,118,118,118,,,118,118,118,118,118,,,118,118,118,118,,,,118',
'118,,118,,118,118,,118,,118,118,,,,,,118,118,118,118,118,118,118,,,',
'118,,,,,,,,,,,,,,,,,,,,,,,,,,,,118,,,,118,,118,83,118,,83,83,83,83,83',
'83,83,83,83,83,,,83,83,83,83,83,,,83,83,83,83,,,,83,83,,83,,83,83,,83',
',83,83,,,,,,83,83,83,83,83,83,83,,,,83,,,,,,,,,,,,,,,,,,,,,,,,,,,,83',
',,,83,,83,130,83,,130,130,130,130,130,130,130,130,130,130,,,130,130',
'130,130,130,,,130,130,130,130,,,,130,130,,130,,130,130,,130,,130,130',
',,,,,130,130,130,130,130,130,130,,,,130,,,,,,,,,,,,,,,,,,,,,,,,,,,,130',
',,,130,,130,129,130,,129,129,129,129,129,129,129,129,129,129,,,129,129',
'129,129,129,,,129,129,129,129,,,,129,129,,129,,129,129,,129,,129,129',
',,,,,129,129,129,129,129,129,129,,,,129,,,,,,,,,,,,,,,,,,,,,,,,,,,,129',
',,,129,,129,128,129,,128,128,128,128,128,128,128,128,128,128,,,128,128',
'128,128,128,,,128,128,128,128,,,,128,128,,128,,128,128,,128,,128,128',
',,,,,128,128,128,128,128,128,128,,,,128,,,,,,,,,,,,,,,,,,,,,,,,,,,,128',
',,,128,,128,127,128,,127,127,127,127,127,127,127,127,127,127,,,127,127',
'127,127,127,,,127,127,127,127,,,,127,127,,127,,127,127,,127,,127,127',
',,,,,127,127,127,127,127,127,127,,,,127,,,,,,,,,,,,,,,,,,,,,,,,,,,,127',
',,,127,,127,93,127,,93,93,93,93,93,93,93,93,93,93,,,93,93,93,93,93,',
',93,93,93,93,,,,93,93,,93,,93,93,,93,,93,93,,,,,,93,93,93,93,93,93,93',
',,,93,,,,,,,,,,,,,,,,,,,,,,,,,,,,93,,,,93,,93,94,93,,94,94,94,94,94',
'94,94,94,94,94,,,94,94,94,94,94,,,94,94,94,94,,,,94,94,,94,,94,94,,94',
',94,94,,,,,,94,94,94,94,94,94,94,,,,94,,,,,,,,,,,,,,,,,,,,,,,,,,,,94',
',,,94,,94,95,94,,95,95,95,95,95,95,95,95,95,95,,,95,95,95,95,95,,,95',
'95,95,95,,,,95,95,,95,,95,95,,95,,95,95,,,,,,95,95,95,95,95,95,95,,',
',95,,,,,,,,,,,,,,,,,,,,,,,,,,,,95,,,,95,,95,97,95,,97,97,97,97,97,97',
'97,97,97,97,,,97,97,97,97,97,,,97,97,97,97,,,,97,97,,97,,97,97,,97,',
'97,97,,,,,,97,97,97,97,97,97,97,,,,97,,,,,,,,,,,,,,,,,,,,,,,,,,,,97',
',,,97,,97,98,97,,98,98,98,98,98,98,98,98,98,98,,,98,98,98,98,98,,,98',
'98,98,98,,,,98,98,,98,,98,98,,98,,98,98,,,,,,98,98,98,98,98,98,98,,',
',98,,,,,,,,,,,,,,,,,,,,,,,,,,,,98,,,,98,,98,122,98,,122,122,122,122',
'122,122,122,122,122,122,,,122,122,122,122,122,,,122,122,122,122,,,,122',
'122,,122,,122,122,,122,,122,122,,,,,,122,122,122,122,122,122,122,,,',
'122,,,,,,,,,,,,,,,,,,,,,,,,,,,,122,,,,122,,122,100,122,,100,100,100',
'100,100,100,100,100,100,100,,,100,100,100,100,100,,,100,100,100,100',
',,,100,100,,100,,100,100,,100,,100,100,,,,,,100,100,100,100,100,100',
'100,,,,100,,,,,,,,,,,,,,,,,,,,,,,,,,,,100,,,,100,,100,101,100,,101,101',
'101,101,101,101,101,101,101,101,,,101,101,101,101,101,,,101,101,101',
'101,,,,101,101,,101,,101,101,,101,,101,101,,,,,,101,101,101,101,101',
'101,101,,,,101,,,,,,,,,,,,,,,,,,,,,,,,,,,,101,,,,101,,101,102,101,,102',
'102,102,102,102,102,102,102,102,102,,,102,102,102,102,102,,,102,102',
'102,102,,,,102,102,,102,,102,102,,102,,102,102,,,,,,102,102,102,102',
'102,102,102,,,,102,,,,,,,,,,,,,,,,,,,,,,,,,,,,102,,,,102,,102,103,102',
',103,103,103,103,103,103,103,103,103,103,,,103,103,103,103,103,,,103',
'103,103,103,,,,103,103,,103,,103,103,,103,,103,103,,,,,,103,103,103',
'103,103,103,103,,,,103,,,,,,,,,,,,,,,,,,,,,,,,,,,,103,,,,103,,103,117',
'103,,117,117,117,117,117,117,117,117,117,117,,,117,117,117,117,117,',
',117,117,117,117,,,,117,117,,117,,117,117,,117,,117,117,,,,,,117,117',
'117,117,117,117,117,,,,117,,,,,,,,,,,,,,,,,,,,,,,,,,,,117,,,,117,,117',
'105,117,,105,105,105,105,105,105,105,105,105,105,,,105,105,105,105,105',
',,105,105,105,105,,,,105,105,,105,,105,105,,105,,105,105,,,,,,105,105',
'105,105,105,105,105,,,,105,,,,,,,,,,,,,,,,,,,,,,,,,,,,105,,,,105,,105',
'106,105,,106,106,106,106,106,106,106,106,106,106,,,106,106,106,106,106',
',,106,106,106,106,,,,106,106,,106,,106,106,,106,,106,106,,,,,,106,106',
'106,106,106,106,106,,,,106,,,,,,,,,,,,,,,,,,,,,,,,,,,,106,,,,106,,106',
'107,106,,107,107,107,107,107,107,107,107,107,107,,,107,107,107,107,107',
',,107,107,107,107,,,,107,107,,107,,107,107,,107,,107,107,,,,,,107,107',
'107,107,107,107,107,,,,107,,,,,,,,,,,,,,,,,,,,,,,,,,,,107,,,,107,,107',
'108,107,,108,108,108,108,108,108,108,108,108,108,,,108,108,108,108,108',
',,108,108,108,108,,,,108,108,,108,,108,108,,108,,108,108,,,,,,108,108',
'108,108,108,108,108,,,,108,,,,,,,,,,,,,,,,,,,,,,,,,,,,108,,,,108,,108',
'109,108,,109,109,109,109,109,109,109,109,109,109,,,109,109,109,109,109',
',,109,109,109,109,,,,109,109,,109,,109,109,,109,,109,109,,,,,,109,109',
'109,109,109,109,109,,,,109,,,,,,,,,,,,,,,,,,,,,,,,,,,,109,,,,109,,109',
'110,109,,110,110,110,110,110,110,110,110,110,110,,,110,110,110,110,110',
',,110,110,110,110,,,,110,110,,110,,110,110,,110,,110,110,,,,,,110,110',
'110,110,110,110,110,,,,110,,,,,,,,,,,,,,,,,,,,,,,,,,,,110,,,,110,,110',
'111,110,,111,111,111,111,111,111,111,111,111,111,,,111,111,111,111,111',
',,111,111,111,111,,,,111,111,,111,,111,111,,111,,111,111,,,,,,111,111',
'111,111,111,111,111,,,,111,,,,,,,,,,,,,,,,,,,,,,,,,,,,111,,,,111,,111',
'125,111,,125,125,125,125,125,125,125,125,125,125,,,125,125,125,125,125',
',,125,125,125,125,,,,125,125,,125,,125,125,,125,,125,125,,,,,,125,125',
'125,125,125,125,125,,,,125,,,,,,,,,,,,,,,,,,,,,,,,,,,,125,,,,125,,125',
'113,125,,113,113,113,113,113,113,113,113,113,113,,,113,113,113,113,113',
',,113,113,113,113,,,,113,113,,113,,113,113,,113,,113,113,,,,,,113,113',
'113,113,113,113,113,,,,113,,,,,,,,,,,,,,,,,,,,,,,,,,,,113,,,,113,,113',
'114,113,,114,114,114,114,114,114,114,114,114,114,,,114,114,114,114,114',
',,114,114,114,114,,,,114,114,,114,,114,114,,114,,114,114,,,,,,114,114',
'114,114,114,114,114,,,,114,,,,,,,,,,,,,,,,,,,,,,,,,,,,114,,,,114,,114',
'115,114,,115,115,115,115,115,115,115,115,115,115,,,115,115,115,115,115',
',,115,115,115,115,,,,115,115,,115,,115,115,,115,,115,115,,,,,,115,115',
'115,115,115,115,115,,,,115,,,,,,,,,,,,,,,,,,,,,,,,,,,,115,,,,115,,115',
'116,115,,116,116,116,116,116,116,116,116,116,116,,,116,116,116,116,116',
',,116,116,116,116,,,,116,116,,116,,116,116,,116,,116,116,,,,,,116,116',
'116,116,116,116,116,,,,116,,,,,,,,,,,,,,,,,,,,,,,,,,,,116,,,,116,,116',
'104,116,,104,104,104,104,104,104,104,104,104,104,,,104,104,104,104,104',
',,104,104,104,104,,,,104,104,,104,,104,104,,104,,104,104,,,216,,216',
'104,104,104,104,104,104,104,,,,104,,,,,,,,,,,,216,,,,,,,,216,,,,,,,',
'104,,216,,104,,104,,104,216,216,216,216,216,216,216,216,216,216,216',
'216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216',
'216,216,216,,216,216,,,,,,216,64,64,64,64,64,64,64,64,64,64,,,,,,,,',
',,64,64,,,,,,,,,,,,,64,,,64,,,279,,279,1,1,1,1,1,1,1,1,1,1,,,,,,,,,',
',1,1,279,,,,,,,,279,,,,1,,,1,,,279,,64,,64,,64,279,279,279,279,279,279',
'279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279',
'279,279,279,279,279,279,279,,,279,279,285,,285,,1,279,1,,1,,,,,,,,,',
',,,,,,,285,,,,,,,,285,,,,,,,,,,285,,,,,,,285,285,285,285,285,285,285',
'285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285',
'285,285,285,285,285,285,,,285,285,154,,154,,,285,,,,,,,,,,,,,,,,,,,',
'154,,,,,,,,154,,,,,,,,,,154,,,,,,,154,154,154,154,154,154,154,154,154',
'154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154,154',
'154,154,154,154,154,,154,154,196,,196,,,,,,,,,,,,,,,,,,,,,,,196,,,,',
',,,196,,,,,,,,,,196,,,,,,,196,196,196,196,196,196,196,196,196,196,196',
'196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196',
'196,196,,,196,196,188,,188,,,,,,,,,,,,,,,,,,,,,,,188,,,,,,,,188,,,,',
',,,,,188,,,,,,,188,188,188,188,188,188,188,188,188,188,188,188,188,188',
'188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,,,188',
'188,281,,281,,,,,,,,,,,,,,,,,,,,,,,281,,,,,,,,281,,,,,,,,,,281,,,,,',
',281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281',
'281,281,281,281,281,281,281,281,281,281,281,281,281,,,281,281,228,,228',
',,,,,,,,,,,,,,,,,,,,,,228,,,,,,,,228,,,,,,,,,,228,,,,,,,228,228,228',
'228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228,228',
'228,228,228,228,228,228,228,228,228,228,,,228,228,280,,280,,,,,,,,,',
',,,,,,,,,,,,,280,,,,,,,,280,,,,,,,,,,280,,,,,,,280,280,280,280,280,280',
'280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280,280',
'280,280,280,280,280,280,280,,,280,280,274,,274,,,,,,,,,,,,,,,,,,,,,',
',274,,,,,,,,274,,,,,,,,274,,274,,,,,,,274,274,274,274,274,274,274,274',
'274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274',
'274,274,274,274,274,,,274,274,176,,176,,,,,,,,,,,,,,,,,,,,,,,176,,,',
',,,,176,,,,,,,,,,176,,,,,,,176,176,176,176,176,176,176,176,176,176,176',
'176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176',
'176,176,,,176,176,80,,80,,,,,,,,,,,,,,,,,,,,,,,80,,,,,,,,80,,,,,,,,80',
',80,,,,,,,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80',
'80,80,80,80,80,80,80,80,80,80,,,80,80,25,,25,,,,,,,,,,,,,,,,,,,,,,,25',
',,,,,,,25,,,,,,,,,,25,,,,,,,25,25,25,25,25,25,25,25,25,25,25,25,25,25',
'25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,,,25,25,170,,170,,,',
',,,,,,,,,,,,,,,,,,,170,,,,,,,,170,,,,,,,,,,170,,,,,,,170,170,170,170',
'170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170',
'170,170,170,170,170,170,170,170,170,,,170,170,263,,263,,,,,,,,,,,,,',
',,,,,,,,,263,,,,,,,,263,,,,,,,,,,263,,,,,,,263,263,263,263,263,263,263',
'263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263',
'263,263,263,263,263,263,,,263,263,262,,262,,,,,,,,,,,,,,,,,,,,,,,262',
',,,,,,,262,,,,,,,,,,262,,,,,,,262,262,262,262,262,262,262,262,262,262',
'262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262',
'262,262,262,,,262,262,261,,261,,,,,,,,,,,,,,,,,,,,,,,261,,,,,,,,261',
',,,,,,,,,261,,,,,,,261,261,261,261,261,261,261,261,261,261,261,261,261',
'261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261',
',,261,261,260,,260,,,,,,,,,,,,,,,,,,,,,,,260,,,,,,,,260,,,,,,,,,,260',
',,,,,,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260',
'260,260,260,260,260,260,260,260,260,260,260,260,260,260,,,260,260,146',
',146,,,,,,,,,,,,,,,,,,,,,,,146,,,,,,,,146,,,,,,,,146,,146,,,,,,,146',
'146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146',
'146,146,146,146,146,146,146,146,146,146,146,146,,,146,146,78,,78,,,',
',,,,,,,,,,,,,,,,,,,78,,,,,,,,78,,,,,,,,,,78,,,,,,,78,78,78,78,78,78',
'78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78',
'78,,,78,78,148,,148,,,,,,,,,,,,,,,,,,,,,,,148,,,,,,,,148,,,,,,,,148',
',148,,,,,,,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148',
'148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,205,,148',
'148,,,,,205,,,,,,,,,,205,,,,,,,205,205,205,205,205,205,205,205,205,205',
'205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205',
'205,205,205,89,,,,,,,,89,,,,,,,,,,89,,,,,,,89,89,89,89,89,89,89,89,89',
'89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,208,',
',,,,,,208,,,,,,,,,,208,,,,,,,208,208,208,208,208,208,208,208,208,208',
'208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208,208',
'208,208,208,220,,,,,,,,220,,,,,,,,,,220,,,,,,,220,220,220,220,220,220',
'220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220,220',
'220,220,220,220,220,220,220,251,,,,,,,,,,251,,,,,,,251,251,251,251,251',
'251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251',
'251,251,251,251,251,251,251,251,272,,,,,,,,,,272,,,,,,,272,272,272,272',
'272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272',
'272,272,272,272,272,272,272,272,272,166,,,,,,,,,,166,,,,,,,166,166,166',
'166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166',
'166,166,166,166,166,166,166,166,166,166,157,,,,,,,,,,157,,,,,,,157,157',
'157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157',
'157,157,157,157,157,157,157,157,157,157,157,189,,,,,,,,,,189,,,,,,,189',
'189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189',
'189,189,189,189,189,189,189,189,189,189,189,189,273,,,,,,,,,,273,,,',
',,,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273',
'273,273,273,273,273,273,273,273,273,273,273,273,273,190,,,,,,,190,190',
'190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190',
'190,190,190,190,190,190,190,190,190,190,190,197,,,,,,,197,197,197,197',
'197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197',
'197,197,197,197,197,197,197,197,197,182,,,,,,,182,182,182,182,182,182',
'182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182',
'182,182,182,182,182,182,182,193,,,,,,,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,185,,,,,,,185,185,185,185,185,185,185,185,185,185',
'185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185',
'185,185,185' ]
        racc_action_check = arr = Array.new(8906, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  3274,  6541,   nil,   180,   nil,   nil,   271,   362,   244,   286,
   nil,   nil,   nil,   nil,   nil,   nil,   149,   129,   817,   908,
   nil,   nil,   164,   nil,   nil,  7465,   nil,   nil,    66,   -54,
   286,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    -5,   nil,
  1545,   nil,   nil,   nil,  1636,   nil,   nil,  1727,   nil,  1818,
   nil,   nil,  1909,   nil,  2000,    74,   nil,   nil,  2182,   nil,
  2273,  2364,  2455,   nil,  6498,   nil,   287,   nil,   nil,  2728,
   nil,  2819,   105,    69,   nil,  3092,    65,    71,  8053,   286,
  7381,   147,   271,  3820,   109,   nil,   296,   nil,   nil,  8247,
    89,   nil,   nil,  4275,  4366,  4457,   nil,  4548,  4639,    89,
  4821,  4912,  5003,  5094,  6368,  5276,  5367,  5458,  5549,  5640,
  5731,  5822,   297,  6004,  6095,  6186,  6277,  5185,  3729,  3001,
  2546,   453,  4730,   nil,  3365,  5913,   nil,  4184,  4093,  4002,
  3911,   280,    -2,   nil,  3638,  3547,   nil,   nil,   nil,   208,
   172,   185,    89,   nil,   101,   205,  7969,   150,  8137,   -32,
   nil,   nil,   281,  3456,  6709,   -43,   215,  8545,   130,   133,
   166,   179,   176,   nil,   300,   nil,  8498,    -2,   nil,  3183,
  7549,   nil,   137,    42,    64,   nil,  7297,   nil,   nil,   nil,
   nil,   nil,  8750,  1191,   264,  8824,   292,   105,  6877,  8592,
  8676,  1282,   190,  8787,   918,   -26,  6793,  8713,   372,  1481,
     8,   827,  1572,   645,  1390,  8192,   554,  1373,  8302,   463,
  1555,   736,  1464,  1100,  1009,   -11,  6411,   nil,    90,   166,
  8357,   nil,   nil,   -12,  2910,   105,   nil,     6,  7045,    30,
   nil,  2637,   nil,  2091,  1454,  1363,   121,   nil,   130,    85,
   nil,   152,    91,   nil,    81,    88,   nil,    -2,   nil,  1272,
  1181,  8404,   nil,  1090,   215,   nil,   nil,   999,   726,   635,
  7885,  7801,  7717,  7633,     8,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,  8451,  8639,  7213,   nil,   232,   nil,   544,  6541,
  7129,  6961,   nil,    79,   260,  6625,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -1,  -168,   -20,  -168,   -35,   -21,  -168,  -168,  -168,  -168,
   -22,    -2,   -47,   -23,   -31,   -24,    -3,  -161,  -168,  -168,
   -99,   -29,  -168,   -30,   -33,    -5,   -32,   -34,    -8,  -168,
  -168,   -36,    -9,   -93,   -37,   -10,  -100,   -38,  -168,   -11,
  -168,  -101,   -27,   -12,  -168,  -102,   -39,  -168,   -13,  -168,
   -40,   -28,  -168,   -14,  -168,  -116,   -41,   -15,  -168,   -98,
  -128,  -168,  -168,   -16,  -168,  -118,  -110,   -17,   -95,  -168,
   -18,  -168,  -168,  -168,   -19,  -128,  -168,  -117,   -46,   -50,
  -168,  -168,  -168,    -7,  -168,  -159,  -161,  -163,  -165,  -140,
  -168,   -26,    -4,  -168,  -168,  -168,   -90,  -168,  -168,  -168,
  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,
  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,  -168,
  -168,  -168,  -168,   -58,  -168,  -168,   -57,  -168,  -168,  -168,
  -168,  -168,  -168,  -103,  -128,  -168,  -107,  -106,  -120,  -168,
  -168,  -168,  -145,   -92,   -51,   -48,  -168,   -49,  -168,   -52,
  -104,  -121,   -54,  -168,  -129,  -168,   -53,   -55,   -97,  -168,
  -168,  -168,  -168,   -45,  -110,  -111,   -56,  -168,   -96,  -128,
  -129,  -157,  -168,  -168,  -136,   290,    -6,  -162,  -158,  -160,
  -164,   -25,   -82,   -71,   -60,   -83,   -72,   -61,  -166,   -89,
   -84,   -73,   -62,   -85,   -74,   -63,  -167,   -86,   -75,   -64,
  -168,   -76,   -65,   -77,   -66,   -87,   -78,   -67,   -88,   -79,
   -68,   -80,   -69,   -81,   -70,   -59,  -168,  -105,  -119,  -168,
   -42,   -94,   -91,  -168,  -168,  -168,  -142,  -168,  -130,  -168,
  -135,  -168,  -127,  -168,  -168,  -168,  -168,  -109,  -168,  -168,
  -141,  -168,  -168,  -137,  -168,  -143,  -108,  -122,  -144,  -168,
  -168,  -147,  -146,  -168,  -168,  -152,  -156,  -168,  -168,  -168,
  -131,  -132,   -43,   -44,  -168,  -112,  -113,  -115,  -124,  -139,
  -138,  -123,  -149,  -148,  -168,  -150,  -168,  -153,  -168,  -168,
  -133,  -134,  -114,  -154,  -168,  -168,  -125,  -155,  -151,  -126 ]

racc_goto_table = [
    11,   162,   163,    76,   141,    22,   219,    85,    87,   255,
     9,    25,    77,    81,    78,   223,    83,    79,    80,   136,
    16,   265,    92,   266,   254,   174,   178,   221,    86,    89,
    25,   271,    88,   nil,   nil,   nil,   277,   nil,   nil,    90,
   151,   241,   nil,   143,   nil,   nil,   136,   nil,   150,   282,
   nil,   144,   nil,   nil,   nil,   145,   nil,   nil,   146,   nil,
   147,   nil,   151,   148,   nil,   149,   158,   136,   136,   152,
   150,   154,   156,   157,   245,   159,   179,   180,   nil,   nil,
   166,   nil,   167,   nil,   nil,   171,   200,   nil,   nil,   177,
    83,   nil,   nil,   nil,   176,   nil,   nil,   nil,   nil,   239,
   163,   nil,   nil,   nil,   182,   183,   184,   nil,   185,   186,
   187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
   197,   198,   199,   nil,   201,   202,   203,   204,   205,   206,
   207,   208,   209,   210,   218,   211,   212,   nil,   213,   214,
   215,   216,   nil,   159,   151,   222,   220,   nil,   nil,   136,
   136,   226,   150,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   238,   256,   228,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   163,   nil,   163,   nil,   nil,   nil,   243,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   256,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   163,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   136,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   248,   nil,
   nil,   258,   nil,   nil,   nil,   251,   264,   nil,   nil,   238,
   nil,   nil,   260,   nil,   261,   262,   263,   269,   nil,   270,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   272,   273,   nil,   nil,   274,   nil,   nil,   nil,   279,   280,
   281,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   283,
   nil,   284,   nil,   287,   nil,   nil,   nil,   nil,   nil,   285 ]

racc_goto_check = [
     2,    33,    22,     6,    38,     4,    36,    43,    45,    41,
     1,     5,    31,     4,     5,    39,     2,     5,     5,    10,
     3,    24,     2,    24,    40,    37,    42,    26,    44,     5,
     5,     8,    46,   nil,   nil,   nil,    41,   nil,   nil,     3,
    35,    36,   nil,     4,   nil,   nil,    10,   nil,    30,    24,
   nil,     5,   nil,   nil,   nil,     5,   nil,   nil,     5,   nil,
     5,   nil,    35,     5,   nil,     5,     6,    10,    10,     5,
    30,     5,     5,     5,    39,    31,    43,    45,   nil,   nil,
     5,   nil,     5,   nil,   nil,     4,    38,   nil,   nil,     4,
     2,   nil,   nil,   nil,     5,   nil,   nil,   nil,   nil,    33,
    22,   nil,   nil,   nil,     5,     5,     5,   nil,     5,     5,
     5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
     5,     5,     5,   nil,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     6,     5,     5,   nil,     5,     5,
     5,     5,   nil,    31,    35,     4,     5,   nil,   nil,    10,
    10,     4,    30,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,    22,     5,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    22,   nil,    22,   nil,   nil,   nil,     4,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,
   nil,     2,   nil,   nil,   nil,     5,     2,   nil,   nil,     2,
   nil,   nil,     5,   nil,     5,     5,     5,     4,   nil,     4,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     5,     5,   nil,   nil,     5,   nil,   nil,   nil,     5,     5,
     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,
   nil,     4,   nil,     2,   nil,   nil,   nil,   nil,   nil,     5 ]

racc_goto_pointer = [
   nil,    10,     0,    20,     5,    11,     2,   nil,  -216,   nil,
    -9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   -64,   nil,  -215,   nil,  -112,   nil,   nil,   nil,
    -7,    11,   nil,   -65,   nil,   -15,  -128,   -56,   -26,  -126,
  -203,  -218,   -58,   -10,    11,    -9,    15 ]

racc_goto_default = [
   nil,   nil,   233,   nil,   nil,   170,    28,    32,    35,    39,
    43,    48,    53,    57,    63,    67,    70,    74,     2,     5,
    10,    13,    15,    20,   165,    29,    33,    36,    41,    45,
   133,    55,   137,   nil,    65,   138,   155,   nil,   nil,   nil,
   nil,   nil,    17,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 97, :_reduce_1,
  1, 97, :_reduce_2,
  1, 97, :_reduce_3,
  2, 97, :_reduce_4,
  1, 99, :_reduce_5,
  3, 99, :_reduce_6,
  2, 99, :_reduce_7,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  1, 101, :_reduce_none,
  3, 100, :_reduce_25,
  2, 100, :_reduce_26,
  1, 98, :_reduce_none,
  1, 98, :_reduce_none,
  1, 119, :_reduce_29,
  1, 119, :_reduce_30,
  1, 119, :_reduce_31,
  1, 119, :_reduce_32,
  1, 119, :_reduce_33,
  1, 119, :_reduce_34,
  1, 119, :_reduce_35,
  1, 119, :_reduce_36,
  1, 119, :_reduce_37,
  1, 119, :_reduce_38,
  1, 119, :_reduce_39,
  1, 119, :_reduce_40,
  1, 119, :_reduce_41,
  3, 107, :_reduce_42,
  3, 120, :_reduce_43,
  3, 120, :_reduce_44,
  1, 120, :_reduce_45,
  2, 111, :_reduce_46,
  1, 118, :_reduce_47,
  2, 105, :_reduce_48,
  2, 105, :_reduce_49,
  2, 105, :_reduce_50,
  2, 105, :_reduce_51,
  2, 105, :_reduce_52,
  2, 105, :_reduce_53,
  2, 105, :_reduce_54,
  2, 105, :_reduce_55,
  2, 105, :_reduce_56,
  2, 105, :_reduce_57,
  2, 105, :_reduce_58,
  3, 105, :_reduce_59,
  3, 105, :_reduce_60,
  3, 105, :_reduce_61,
  3, 105, :_reduce_62,
  3, 105, :_reduce_63,
  3, 105, :_reduce_64,
  3, 105, :_reduce_65,
  3, 105, :_reduce_66,
  3, 105, :_reduce_67,
  3, 105, :_reduce_68,
  3, 105, :_reduce_69,
  3, 105, :_reduce_70,
  3, 105, :_reduce_71,
  3, 105, :_reduce_72,
  3, 105, :_reduce_73,
  3, 105, :_reduce_74,
  3, 105, :_reduce_75,
  3, 105, :_reduce_76,
  3, 105, :_reduce_77,
  3, 105, :_reduce_78,
  3, 105, :_reduce_79,
  3, 105, :_reduce_80,
  3, 105, :_reduce_81,
  3, 105, :_reduce_82,
  3, 105, :_reduce_83,
  3, 105, :_reduce_84,
  3, 105, :_reduce_85,
  3, 105, :_reduce_86,
  3, 105, :_reduce_87,
  3, 105, :_reduce_88,
  3, 105, :_reduce_89,
  2, 117, :_reduce_90,
  3, 104, :_reduce_91,
  2, 104, :_reduce_92,
  1, 121, :_reduce_93,
  3, 121, :_reduce_94,
  1, 122, :_reduce_none,
  2, 122, :_reduce_96,
  2, 116, :_reduce_97,
  1, 102, :_reduce_98,
  1, 102, :_reduce_99,
  1, 102, :_reduce_100,
  1, 102, :_reduce_101,
  1, 102, :_reduce_102,
  2, 102, :_reduce_103,
  2, 102, :_reduce_104,
  2, 126, :_reduce_105,
  1, 126, :_reduce_106,
  1, 126, :_reduce_107,
  3, 128, :_reduce_108,
  3, 124, :_reduce_109,
  0, 129, :_reduce_110,
  1, 129, :_reduce_111,
  3, 129, :_reduce_112,
  3, 129, :_reduce_113,
  4, 129, :_reduce_114,
  3, 129, :_reduce_115,
  1, 103, :_reduce_116,
  2, 103, :_reduce_117,
  1, 103, :_reduce_118,
  3, 115, :_reduce_119,
  2, 127, :_reduce_120,
  2, 127, :_reduce_121,
  3, 131, :_reduce_122,
  4, 131, :_reduce_123,
  4, 130, :_reduce_124,
  6, 106, :_reduce_125,
  7, 106, :_reduce_126,
  3, 123, :_reduce_127,
  0, 132, :_reduce_128,
  1, 132, :_reduce_129,
  2, 132, :_reduce_130,
  3, 132, :_reduce_131,
  3, 132, :_reduce_132,
  4, 132, :_reduce_133,
  4, 132, :_reduce_134,
  2, 132, :_reduce_135,
  3, 109, :_reduce_136,
  4, 109, :_reduce_137,
  5, 109, :_reduce_138,
  3, 133, :_reduce_139,
  2, 110, :_reduce_140,
  3, 125, :_reduce_141,
  3, 112, :_reduce_142,
  4, 113, :_reduce_143,
  4, 113, :_reduce_144,
  1, 134, :_reduce_145,
  3, 134, :_reduce_146,
  2, 135, :_reduce_147,
  3, 135, :_reduce_148,
  3, 135, :_reduce_149,
  5, 114, :_reduce_150,
  7, 114, :_reduce_151,
  1, 136, :_reduce_152,
  2, 136, :_reduce_153,
  3, 137, :_reduce_154,
  4, 137, :_reduce_155,
  1, 137, :_reduce_none,
  3, 138, :_reduce_157,
  2, 139, :_reduce_158,
  1, 140, :_reduce_159,
  2, 140, :_reduce_160,
  0, 141, :_reduce_161,
  2, 141, :_reduce_162,
  1, 142, :_reduce_163,
  2, 142, :_reduce_164,
  2, 108, :_reduce_165,
  3, 108, :_reduce_166,
  3, 108, :_reduce_167 ]

racc_reduce_n = 168

racc_shift_n = 290

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :UNLESS => 4,
  :NUMBER => 5,
  :STRING => 6,
  :REGEX => 7,
  :TRUE => 8,
  :FALSE => 9,
  :YES => 10,
  :NO => 11,
  :ON => 12,
  :OFF => 13,
  :IDENTIFIER => 14,
  :PROPERTY_ACCESS => 15,
  :CODE => 16,
  :PARAM => 17,
  :PARAM_SPLAT => 18,
  :NEW => 19,
  :RETURN => 20,
  :TRY => 21,
  :CATCH => 22,
  :FINALLY => 23,
  :THROW => 24,
  :BREAK => 25,
  :CONTINUE => 26,
  :FOR => 27,
  :IN => 28,
  :BY => 29,
  :WHEN => 30,
  :WHILE => 31,
  :SWITCH => 32,
  :LEADING_WHEN => 33,
  :DELETE => 34,
  :INSTANCEOF => 35,
  :TYPEOF => 36,
  :SUPER => 37,
  :EXTENDS => 38,
  :ARGUMENTS => 39,
  :NEWLINE => 40,
  :COMMENT => 41,
  :JS => 42,
  :INDENT => 43,
  :OUTDENT => 44,
  "?" => 45,
  :UMINUS => 46,
  :SPLAT => 47,
  :NOT => 48,
  "!" => 49,
  "!!" => 50,
  "~" => 51,
  "++" => 52,
  "--" => 53,
  "*" => 54,
  "/" => 55,
  "%" => 56,
  "+" => 57,
  "-" => 58,
  "<<" => 59,
  ">>" => 60,
  ">>>" => 61,
  "&" => 62,
  "|" => 63,
  "^" => 64,
  "<=" => 65,
  "<" => 66,
  ">" => 67,
  ">=" => 68,
  "==" => 69,
  "!=" => 70,
  :IS => 71,
  :ISNT => 72,
  "&&" => 73,
  "||" => 74,
  :AND => 75,
  :OR => 76,
  "-=" => 77,
  "+=" => 78,
  "/=" => 79,
  "*=" => 80,
  "%=" => 81,
  "." => 82,
  :ASSIGN => 83,
  "||=" => 84,
  "&&=" => 85,
  "=>" => 86,
  "\n" => 87,
  ";" => 88,
  "," => 89,
  "[" => 90,
  "]" => 91,
  "{" => 92,
  "}" => 93,
  "(" => 94,
  ")" => 95 }

racc_nt_base = 96

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "UNLESS",
  "NUMBER",
  "STRING",
  "REGEX",
  "TRUE",
  "FALSE",
  "YES",
  "NO",
  "ON",
  "OFF",
  "IDENTIFIER",
  "PROPERTY_ACCESS",
  "CODE",
  "PARAM",
  "PARAM_SPLAT",
  "NEW",
  "RETURN",
  "TRY",
  "CATCH",
  "FINALLY",
  "THROW",
  "BREAK",
  "CONTINUE",
  "FOR",
  "IN",
  "BY",
  "WHEN",
  "WHILE",
  "SWITCH",
  "LEADING_WHEN",
  "DELETE",
  "INSTANCEOF",
  "TYPEOF",
  "SUPER",
  "EXTENDS",
  "ARGUMENTS",
  "NEWLINE",
  "COMMENT",
  "JS",
  "INDENT",
  "OUTDENT",
  "\"?\"",
  "UMINUS",
  "SPLAT",
  "NOT",
  "\"!\"",
  "\"!!\"",
  "\"~\"",
  "\"++\"",
  "\"--\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\">>>\"",
  "\"&\"",
  "\"|\"",
  "\"^\"",
  "\"<=\"",
  "\"<\"",
  "\">\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "IS",
  "ISNT",
  "\"&&\"",
  "\"||\"",
  "AND",
  "OR",
  "\"-=\"",
  "\"+=\"",
  "\"/=\"",
  "\"*=\"",
  "\"%=\"",
  "\".\"",
  "ASSIGN",
  "\"||=\"",
  "\"&&=\"",
  "\"=>\"",
  "\"\\n\"",
  "\";\"",
  "\",\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Root",
  "Terminator",
  "Expressions",
  "Block",
  "Expression",
  "Value",
  "Call",
  "Code",
  "Operation",
  "Range",
  "Assign",
  "If",
  "Try",
  "Throw",
  "Return",
  "While",
  "For",
  "Switch",
  "Extends",
  "Splat",
  "Existence",
  "Comment",
  "Literal",
  "AssignObj",
  "ParamList",
  "Param",
  "Array",
  "Object",
  "Parenthetical",
  "Accessor",
  "Invocation",
  "Index",
  "AssignList",
  "Super",
  "Arguments",
  "ArgList",
  "Catch",
  "ForVariables",
  "ForSource",
  "Whens",
  "When",
  "IfBlock",
  "ElsIf",
  "ElsIfs",
  "ElseBody",
  "IfEnd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_1(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_2(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_5(val, _values, result)
     result = Expressions.wrap(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_6(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_25(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_26(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

# reduce 27 omitted

# reduce 28 omitted

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_29(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_30(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_31(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_32(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_33(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_34(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_35(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_36(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_37(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_38(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_39(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_40(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_41(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_42(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_43(val, _values, result)
     result = AssignNode.new(ValueNode.new(val[0]), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_44(val, _values, result)
     result = AssignNode.new(ValueNode.new(LiteralNode.new(val[0])), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_45(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_46(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_47(val, _values, result)
     result = CommentNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_48(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 136)
  def _reduce_49(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_50(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_51(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_52(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 140)
  def _reduce_53(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_54(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_55(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_56(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_57(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_58(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_59(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_60(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_61(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_62(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_63(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 154)
  def _reduce_64(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_65(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_66(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_67(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_68(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_69(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_70(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_71(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_72(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 165)
  def _reduce_73(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_74(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_75(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_76(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 170)
  def _reduce_77(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_78(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_79(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_80(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_81(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_82(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_83(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_84(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_85(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 181)
  def _reduce_86(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_87(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_88(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_89(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 189)
  def _reduce_90(val, _values, result)
     result = ExistenceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 194)
  def _reduce_91(val, _values, result)
     result = CodeNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 195)
  def _reduce_92(val, _values, result)
     result = CodeNode.new([], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 200)
  def _reduce_93(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 201)
  def _reduce_94(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'grammar.y', 206)
  def _reduce_96(val, _values, result)
     result = ParamSplatNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 210)
  def _reduce_97(val, _values, result)
     result = ArgSplatNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 215)
  def _reduce_98(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 216)
  def _reduce_99(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 217)
  def _reduce_100(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 218)
  def _reduce_101(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 219)
  def _reduce_102(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 220)
  def _reduce_103(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 221)
  def _reduce_104(val, _values, result)
     result = ValueNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 226)
  def _reduce_105(val, _values, result)
     result = AccessorNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 227)
  def _reduce_106(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 228)
  def _reduce_107(val, _values, result)
     result = SliceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_108(val, _values, result)
     result = IndexNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 238)
  def _reduce_109(val, _values, result)
     result = ObjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 243)
  def _reduce_110(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_111(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_112(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_113(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 248)
  def _reduce_114(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 249)
  def _reduce_115(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 254)
  def _reduce_116(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 255)
  def _reduce_117(val, _values, result)
     result = val[1].new_instance 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 256)
  def _reduce_118(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 261)
  def _reduce_119(val, _values, result)
     result = ExtendsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 266)
  def _reduce_120(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 267)
  def _reduce_121(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 272)
  def _reduce_122(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 273)
  def _reduce_123(val, _values, result)
     result = val[1] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 278)
  def _reduce_124(val, _values, result)
     result = CallNode.new(:super, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 284)
  def _reduce_125(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 286)
  def _reduce_126(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 291)
  def _reduce_127(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 296)
  def _reduce_128(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 297)
  def _reduce_129(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 298)
  def _reduce_130(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 299)
  def _reduce_131(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 300)
  def _reduce_132(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 301)
  def _reduce_133(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 302)
  def _reduce_134(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 303)
  def _reduce_135(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 308)
  def _reduce_136(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 309)
  def _reduce_137(val, _values, result)
     result = TryNode.new(val[1], nil, nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 311)
  def _reduce_138(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_139(val, _values, result)
     result = [val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 321)
  def _reduce_140(val, _values, result)
     result = ThrowNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 326)
  def _reduce_141(val, _values, result)
     result = ParentheticalNode.new(val[1], val[0].line) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 331)
  def _reduce_142(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 338)
  def _reduce_143(val, _values, result)
     result = ForNode.new(val[0], val[3], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 339)
  def _reduce_144(val, _values, result)
     result = ForNode.new(val[3], val[2], val[1][0], val[1][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 344)
  def _reduce_145(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 345)
  def _reduce_146(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 350)
  def _reduce_147(val, _values, result)
     result = {:source => val[1]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 352)
  def _reduce_148(val, _values, result)
     result = val[0].merge(:filter => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 354)
  def _reduce_149(val, _values, result)
     result = val[0].merge(:step => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 360)
  def _reduce_150(val, _values, result)
     result = val[3].rewrite_condition(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 362)
  def _reduce_151(val, _values, result)
     result = val[3].rewrite_condition(val[1]).add_else(val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 367)
  def _reduce_152(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 368)
  def _reduce_153(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 373)
  def _reduce_154(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 375)
  def _reduce_155(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

# reduce 156 omitted

module_eval(<<'.,.,', 'grammar.y', 383)
  def _reduce_157(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 388)
  def _reduce_158(val, _values, result)
     result = val[1].force_statement 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 393)
  def _reduce_159(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 394)
  def _reduce_160(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 399)
  def _reduce_161(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 400)
  def _reduce_162(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 405)
  def _reduce_163(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 406)
  def _reduce_164(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 411)
  def _reduce_165(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 412)
  def _reduce_166(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 413)
  def _reduce_167(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true, :invert => true}) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
