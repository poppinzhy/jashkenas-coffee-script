#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

module CoffeeScript

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 448)
  # Lex and parse a CoffeeScript.
  def parse(code)
    # Uncomment the following line to enable grammar debugging, in combination
    # with the -g flag in the Rake build task.
    # @yydebug = true
    @tokens = Lexer.new.tokenize(code)
    do_parse
  end

  # Retrieve the next token from the list.
  def next_token
    @tokens.shift
  end

  # Raise a custom error class that knows about line numbers.
  def on_error(error_token_id, error_value, value_stack)
    raise ParseError.new(token_to_str(error_token_id), error_value, value_stack)
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'97,9,106,20,23,27,31,35,38,46,50,56,62,261,262,179,71,1,6,10,267,267',
'17,24,28,110,114,26,14,14,128,58,138,68,102,73,2,26,11,26,14,18,26,26',
'99,26,40,44,48,54,123,127,131,93,96,101,105,109,113,116,119,122,126',
'130,92,95,100,104,108,112,115,118,121,125,129,91,94,98,103,107,111,71',
'117,120,124,42,51,141,142,300,67,277,72,9,5,174,20,23,27,31,35,38,46',
'50,56,62,246,141,142,71,1,6,10,240,251,17,24,28,30,169,252,291,276,52',
'58,89,68,168,73,2,169,11,275,14,18,57,63,249,168,40,44,48,54,60,64,254',
'169,57,63,8,42,51,267,164,168,14,181,57,63,242,14,183,184,290,140,253',
'14,206,146,141,142,233,141,142,232,141,142,138,42,51,141,142,14,67,140',
'72,9,5,146,20,23,27,31,35,38,46,50,56,62,143,57,63,71,1,6,10,57,63,17',
'24,28,30,71,57,63,26,52,58,240,68,26,73,2,26,11,182,14,18,256,240,169',
'169,40,44,48,54,60,64,168,168,257,99,8,144,57,63,140,-180,-180,140,146',
'83,140,146,42,51,146,140,133,57,63,146,57,63,242,264,14,14,165,165,266',
'42,51,57,63,242,67,243,72,9,5,26,20,23,27,31,35,38,46,50,56,62,307,99',
'77,71,1,6,10,123,127,17,24,28,30,57,63,249,89,52,58,250,68,,73,2,99',
'11,,14,18,,-180,-180,,40,44,48,54,60,64,99,261,262,,8,,123,127,131,93',
'96,101,105,109,113,116,119,122,126,130,92,95,100,104,108,112,115,183',
'184,99,176,177,,42,51,123,127,,67,,72,9,5,,20,23,27,31,35,38,46,50,56',
'62,,99,,71,1,6,10,-180,-180,17,24,28,30,,,,,52,58,,68,,73,2,99,11,,14',
'18,,123,127,,40,44,48,54,60,64,99,,,,8,,123,127,131,93,96,101,105,109',
'113,116,119,122,126,130,92,95,100,104,108,112,115,,,99,,,,42,51,-180',
'-180,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,99,,71,1,6,10,-180',
'-180,17,24,28,30,,,,,52,58,,68,,73,2,99,11,,14,18,,-180,-180,,40,44',
'48,54,60,64,99,,,,8,,123,127,131,93,96,101,105,109,113,116,119,122,126',
'130,92,95,100,104,108,112,115,,,99,,,,42,51,-180,-180,,67,,72,9,5,,20',
'23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68',
',73,2,,11,,14,18,,,,,40,44,48,54,60,64,99,,,,8,,123,127,131,93,96,101',
'105,109,113,116,119,122,126,130,92,95,100,104,108,112,115,,,,,,,42,51',
',,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28',
'30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,99,,,,8,,123',
'127,131,93,96,101,105,109,113,116,119,122,126,130,92,95,100,104,108',
'112,115,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,',
'71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48',
'54,60,64,99,,,,8,,123,127,131,93,96,101,105,109,113,116,119,122,126',
'130,92,95,100,104,108,112,115,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31',
'35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11',
',14,18,,,,,40,44,48,54,60,64,99,,,,8,,123,127,131,93,96,101,105,109',
'113,116,119,122,126,130,92,95,100,104,108,112,115,,,,,,,42,51,,,,67',
',72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,',
',,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,99,,,,8,,123,127',
'131,93,96,101,105,109,113,116,119,122,126,130,92,95,100,104,108,112',
'115,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1',
'6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,87,,,40,44,48,54',
'60,64,99,,,,8,,123,127,131,93,96,101,105,109,113,116,119,122,126,99',
',,,,,123,127,131,93,96,101,105,,42,51,,,,67,,72,9,5,,20,23,27,31,35',
'38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14',
'18,,,,,40,44,48,54,60,64,99,,,,8,,123,127,131,93,96,101,105,109,113',
'116,119,122,126,,,,,,,,,,296,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35',
'38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14',
'18,,,,,40,44,48,54,60,64,99,,,,8,,123,127,131,93,96,101,105,109,113',
'116,119,122,126,99,,,,,,123,127,131,93,96,101,105,,42,51,,,,67,,72,9',
'5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58',
',68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,99,,,,8,,123,127,131,93,96',
'101,105,109,113,116,119,122,126,99,,,,,,123,127,131,93,96,101,105,,42',
'51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24',
'28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,99,,,,8,',
'123,127,131,93,96,101,105,109,113,116,99,,,,,,123,127,131,93,96,101',
'105,109,113,116,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62',
',,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44',
'48,54,60,64,99,,,,8,,123,127,131,93,96,101,105,109,113,116,99,,,,,99',
'123,127,131,93,96,123,127,131,93,96,,42,51,,,,67,,72,9,5,,20,23,27,31',
'35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11',
',14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51',
',,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28',
'30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56',
'62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40',
'44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5',
',20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58',
',68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1',
'6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60',
'64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31',
'35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11',
',14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51',
',,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28',
'30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56',
'62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40',
'44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5',
',20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58',
',68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1',
'6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60',
'64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31',
'35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11',
',14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51',
',,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28',
'30,,,,,52,58,,68,,73,2,,11,,14,18,161,,,,40,44,48,54,60,64,,,,,8,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50',
'56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,',
'40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72',
'9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52',
'58,,68,,73,2,,11,,14,18,273,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,42,51,57,63,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62',
',,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44',
'48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20',
'23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68',
',73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10',
',,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,',
',,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35',
'38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14',
'18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,',
'67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30',
',,,,52,58,,68,,73,2,,11,,14,18,161,,,,40,44,48,54,60,64,,,,,8,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56',
'62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,26,,,,40',
'44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,57,63,,67,,72',
'9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52',
'58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71',
'1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54',
'60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27',
'31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2',
',11,,14,18,161,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,',
'17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,',
',8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38',
'46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18',
',,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67',
',72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,',
',,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62',
',,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44',
'48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20',
'23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68',
',73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10',
',,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,',
',,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35',
'38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14',
'18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,',
'67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30',
',,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62',
',,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44',
'48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20',
'23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68',
',73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10',
',,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,',
',,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35',
'38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14',
'18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,',
'67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30',
',,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62',
',,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44',
'48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20',
'23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68',
',73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10',
',,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,',
',,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35',
'38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14',
'18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,',
'67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30',
',,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62',
',,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44',
'48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20',
'23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68',
',73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10',
',,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,',
',,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35',
'38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14',
'18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,',
'67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30',
',,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62',
',,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44',
'48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20',
'23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68',
',73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10',
',,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,',
',,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35',
'38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14',
'18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,',
'67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30',
',,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62',
',,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44',
'48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20',
'23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68',
',73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10',
',,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,',
',,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,,67,,72,9,5,,20,23,27,31,35',
'38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,52,58,,68,,73,2,,11,,14',
'18,,,,,40,44,48,54,60,64,,,,,8,,,,,,,,,,,,,,,,,,,,,,,,,,,,,42,51,,,',
'67,,72,9,5,,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30',
',,,,52,58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,,,,,8,,20,23,27',
'31,35,38,46,50,56,62,,,,,,,,,,,24,28,,,,,,42,51,,,,67,,72,11,5,,18,',
',,97,,106,,,,,,,,,,,,,,,,,,,,,,,110,114,,,,128,,,,102,,,,,,,,,,99,67',
',72,,5,123,127,131,93,96,101,105,109,113,116,119,122,126,130,92,95,100',
'104,108,112,115,118,121,125,129,91,94,98,103,107,245,,117,120,124,,',
',,,,265,20,23,27,31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,,,,,,',
'58,,68,,73,2,,11,,14,18,,,,,40,44,48,54,60,64,,97,,106,8,,,,,,,,,,,',
',,,,,,,,,,110,114,,,,128,,42,51,102,,,67,,72,,5,,,99,,,,,,123,127,131',
'93,96,101,105,109,113,116,119,122,126,130,92,95,100,104,108,112,115',
'118,121,125,129,91,94,98,103,107,111,,117,120,124,,,,,,,304,20,23,27',
'31,35,38,46,50,56,62,,,,71,1,6,10,,,17,24,28,30,,,,,,58,,68,,73,2,,11',
',14,18,,,,,40,44,48,54,60,64,,97,,106,8,,,,20,23,27,31,35,38,46,50,56',
'62,,,,,,,,,110,114,24,28,,128,,42,51,102,,,67,,72,,5,11,,99,18,,,,,123',
'127,131,93,96,101,105,109,113,116,119,122,126,130,92,95,100,104,108',
'112,115,118,121,125,129,91,94,98,103,107,111,,117,120,124,97,,106,,',
',308,,,67,,72,,5,,,,,,,,,,,,110,114,,,,128,,,,102,,,,,,,,,,99,,,,,,123',
'127,131,93,96,101,105,109,113,116,119,122,126,130,92,95,100,104,108',
'112,115,118,121,125,129,91,94,98,103,107,245,,117,120,124,97,,106,,',
',,,,,,,,,,,,,,,,,,,,110,114,,,,128,,,,102,,,,,,,,,,99,,,,,,123,127,131',
'93,96,101,105,109,113,116,119,122,126,130,92,95,100,104,108,112,115',
'118,121,125,129,91,94,98,103,107,111,,117,120,124,97,,106,,,,,,,,,,',
',,,,,,,,,,,,110,114,,,,128,,,,102,,,,,,,,,,99,,,,,,123,127,131,93,96',
'101,105,109,113,116,119,122,126,130,92,95,100,104,108,112,115,118,121',
'125,129,91,94,98,103,107,111,,117,120,124,97,,106,,,,,,,,,,,,,,,,,,',
',,,,110,114,,,,128,,,,102,,,,,,,,,,99,,,,,,123,127,131,93,96,101,105',
'109,113,116,119,122,126,130,92,95,100,104,108,112,115,118,121,125,129',
'91,94,98,103,107,111,,117,120,124,97,,106,,,,,,,,,,,,,,,,,,,,,,,110',
'114,,,,128,,,,102,,,,,,,,,,99,,,,,,123,127,131,93,96,101,105,109,113',
'116,119,122,126,130,92,95,100,104,108,112,115,118,121,125,129,91,94',
'98,103,107,111,,117,120,124,97,,106,,,,,,,,,,,,,,,,,,,,,,,110,114,,',
',128,,,,102,,,,,,,,,,99,,,,,,123,127,131,93,96,101,105,109,113,116,119',
'122,126,130,92,95,100,104,108,112,115,118,121,125,129,91,94,98,103,107',
'111,,117,120,124,97,,106,,,,,,,,,,,,,,,,,,,,,,,110,114,,,,128,,,,102',
',,,,,,,,,99,,,,,,123,127,131,93,96,101,105,109,113,116,119,122,126,130',
'92,95,100,104,108,112,115,118,121,125,129,91,94,98,103,107,111,,117',
'120,124,97,,106,,,,,,,,,,,,,,,,,,,,,,,110,114,,,,128,,,,102,,,,,,,,',
',99,,,,,,123,127,131,93,96,101,105,109,113,116,119,122,126,130,92,95',
'100,104,108,112,115,118,121,125,129,91,94,98,103,107,111,,117,120,124',
'97,,106,,,,,,,,,,,,,,,,,,,,,,,110,114,,,,128,,,,102,,,,,,,,,,99,,,,',
',123,127,131,93,96,101,105,109,113,116,119,122,126,130,92,95,100,104',
'108,112,115,118,121,125,129,91,94,98,103,107,111,,117,120,124,97,,106',
',,,,,,,,,,,,,,,,,,,,,,110,114,,,,128,,,,102,,,,,,,,,,99,,,,,,123,127',
'131,93,96,101,105,109,113,116,119,122,126,130,92,95,100,104,108,112',
'115,118,121,125,129,91,94,98,103,107,111,,117,120,124,97,,106,,,,,,',
',,,,,,,,,,,,,,,,110,114,,,,128,,,,102,,,,,,,,,,99,,,,,,123,127,131,93',
'96,101,105,109,113,116,119,122,126,130,92,95,100,104,108,112,115,118',
'121,125,129,91,94,98,103,107,111,,117,120,124,97,,106,,,,,,,,,,,,,,',
',,,,,,,,110,114,,,,128,,,,102,,,,,,,,,,99,,,,,,123,127,131,93,96,101',
'105,109,113,116,119,122,126,130,92,95,100,104,108,112,115,118,121,125',
'129,91,94,98,103,107,111,,117,120,124,97,,106,,,,,,,,,,,,,,,,,,,,,,',
'110,114,,,,128,,,,102,,,,,,,,,,99,,,,,,123,127,131,93,96,101,105,109',
'113,116,119,122,126,130,92,95,100,104,108,112,115,118,121,125,129,91',
'94,98,103,107,111,,117,120,124,97,,106,,,,,,,,,,,,,,,,,,,,,,,110,114',
',,,128,,,,102,,,,,,,,26,,99,,,,,,123,127,131,93,96,101,105,109,113,116',
'119,122,126,130,92,95,100,104,108,112,115,118,121,125,129,91,94,98,103',
'107,111,,117,120,124,97,,106,,,,,,,,,,,,,,,,,,,,,,,110,114,,,,128,,',
',102,,,,,,,,,,99,,,,,,123,127,131,93,96,101,105,109,113,116,119,122',
'126,130,92,95,100,104,108,112,115,118,121,125,129,91,94,98,103,107,111',
',117,120,124,97,,106,,,,,,,,,,,,,,,,,,,,,,,110,114,,,,128,,,,102,,,',
',,,,,,99,,,,,,123,127,131,93,96,101,105,109,113,116,119,122,126,130',
'92,95,100,104,108,112,115,118,121,125,129,91,94,98,103,107,111,,117',
'120,124,97,,106,,,,,,,,,,,,,,,,,,,,,,,110,114,,,,128,,,,102,,,,,,,,239',
',99,,,,,,123,127,131,93,96,101,105,109,113,116,119,122,126,130,92,95',
'100,104,108,112,115,118,121,125,129,91,94,98,103,107,111,,117,120,124',
'97,,106,,,,,,,,,,,,,,,,,,,,,,,110,114,,,,128,,,,102,,,,,,,,26,,99,,',
',,,123,127,131,93,96,101,105,109,113,116,119,122,126,130,92,95,100,104',
'108,112,115,118,121,125,129,91,94,98,103,107,111,,117,120,124,97,,106',
',,,,,,,,,,,,,,,,,,,,,,110,114,,,,128,,,,102,,,,,,,,,,99,,,,,,123,127',
'131,93,96,101,105,109,113,116,119,122,126,130,92,95,100,104,108,112',
'115,118,121,125,129,91,94,98,103,107,111,,117,120,124,110,114,,,,,,',
',102,,,,,,,,,,99,,,,,,123,127,131,93,96,101,105,109,113,116,119,122',
'126,130,92,95,100,104,108,112,115,118,121,125,129,91,94,98,103,107,111',
',117,120,124,110,114,,,,,,,,102,,,,,,,,,,99,,,,,,123,127,131,93,96,101',
'105,109,113,116,119,122,126,130,92,95,100,104,108,112,115,118,121,125',
'129,91,94,98,103,107,111,110,114,,,,,,,,102,,,,,,,,,,99,,,,,,123,127',
'131,93,96,101,105,109,113,116,119,122,126,130,92,95,100,104,108,112',
'115,118,121,125,129,91,94,98,103,107,111,110,114,,,,,,,,102,,,,,,,,',
',99,,,,,,123,127,131,93,96,101,105,109,113,116,119,122,126,130,92,95',
'100,104,108,112,115,118,121,125,129,91,94,98,103,107,111,110,114,,,',
',,,,102,,,,,,,,,,99,,,,,,123,127,131,93,96,101,105,109,113,116,119,122',
'126,130,92,95,100,104,108,112,115,118,121,125,129,91,94,98,103,107,111',
'110,114,,,,,,,,102,,,,,,,,,,99,,,,,,123,127,131,93,96,101,105,109,113',
'116,119,122,126,130,92,95,100,104,108,112,115,118,121,125,129,91,94',
'98,103,107,111,114,,,,,,,,102,,,,,,,,,,99,,,,,,123,127,131,93,96,101',
'105,109,113,116,119,122,126,130,92,95,100,104,108,112,115,118,121,125',
'129,91,94,98,103,107,111,114,,,,,,,,102,,,,,,,,,,99,,,,,,123,127,131',
'93,96,101,105,109,113,116,119,122,126,130,92,95,100,104,108,112,115',
'118,121,125,129,91,94,98,103,107,111,114,,,,,,,,102,,,,,,,,,,99,,,,',
',123,127,131,93,96,101,105,109,113,116,119,122,126,130,92,95,100,104',
'108,112,115,118,121,125,129,91,94,98,103,107,111,114,,,,,,,,102,,,,',
',,,,,99,,,,,,123,127,131,93,96,101,105,109,113,116,119,122,126,130,92',
'95,100,104,108,112,115,118,121,125,129,91,94,98,103,107,111,114,,,,',
',,,102,,,,,,,,,,99,,,,,,123,127,131,93,96,101,105,109,113,116,119,122',
'126,130,92,95,100,104,108,112,115,118,121,125,129,91,94,98,103,107,111',
'102,,,,,,,,,,99,,,,,,123,127,131,93,96,101,105,109,113,116,119,122,126',
'130,92,95,100,104,108,112,115,118,121,125,129,91,94,98,103,107,102,',
',,,,,,,,99,,,,,,123,127,131,93,96,101,105,109,113,116,119,122,126,130',
'92,95,100,104,108,112,115,118,121,125,129,91,94,98,103,107,102,,,,,',
',,,,99,,,,,,123,127,131,93,96,101,105,109,113,116,119,122,126,130,92',
'95,100,104,108,112,115,118,121,125,129,91,94,98,103,107,99,,,,,,123',
'127,131,93,96,101,105,109,113,116,119,122,126,130,92,95,100,104,108',
'112,115,118,121,125,129,91,94,98,103,107,99,,,,,,123,127,131,93,96,101',
'105,109,113,116,119,122,126,130,92,95,100,104,108,112,115,118,121,125',
'129,91,94,98,103,107,99,,,,,,123,127,131,93,96,101,105,109,113,116,119',
'122,126,130,92,95,100,104,108,112,115,118,121,125,129,91,94,98,103,107',
'99,,,,,,123,127,131,93,96,101,105,109,113,116,119,122,126,130,92,95',
'100,104,108,112,115,118,121,125,129,91,94,98,103,107,99,,,,,,123,127',
'131,93,96,101,105,109,113,116,119,122,126,130,92,95,100,104,108,112',
'115,118,121,125,129,91,94,98,103,107' ]
        racc_action_table = arr = Array.new(9713, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'78,138,78,99,99,99,99,99,99,99,99,99,99,185,185,83,99,99,99,99,293,239',
'99,99,99,78,78,185,293,239,78,99,34,99,78,99,99,256,99,254,99,99,288',
'138,78,37,99,99,99,99,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78',
'78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,266,78,78,78,99,99,235',
'235,288,99,247,99,98,99,78,98,98,98,98,98,98,98,98,98,98,164,66,66,98',
'98,98,98,172,168,98,98,98,98,280,169,268,246,98,98,30,98,280,98,98,249',
'98,245,98,98,247,247,247,249,98,98,98,98,98,98,176,248,29,29,98,266',
'266,268,71,248,280,86,172,172,172,268,90,90,268,235,172,249,111,235',
'75,75,142,234,234,141,36,36,135,98,98,76,76,248,98,66,98,124,98,66,124',
'124,124,124,124,124,124,124,124,124,36,86,86,124,124,124,124,25,25,124',
'124,124,124,133,249,249,132,124,124,237,124,291,124,124,177,124,89,124',
'124,178,160,165,72,124,124,124,124,124,124,165,72,182,154,124,36,269',
'269,75,154,154,234,75,16,36,234,33,33,36,76,33,299,299,76,237,237,237',
'206,165,72,165,72,237,124,124,160,160,160,124,160,124,5,124,10,5,5,5',
'5,5,5,5,5,5,5,301,191,2,5,5,5,5,191,191,5,5,5,5,167,167,167,110,5,5',
'167,5,,5,5,157,5,,5,5,,157,157,,5,5,5,5,5,5,203,263,263,,5,,203,203',
'203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203',
'203,203,205,205,188,82,82,,5,5,188,188,,5,,5,122,5,,122,122,122,122',
'122,122,122,122,122,122,,152,,122,122,122,122,152,152,122,122,122,122',
',,,,122,122,,122,,122,122,224,122,,122,122,,224,224,,122,122,122,122',
'122,122,222,,,,122,,222,222,222,222,222,222,222,222,222,222,222,222',
'222,222,222,222,222,222,222,222,222,,,156,,,,122,122,156,156,,122,,122',
'8,122,,8,8,8,8,8,8,8,8,8,8,,150,,8,8,8,8,150,150,8,8,8,8,,,,,8,8,,8',
',8,8,151,8,,8,8,,151,151,,8,8,8,8,8,8,216,,,,8,,216,216,216,216,216',
'216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,,,80',
',,,8,8,80,80,,8,,8,9,8,,9,9,9,9,9,9,9,9,9,9,,,,9,9,9,9,,,9,9,9,9,,,',
',9,9,,9,,9,9,,9,,9,9,,,,,9,9,9,9,9,9,213,,,,9,,213,213,213,213,213,213',
'213,213,213,213,213,213,213,213,213,213,213,213,213,213,213,,,,,,,9',
'9,,,,9,,9,300,9,,300,300,300,300,300,300,300,300,300,300,,,,300,300',
'300,300,,,300,300,300,300,,,,,300,300,,300,,300,300,,300,,300,300,,',
',,300,300,300,300,300,300,199,,,,300,,199,199,199,199,199,199,199,199',
'199,199,199,199,199,199,199,199,199,199,199,199,199,,,,,,,300,300,,',
',300,,300,121,300,,121,121,121,121,121,121,121,121,121,121,,,,121,121',
'121,121,,,121,121,121,121,,,,,121,121,,121,,121,121,,121,,121,121,,',
',,121,121,121,121,121,121,207,,,,121,,207,207,207,207,207,207,207,207',
'207,207,207,207,207,207,207,207,207,207,207,207,207,,,,,,,121,121,,',
',121,,121,17,121,,17,17,17,17,17,17,17,17,17,17,,,,17,17,17,17,,,17',
'17,17,17,,,,,17,17,,17,,17,17,,17,,17,17,,,,,17,17,17,17,17,17,219,',
',,17,,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219',
'219,219,219,219,219,,,,,,,17,17,,,,17,,17,120,17,,120,120,120,120,120',
'120,120,120,120,120,,,,120,120,120,120,,,120,120,120,120,,,,,120,120',
',120,,120,120,,120,,120,120,,,,,120,120,120,120,120,120,210,,,,120,',
'210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210',
'210,210,210,210,,,,,,,120,120,,,,120,,120,26,120,,26,26,26,26,26,26',
'26,26,26,26,,,,26,26,26,26,,,26,26,26,26,,,,,26,26,,26,,26,26,,26,,26',
'26,,26,,,26,26,26,26,26,26,190,,,,26,,190,190,190,190,190,190,190,190',
'190,190,190,190,190,208,,,,,,208,208,208,208,208,208,208,,26,26,,,,26',
',26,275,26,,275,275,275,275,275,275,275,275,275,275,,,,275,275,275,275',
',,275,275,275,275,,,,,275,275,,275,,275,275,,275,,275,275,,,,,275,275',
'275,275,275,275,187,,,,275,,187,187,187,187,187,187,187,187,187,187',
'187,187,187,,,,,,,,,,275,,,,,275,275,,,,275,,275,273,275,,273,273,273',
'273,273,273,273,273,273,273,,,,273,273,273,273,,,273,273,273,273,,,',
',273,273,,273,,273,273,,273,,273,273,,,,,273,273,273,273,273,273,223',
',,,273,,223,223,223,223,223,223,223,223,223,223,223,223,223,211,,,,',
',211,211,211,211,211,211,211,,273,273,,,,273,,273,272,273,,272,272,272',
'272,272,272,272,272,272,272,,,,272,272,272,272,,,272,272,272,272,,,',
',272,272,,272,,272,272,,272,,272,272,,,,,272,272,272,272,272,272,195',
',,,272,,195,195,195,195,195,195,195,195,195,195,195,195,195,204,,,,',
',204,204,204,204,204,204,204,,272,272,,,,272,,272,267,272,,267,267,267',
'267,267,267,267,267,267,267,,,,267,267,267,267,,,267,267,267,267,,,',
',267,267,,267,,267,267,,267,,267,267,,,,,267,267,267,267,267,267,217',
',,,267,,217,217,217,217,217,217,217,217,217,217,220,,,,,,220,220,220',
'220,220,220,220,220,220,220,,267,267,,,,267,,267,262,267,,262,262,262',
'262,262,262,262,262,262,262,,,,262,262,262,262,,,262,262,262,262,,,',
',262,262,,262,,262,262,,262,,262,262,,,,,262,262,262,262,262,262,214',
',,,262,,214,214,214,214,214,214,214,214,214,214,200,,,,,196,200,200',
'200,200,200,196,196,196,196,196,,262,262,,,,262,,262,261,262,,261,261',
'261,261,261,261,261,261,261,261,,,,261,261,261,261,,,261,261,261,261',
',,,,261,261,,261,,261,261,,261,,261,261,,,,,261,261,261,261,261,261',
',,,,261,,,,,,,,,,,,,,,,,,,,,,,,,,,,,261,261,,,,261,,261,252,261,,252',
'252,252,252,252,252,252,252,252,252,,,,252,252,252,252,,,252,252,252',
'252,,,,,252,252,,252,,252,252,,252,,252,252,,,,,252,252,252,252,252',
'252,,,,,252,,,,,,,,,,,,,,,,,,,,,,,,,,,,,252,252,,,,252,,252,40,252,',
'40,40,40,40,40,40,40,40,40,40,,,,40,40,40,40,,,40,40,40,40,,,,,40,40',
',40,,40,40,,40,,40,40,,,,,40,40,40,40,40,40,,,,,40,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,40,40,,,,40,,40,44,40,,44,44,44,44,44,44,44,44,44,44,,,,44',
'44,44,44,,,44,44,44,44,,,,,44,44,,44,,44,44,,44,,44,44,,,,,44,44,44',
'44,44,44,,,,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,,44,44,,,,44,,44,48,44,,48',
'48,48,48,48,48,48,48,48,48,,,,48,48,48,48,,,48,48,48,48,,,,,48,48,,48',
',48,48,,48,,48,48,,,,,48,48,48,48,48,48,,,,,48,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,48,48,,,,48,,48,52,48,,52,52,52,52,52,52,52,52,52,52,,,,52,52',
'52,52,,,52,52,52,52,,,,,52,52,,52,,52,52,,52,,52,52,,,,,52,52,52,52',
'52,52,,,,,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,52,52,,,,52,,52,54,52,,54,54',
'54,54,54,54,54,54,54,54,,,,54,54,54,54,,,54,54,54,54,,,,,54,54,,54,',
'54,54,,54,,54,54,,,,,54,54,54,54,54,54,,,,,54,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,54,54,,,,54,,54,58,54,,58,58,58,58,58,58,58,58,58,58,,,,58,58',
'58,58,,,58,58,58,58,,,,,58,58,,58,,58,58,,58,,58,58,,,,,58,58,58,58',
'58,58,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,,58,58,,,,58,,58,60,58,,60,60',
'60,60,60,60,60,60,60,60,,,,60,60,60,60,,,60,60,60,60,,,,,60,60,,60,',
'60,60,,60,,60,60,,,,,60,60,60,60,60,60,,,,,60,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,60,60,,,,60,,60,64,60,,64,64,64,64,64,64,64,64,64,64,,,,64,64',
'64,64,,,64,64,64,64,,,,,64,64,,64,,64,64,,64,,64,64,,,,,64,64,64,64',
'64,64,,,,,64,,,,,,,,,,,,,,,,,,,,,,,,,,,,,64,64,,,,64,,64,251,64,,251',
'251,251,251,251,251,251,251,251,251,,,,251,251,251,251,,,251,251,251',
'251,,,,,251,251,,251,,251,251,,251,,251,251,,,,,251,251,251,251,251',
'251,,,,,251,,,,,,,,,,,,,,,,,,,,,,,,,,,,,251,251,,,,251,,251,67,251,',
'67,67,67,67,67,67,67,67,67,67,,,,67,67,67,67,,,67,67,67,67,,,,,67,67',
',67,,67,67,,67,,67,67,67,,,,67,67,67,67,67,67,,,,,67,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,67,67,,,,67,,67,68,67,,68,68,68,68,68,68,68,68,68,68,,',
',68,68,68,68,,,68,68,68,68,,,,,68,68,,68,,68,68,,68,,68,68,,,,,68,68',
'68,68,68,68,,,,,68,,,,,,,,,,,,,,,,,,,,,,,,,,,,,68,68,,,,68,,68,242,68',
',242,242,242,242,242,242,242,242,242,242,,,,242,242,242,242,,,242,242',
'242,242,,,,,242,242,,242,,242,242,,242,,242,242,242,,,,242,242,242,242',
'242,242,,,,,242,,,,,,,,,,,,,,,,,,,,,,,,,,,,,242,242,242,242,,242,,242',
'241,242,,241,241,241,241,241,241,241,241,241,241,,,,241,241,241,241',
',,241,241,241,241,,,,,241,241,,241,,241,241,,241,,241,241,,,,,241,241',
'241,241,241,241,,,,,241,,,,,,,,,,,,,,,,,,,,,,,,,,,,,241,241,,,,241,',
'241,73,241,,73,73,73,73,73,73,73,73,73,73,,,,73,73,73,73,,,73,73,73',
'73,,,,,73,73,,73,,73,73,,73,,73,73,,,,,73,73,73,73,73,73,,,,,73,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,73,73,,,,73,,73,119,73,,119,119,119,119,119',
'119,119,119,119,119,,,,119,119,119,119,,,119,119,119,119,,,,,119,119',
',119,,119,119,,119,,119,119,,,,,119,119,119,119,119,119,,,,,119,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,119,119,,,,119,,119,184,119,,184,184,184,184',
'184,184,184,184,184,184,,,,184,184,184,184,,,184,184,184,184,,,,,184',
'184,,184,,184,184,,184,,184,184,,,,,184,184,184,184,184,184,,,,,184',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,184,184,,,,184,,184,77,184,,77,77,77,77',
'77,77,77,77,77,77,,,,77,77,77,77,,,77,77,77,77,,,,,77,77,,77,,77,77',
',77,,77,77,77,,,,77,77,77,77,77,77,,,,,77,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,77,77,,,,77,,77,0,77,,0,0,0,0,0,0,0,0,0,0,,,,0,0,0,0,,,0,0,0,0,,,',
',0,0,,0,,0,0,,0,,0,0,0,,,,0,0,0,0,0,0,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,0,0,0,0,,0,,0,183,0,,183,183,183,183,183,183,183,183,183,183,,,',
'183,183,183,183,,,183,183,183,183,,,,,183,183,,183,,183,183,,183,,183',
'183,,,,,183,183,183,183,183,183,,,,,183,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'183,183,,,,183,,183,161,183,,161,161,161,161,161,161,161,161,161,161',
',,,161,161,161,161,,,161,161,161,161,,,,,161,161,,161,,161,161,,161',
',161,161,,,,,161,161,161,161,161,161,,,,,161,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,161,161,,,,161,,161,146,161,,146,146,146,146,146,146,146,146,146',
'146,,,,146,146,146,146,,,146,146,146,146,,,,,146,146,,146,,146,146,',
'146,,146,146,146,,,,146,146,146,146,146,146,,,,,146,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,146,146,,,,146,,146,144,146,,144,144,144,144,144,144,144',
'144,144,144,,,,144,144,144,144,,,144,144,144,144,,,,,144,144,,144,,144',
'144,,144,,144,144,,,,,144,144,144,144,144,144,,,,,144,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,144,144,,,,144,,144,118,144,,118,118,118,118,118,118,118',
'118,118,118,,,,118,118,118,118,,,118,118,118,118,,,,,118,118,,118,,118',
'118,,118,,118,118,,,,,118,118,118,118,118,118,,,,,118,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,118,118,,,,118,,118,140,118,,140,140,140,140,140,140,140',
'140,140,140,,,,140,140,140,140,,,140,140,140,140,,,,,140,140,,140,,140',
'140,,140,,140,140,,,,,140,140,140,140,140,140,,,,,140,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,140,140,,,,140,,140,85,140,,85,85,85,85,85,85,85,85,85',
'85,,,,85,85,85,85,,,85,85,85,85,,,,,85,85,,85,,85,85,,85,,85,85,,,,',
'85,85,85,85,85,85,,,,,85,,,,,,,,,,,,,,,,,,,,,,,,,,,,,85,85,,,,85,,85',
'131,85,,131,131,131,131,131,131,131,131,131,131,,,,131,131,131,131,',
',131,131,131,131,,,,,131,131,,131,,131,131,,131,,131,131,,,,,131,131',
'131,131,131,131,,,,,131,,,,,,,,,,,,,,,,,,,,,,,,,,,,,131,131,,,,131,',
'131,130,131,,130,130,130,130,130,130,130,130,130,130,,,,130,130,130',
'130,,,130,130,130,130,,,,,130,130,,130,,130,130,,130,,130,130,,,,,130',
'130,130,130,130,130,,,,,130,,,,,,,,,,,,,,,,,,,,,,,,,,,,,130,130,,,,130',
',130,129,130,,129,129,129,129,129,129,129,129,129,129,,,,129,129,129',
'129,,,129,129,129,129,,,,,129,129,,129,,129,129,,129,,129,129,,,,,129',
'129,129,129,129,129,,,,,129,,,,,,,,,,,,,,,,,,,,,,,,,,,,,129,129,,,,129',
',129,91,129,,91,91,91,91,91,91,91,91,91,91,,,,91,91,91,91,,,91,91,91',
'91,,,,,91,91,,91,,91,91,,91,,91,91,,,,,91,91,91,91,91,91,,,,,91,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,91,91,,,,91,,91,92,91,,92,92,92,92,92,92,92',
'92,92,92,,,,92,92,92,92,,,92,92,92,92,,,,,92,92,,92,,92,92,,92,,92,92',
',,,,92,92,92,92,92,92,,,,,92,,,,,,,,,,,,,,,,,,,,,,,,,,,,,92,92,,,,92',
',92,93,92,,93,93,93,93,93,93,93,93,93,93,,,,93,93,93,93,,,93,93,93,93',
',,,,93,93,,93,,93,93,,93,,93,93,,,,,93,93,93,93,93,93,,,,,93,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,93,93,,,,93,,93,94,93,,94,94,94,94,94,94,94,94',
'94,94,,,,94,94,94,94,,,94,94,94,94,,,,,94,94,,94,,94,94,,94,,94,94,',
',,,94,94,94,94,94,94,,,,,94,,,,,,,,,,,,,,,,,,,,,,,,,,,,,94,94,,,,94',
',94,95,94,,95,95,95,95,95,95,95,95,95,95,,,,95,95,95,95,,,95,95,95,95',
',,,,95,95,,95,,95,95,,95,,95,95,,,,,95,95,95,95,95,95,,,,,95,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,95,95,,,,95,,95,96,95,,96,96,96,96,96,96,96,96',
'96,96,,,,96,96,96,96,,,96,96,96,96,,,,,96,96,,96,,96,96,,96,,96,96,',
',,,96,96,96,96,96,96,,,,,96,,,,,,,,,,,,,,,,,,,,,,,,,,,,,96,96,,,,96',
',96,97,96,,97,97,97,97,97,97,97,97,97,97,,,,97,97,97,97,,,97,97,97,97',
',,,,97,97,,97,,97,97,,97,,97,97,,,,,97,97,97,97,97,97,,,,,97,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,97,97,,,,97,,97,125,97,,125,125,125,125,125,125',
'125,125,125,125,,,,125,125,125,125,,,125,125,125,125,,,,,125,125,,125',
',125,125,,125,,125,125,,,,,125,125,125,125,125,125,,,,,125,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,125,125,,,,125,,125,117,125,,117,117,117,117,117',
'117,117,117,117,117,,,,117,117,117,117,,,117,117,117,117,,,,,117,117',
',117,,117,117,,117,,117,117,,,,,117,117,117,117,117,117,,,,,117,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,117,117,,,,117,,117,100,117,,100,100,100,100',
'100,100,100,100,100,100,,,,100,100,100,100,,,100,100,100,100,,,,,100',
'100,,100,,100,100,,100,,100,100,,,,,100,100,100,100,100,100,,,,,100',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,100,100,,,,100,,100,101,100,,101,101,101',
'101,101,101,101,101,101,101,,,,101,101,101,101,,,101,101,101,101,,,',
',101,101,,101,,101,101,,101,,101,101,,,,,101,101,101,101,101,101,,,',
',101,,,,,,,,,,,,,,,,,,,,,,,,,,,,,101,101,,,,101,,101,102,101,,102,102',
'102,102,102,102,102,102,102,102,,,,102,102,102,102,,,102,102,102,102',
',,,,102,102,,102,,102,102,,102,,102,102,,,,,102,102,102,102,102,102',
',,,,102,,,,,,,,,,,,,,,,,,,,,,,,,,,,,102,102,,,,102,,102,103,102,,103',
'103,103,103,103,103,103,103,103,103,,,,103,103,103,103,,,103,103,103',
'103,,,,,103,103,,103,,103,103,,103,,103,103,,,,,103,103,103,103,103',
'103,,,,,103,,,,,,,,,,,,,,,,,,,,,,,,,,,,,103,103,,,,103,,103,116,103',
',116,116,116,116,116,116,116,116,116,116,,,,116,116,116,116,,,116,116',
'116,116,,,,,116,116,,116,,116,116,,116,,116,116,,,,,116,116,116,116',
'116,116,,,,,116,,,,,,,,,,,,,,,,,,,,,,,,,,,,,116,116,,,,116,,116,105',
'116,,105,105,105,105,105,105,105,105,105,105,,,,105,105,105,105,,,105',
'105,105,105,,,,,105,105,,105,,105,105,,105,,105,105,,,,,105,105,105',
'105,105,105,,,,,105,,,,,,,,,,,,,,,,,,,,,,,,,,,,,105,105,,,,105,,105',
'106,105,,106,106,106,106,106,106,106,106,106,106,,,,106,106,106,106',
',,106,106,106,106,,,,,106,106,,106,,106,106,,106,,106,106,,,,,106,106',
'106,106,106,106,,,,,106,,,,,,,,,,,,,,,,,,,,,,,,,,,,,106,106,,,,106,',
'106,107,106,,107,107,107,107,107,107,107,107,107,107,,,,107,107,107',
'107,,,107,107,107,107,,,,,107,107,,107,,107,107,,107,,107,107,,,,,107',
'107,107,107,107,107,,,,,107,,,,,,,,,,,,,,,,,,,,,,,,,,,,,107,107,,,,107',
',107,108,107,,108,108,108,108,108,108,108,108,108,108,,,,108,108,108',
'108,,,108,108,108,108,,,,,108,108,,108,,108,108,,108,,108,108,,,,,108',
'108,108,108,108,108,,,,,108,,,,,,,,,,,,,,,,,,,,,,,,,,,,,108,108,,,,108',
',108,109,108,,109,109,109,109,109,109,109,109,109,109,,,,109,109,109',
'109,,,109,109,109,109,,,,,109,109,,109,,109,109,,109,,109,109,,,,,109',
'109,109,109,109,109,,,,,109,,,,,,,,,,,,,,,,,,,,,,,,,,,,,109,109,,,,109',
',109,128,109,,128,128,128,128,128,128,128,128,128,128,,,,128,128,128',
'128,,,128,128,128,128,,,,,128,128,,128,,128,128,,128,,128,128,,,,,128',
'128,128,128,128,128,,,,,128,,,,,,,,,,,,,,,,,,,,,,,,,,,,,128,128,,,,128',
',128,126,128,,126,126,126,126,126,126,126,126,126,126,,,,126,126,126',
'126,,,126,126,126,126,,,,,126,126,,126,,126,126,,126,,126,126,,,,,126',
'126,126,126,126,126,,,,,126,,,,,,,,,,,,,,,,,,,,,,,,,,,,,126,126,,,,126',
',126,112,126,,112,112,112,112,112,112,112,112,112,112,,,,112,112,112',
'112,,,112,112,112,112,,,,,112,112,,112,,112,112,,112,,112,112,,,,,112',
'112,112,112,112,112,,,,,112,,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,112,,,,112',
',112,113,112,,113,113,113,113,113,113,113,113,113,113,,,,113,113,113',
'113,,,113,113,113,113,,,,,113,113,,113,,113,113,,113,,113,113,,,,,113',
'113,113,113,113,113,,,,,113,,,,,,,,,,,,,,,,,,,,,,,,,,,,,113,113,,,,113',
',113,114,113,,114,114,114,114,114,114,114,114,114,114,,,,114,114,114',
'114,,,114,114,114,114,,,,,114,114,,114,,114,114,,114,,114,114,,,,,114',
'114,114,114,114,114,,,,,114,,,,,,,,,,,,,,,,,,,,,,,,,,,,,114,114,,,,114',
',114,115,114,,115,115,115,115,115,115,115,115,115,115,,,,115,115,115',
'115,,,115,115,115,115,,,,,115,115,,115,,115,115,,115,,115,115,,,,,115',
'115,115,115,115,115,,,,,115,,,,,,,,,,,,,,,,,,,,,,,,,,,,,115,115,,,,115',
',115,104,115,,104,104,104,104,104,104,104,104,104,104,,,,104,104,104',
'104,,,104,104,104,104,,,,,104,104,,104,,104,104,,104,,104,104,,,,,104',
'104,104,104,104,104,,,,,104,,143,143,143,143,143,143,143,143,143,143',
',,,,,,,,,,143,143,,,,,,104,104,,,,104,,104,143,104,,143,,,,231,,231',
',,,,,,,,,,,,,,,,,,,,,,231,231,,,,231,,,,231,,,,,,,,,,231,143,,143,,143',
'231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231',
'231,231,231,231,231,231,231,231,231,231,231,231,231,231,,231,231,231',
',,,,,,231,296,296,296,296,296,296,296,296,296,296,,,,296,296,296,296',
',,296,296,296,,,,,,,296,,296,,296,296,,296,,296,296,,,,,296,296,296',
'296,296,296,,297,,297,296,,,,,,,,,,,,,,,,,,,,,,297,297,,,,297,,296,296',
'297,,,296,,296,,296,,,297,,,,,,297,297,297,297,297,297,297,297,297,297',
'297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297,297',
'297,297,297,297,,297,297,297,,,,,,,297,6,6,6,6,6,6,6,6,6,6,,,,6,6,6',
'6,,,6,6,6,6,,,,,,6,,6,,6,6,,6,,6,6,,,,,6,6,6,6,6,6,,303,,303,6,,,,1',
'1,1,1,1,1,1,1,1,1,,,,,,,,,303,303,1,1,,303,,6,6,303,,,6,,6,,6,1,,303',
'1,,,,,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303',
'303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,,303,303',
'303,162,,162,,,,303,,,1,,1,,1,,,,,,,,,,,,162,162,,,,162,,,,162,,,,,',
',,,,162,,,,,,162,162,162,162,162,162,162,162,162,162,162,162,162,162',
'162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162',
',162,162,162,306,,306,,,,,,,,,,,,,,,,,,,,,,,306,306,,,,306,,,,306,,',
',,,,,,,306,,,,,,306,306,306,306,306,306,306,306,306,306,306,306,306',
'306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306',
'306,,306,306,306,295,,295,,,,,,,,,,,,,,,,,,,,,,,295,295,,,,295,,,,295',
',,,,,,,,,295,,,,,,295,295,295,295,295,295,295,295,295,295,295,295,295',
'295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295',
'295,,295,295,295,294,,294,,,,,,,,,,,,,,,,,,,,,,,294,294,,,,294,,,,294',
',,,,,,,,,294,,,,,,294,294,294,294,294,294,294,294,294,294,294,294,294',
'294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294,294',
'294,,294,294,294,201,,201,,,,,,,,,,,,,,,,,,,,,,,201,201,,,,201,,,,201',
',,,,,,,,,201,,,,,,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,,201,201,201,289,,289,,,,,,,,,,,,,,,,,,,,,,,289,289,,,,289,,,,289',
',,,,,,,,,289,,,,,,289,289,289,289,289,289,289,289,289,289,289,289,289',
'289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289',
'289,,289,289,289,192,,192,,,,,,,,,,,,,,,,,,,,,,,192,192,,,,192,,,,192',
',,,,,,,,,192,,,,,,192,192,192,192,192,192,192,192,192,192,192,192,192',
'192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192',
'192,,192,192,192,221,,221,,,,,,,,,,,,,,,,,,,,,,,221,221,,,,221,,,,221',
',,,,,,,,,221,,,,,,221,221,221,221,221,221,221,221,221,221,221,221,221',
'221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221',
'221,,221,221,221,180,,180,,,,,,,,,,,,,,,,,,,,,,,180,180,,,,180,,,,180',
',,,,,,,,,180,,,,,,180,180,180,180,180,180,180,180,180,180,180,180,180',
'180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180',
'180,,180,180,180,244,,244,,,,,,,,,,,,,,,,,,,,,,,244,244,,,,244,,,,244',
',,,,,,,,,244,,,,,,244,244,244,244,244,244,244,244,244,244,244,244,244',
'244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244',
'244,,244,244,244,173,,173,,,,,,,,,,,,,,,,,,,,,,,173,173,,,,173,,,,173',
',,,,,,,,,173,,,,,,173,173,173,173,173,173,173,173,173,173,173,173,173',
'173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173',
'173,,173,173,173,282,,282,,,,,,,,,,,,,,,,,,,,,,,282,282,,,,282,,,,282',
',,,,,,,,,282,,,,,,282,282,282,282,282,282,282,282,282,282,282,282,282',
'282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282,282',
'282,,282,282,282,281,,281,,,,,,,,,,,,,,,,,,,,,,,281,281,,,,281,,,,281',
',,,,,,,,,281,,,,,,281,281,281,281,281,281,281,281,281,281,281,281,281',
'281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281,281',
'281,,281,281,281,81,,81,,,,,,,,,,,,,,,,,,,,,,,81,81,,,,81,,,,81,,,,',
',,,81,,81,,,,,,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81',
'81,81,81,81,81,81,81,81,81,81,81,81,81,,81,81,81,274,,274,,,,,,,,,,',
',,,,,,,,,,,,274,274,,,,274,,,,274,,,,,,,,,,274,,,,,,274,274,274,274',
'274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274',
'274,274,274,274,274,274,274,274,274,274,,274,274,274,32,,32,,,,,,,,',
',,,,,,,,,,,,,,32,32,,,,32,,,,32,,,,,,,,,,32,,,,,,32,32,32,32,32,32,32',
'32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32',
'32,,32,32,32,155,,155,,,,,,,,,,,,,,,,,,,,,,,155,155,,,,155,,,,155,,',
',,,,,155,,155,,,,,,155,155,155,155,155,155,155,155,155,155,155,155,155',
'155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155,155',
'155,,155,155,155,153,,153,,,,,,,,,,,,,,,,,,,,,,,153,153,,,,153,,,,153',
',,,,,,,153,,153,,,,,,153,153,153,153,153,153,153,153,153,153,153,153',
'153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153',
'153,153,,153,153,153,271,,271,,,,,,,,,,,,,,,,,,,,,,,271,271,,,,271,',
',,271,,,,,,,,,,271,,,,,,271,271,271,271,271,271,271,271,271,271,271',
'271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271',
'271,271,271,,271,271,271,79,79,,,,,,,,79,,,,,,,,,,79,,,,,,79,79,79,79',
'79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79',
'79,79,79,79,,79,79,79,215,215,,,,,,,,215,,,,,,,,,,215,,,,,,215,215,215',
'215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215',
'215,215,215,215,215,215,215,215,215,215,215,218,218,,,,,,,,218,,,,,',
',,,,218,,,,,,218,218,218,218,218,218,218,218,218,218,218,218,218,218',
'218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218',
'84,84,,,,,,,,84,,,,,,,,,,84,,,,,,84,84,84,84,84,84,84,84,84,84,84,84',
'84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,212,212,,,',
',,,,212,,,,,,,,,,212,,,,,,212,212,212,212,212,212,212,212,212,212,212',
'212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212',
'212,212,212,236,236,,,,,,,,236,,,,,,,,,,236,,,,,,236,236,236,236,236',
'236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236',
'236,236,236,236,236,236,236,236,236,259,,,,,,,,259,,,,,,,,,,259,,,,',
',259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259',
'259,259,259,259,259,259,259,259,259,259,259,259,259,259,285,,,,,,,,285',
',,,,,,,,,285,,,,,,285,285,285,285,285,285,285,285,285,285,285,285,285',
'285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285,285',
'285,258,,,,,,,,258,,,,,,,,,,258,,,,,,258,258,258,258,258,258,258,258',
'258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258',
'258,258,258,258,258,258,286,,,,,,,,286,,,,,,,,,,286,,,,,,286,286,286',
'286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286',
'286,286,286,286,286,286,286,286,286,286,286,209,,,,,,,,209,,,,,,,,,',
'209,,,,,,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209',
'209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,171',
',,,,,,,,,171,,,,,,171,171,171,171,171,171,171,171,171,171,171,171,171',
'171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171',
'197,,,,,,,,,,197,,,,,,197,197,197,197,197,197,197,197,197,197,197,197',
'197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197,197',
'197,163,,,,,,,,,,163,,,,,,163,163,163,163,163,163,163,163,163,163,163',
'163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163',
'163,163,189,,,,,,189,189,189,189,189,189,189,189,189,189,189,189,189',
'189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189',
'198,,,,,,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198',
'198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,193,,,,',
',193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,186,,,,,,186,186',
'186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186',
'186,186,186,186,186,186,186,186,186,186,186,202,,,,,,202,202,202,202',
'202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,202,202,202,202,202,202' ]
        racc_action_check = arr = Array.new(9713, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  3346,  7082,   198,   nil,   nil,   277,  7025,   nil,   463,   556,
   237,   nil,   nil,   nil,   nil,   nil,   251,   835,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   117,  1021,   nil,   nil,    58,
   111,   nil,  8438,   167,    29,   nil,   160,     1,   nil,   nil,
  1765,   nil,   nil,   nil,  1858,   nil,   nil,   nil,  1951,   nil,
   nil,   nil,  2044,   nil,  2137,   nil,   nil,   nil,  2230,   nil,
  2323,   nil,   nil,   nil,  2416,   nil,    92,  2602,  2695,   nil,
   nil,    71,   225,  2974,   nil,   154,   165,  3253,    -2,  8753,
   500,  8268,   339,    15,  8925,  3997,   111,   nil,   nil,   134,
   133,  4369,  4462,  4555,  4648,  4741,  4834,  4927,    91,    -2,
  5206,  5299,  5392,  5485,  6694,  5671,  5764,  5857,  5950,  6043,
   294,    85,  6322,  6415,  6508,  6601,  5578,  5113,  3811,  3067,
   928,   742,   370,   nil,   184,  5020,  6229,   nil,  6136,  4276,
  4183,  4090,   171,   194,   nil,   174,   nil,   nil,    -1,   nil,
  3904,   160,   157,  6749,  3718,   nil,  3625,   nil,   nil,   nil,
   433,   456,   340,  8608,   195,  8523,   407,   270,   nil,   nil,
   184,  3532,  7163,  9451,    24,   224,   nil,   216,    31,    37,
   nil,  9359,    68,  8013,   nil,   nil,   131,   179,   205,   nil,
  7843,   nil,   226,  3439,  3160,   -17,  9595,  1122,   314,  9487,
  1029,   247,  7673,  9559,   nil,  1308,  1515,  9405,  9523,   657,
  1510,  7503,  9631,   285,  1327,   330,   183,   750,  1048,  9312,
   936,  1234,  8981,   564,  1494,  8813,   471,  1401,  8869,   843,
  1417,  7758,   378,  1215,   363,   nil,   nil,   nil,   nil,   nil,
   nil,  6794,   nil,   nil,   157,    72,  9037,   173,   nil,   -13,
   nil,  2881,  2788,   nil,  7928,    50,    40,    46,   140,   124,
   nil,  2509,  1672,   nil,    -5,   nil,    -7,   nil,  9202,  9092,
   nil,  1579,  1486,   302,   nil,   nil,    63,  1393,   118,   155,
   nil,  8693,  1300,  1207,  8353,  1114,   nil,   nil,   nil,   nil,
   113,  8183,  8098,   nil,   nil,  9147,  9257,   nil,    -2,  7588,
   nil,   176,   nil,   -14,  7418,  7333,  6883,  6936,   nil,   170,
   649,   247,   nil,  7078,   nil,   nil,  7248,   nil,   nil ]

racc_action_default = [
    -1,  -180,  -180,   -18,  -125,  -180,   -46,   -19,  -180,  -180,
  -180,   -34,   -20,   -21,   -47,   -22,  -180,  -180,   -30,   -23,
   -28,    -2,  -104,   -29,   -32,    -3,  -180,   -31,   -33,  -180,
  -180,   -35,    -5,  -180,  -173,   -36,    -8,  -180,   -37,    -9,
  -180,   -98,   -96,   -10,  -180,  -105,   -38,   -11,  -180,  -106,
   -39,   -97,  -180,   -12,  -180,  -107,   -40,   -26,  -180,   -13,
  -180,  -108,  -103,   -27,  -180,   -14,  -123,  -135,  -180,   -15,
   -16,  -100,  -117,  -180,   -17,  -180,  -124,  -135,  -180,   -45,
   -50,  -180,  -180,  -180,  -149,    -7,  -180,   -25,    -4,  -156,
  -180,  -180,  -180,  -180,  -180,  -180,  -180,  -180,  -180,   -93,
  -180,  -180,  -180,  -180,  -180,  -180,  -180,  -180,  -180,  -180,
  -180,  -180,  -180,  -180,  -180,  -180,  -180,  -180,  -180,  -180,
  -180,  -180,  -180,   -58,  -180,  -180,  -180,   -57,  -180,  -180,
  -180,  -180,  -180,  -180,  -171,  -173,  -175,  -177,  -180,  -127,
  -180,  -180,  -180,  -180,  -180,  -114,  -135,  -109,  -113,   -95,
   -51,   -48,   -49,  -152,   -52,  -180,   -54,   -53,  -128,  -110,
  -180,  -180,  -136,   -55,  -180,  -117,  -118,  -180,  -180,  -180,
   -44,   -56,  -180,  -136,  -150,  -169,  -180,  -180,  -145,   309,
    -6,   -24,  -180,  -180,  -180,  -180,   -83,   -71,   -60,   -84,
   -72,   -61,  -178,   -85,   -82,   -73,   -62,   -91,   -86,   -74,
   -63,  -179,   -87,   -75,   -64,  -180,  -180,   -76,   -65,   -92,
   -77,   -66,   -88,   -78,   -67,   -89,   -79,   -68,   -90,   -80,
   -69,  -153,   -81,   -70,   -59,   -94,   -99,  -172,  -176,  -174,
  -170,  -180,  -111,  -112,  -126,  -180,   -41,  -180,  -151,  -180,
  -142,  -180,  -180,  -134,  -137,  -180,  -180,  -180,  -180,  -180,
  -116,  -180,  -180,  -131,  -180,  -146,  -180,  -157,  -158,  -159,
  -155,  -180,  -180,  -154,  -102,  -115,  -129,  -180,  -180,  -180,
  -164,  -139,  -180,  -180,  -138,  -180,  -101,  -122,  -120,  -119,
  -180,   -42,   -43,  -148,  -147,  -161,  -160,  -130,  -180,  -143,
  -162,  -180,  -165,  -180,  -140,  -141,  -102,  -180,  -121,  -166,
  -180,  -180,  -168,  -180,  -132,  -167,  -144,  -163,  -133 ]

racc_goto_table = [
    21,   170,    90,   145,    29,   158,   159,    75,   160,    78,
    79,    76,    80,    81,    82,   158,   159,    16,   172,   288,
   270,    84,   185,   278,   279,    85,   136,    25,   178,    88,
   134,   268,   226,   145,   230,   132,   135,   287,   137,   nil,
   nil,   149,   145,   145,   150,   167,   nil,   nil,   151,   292,
   nil,   nil,   152,    86,   nil,   298,   153,   nil,   154,   nil,
   nil,   nil,   155,   nil,   156,   nil,   nil,   nil,   157,   nil,
   nil,   162,   163,   nil,   302,   nil,   nil,   171,   nil,   nil,
   nil,   173,   205,   nil,   nil,   175,    85,   237,   nil,   180,
   nil,   nil,   nil,   nil,   170,   186,   187,   188,   189,   190,
   191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
   201,   202,   203,   204,   nil,   nil,   207,   208,   209,   210,
   211,   212,   213,   214,   215,   216,   217,   228,   218,   219,
   220,   227,   221,   222,   223,   224,   225,   263,   247,   nil,
   nil,   nil,   229,   nil,   231,   nil,   nil,   nil,   236,   234,
   173,   nil,   nil,   235,   nil,   nil,   nil,   238,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   244,   nil,   248,   269,   nil,
   nil,   nil,   nil,   nil,   158,   159,   nil,   170,   170,   nil,
   nil,   255,   nil,   nil,   nil,   nil,   nil,   258,   259,   260,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   269,   nil,   nil,
   nil,   145,   145,   nil,   nil,   nil,   nil,   nil,   nil,   170,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   269,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   272,   nil,   nil,   271,   274,   248,   nil,   280,
   nil,   nil,   nil,   nil,   nil,   281,   282,   nil,   283,   nil,
   284,   nil,   nil,   nil,   nil,   285,   286,   nil,   nil,   293,
   nil,   289,   nil,   nil,   nil,   nil,   294,   295,   nil,   297,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   299,   nil,   nil,   301,   nil,   nil,   nil,   305,
   303,   nil,   nil,   nil,   306 ]

racc_goto_check = [
     2,    21,    40,    30,     4,    36,    31,     6,    37,     5,
     5,    32,     5,     5,     4,    36,    31,     1,    37,    38,
    43,     5,    41,    23,    23,     2,    47,     3,    39,     2,
    45,    42,    26,    30,    44,    25,    46,     8,    48,   nil,
   nil,     4,    30,    30,     5,    34,   nil,   nil,     5,    43,
   nil,   nil,     5,     3,   nil,    23,     5,   nil,     5,   nil,
   nil,   nil,     5,   nil,     5,   nil,   nil,   nil,     5,   nil,
   nil,     5,     5,   nil,    43,   nil,   nil,     5,   nil,   nil,
   nil,     5,    40,   nil,   nil,     4,     2,    37,   nil,     5,
   nil,   nil,   nil,   nil,    21,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,   nil,   nil,     5,     5,     5,     5,
     5,     5,     5,     5,     5,     5,     5,    47,     5,     5,
     5,    45,     5,     5,     5,     5,     4,    41,    34,   nil,
   nil,   nil,     4,   nil,     5,   nil,   nil,   nil,     5,     6,
     5,   nil,   nil,    32,   nil,   nil,   nil,     4,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     5,   nil,     2,    21,   nil,
   nil,   nil,   nil,   nil,    36,    31,   nil,    21,    21,   nil,
   nil,     4,   nil,   nil,   nil,   nil,   nil,     5,     5,     4,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,
   nil,    30,    30,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,   nil,     5,     5,     2,   nil,     2,
   nil,   nil,   nil,   nil,   nil,     5,     5,   nil,     4,   nil,
     4,   nil,   nil,   nil,   nil,     5,     5,   nil,   nil,     2,
   nil,     5,   nil,   nil,   nil,   nil,     5,     5,   nil,     5,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     4,   nil,   nil,     4,   nil,   nil,   nil,     2,
     5,   nil,   nil,   nil,     5 ]

racc_goto_pointer = [
   nil,    17,     0,    27,     4,     4,     6,   nil,  -229,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -71,   nil,  -225,   nil,     2,  -101,   nil,   nil,   nil,
   -33,   -60,    10,   nil,   -27,   nil,   -61,   -59,  -248,   -54,
   -28,   -68,  -208,  -219,  -104,    -4,     2,    -8,     4 ]

racc_goto_default = [
   nil,   nil,   241,   nil,   nil,    32,    36,    39,    43,    47,
    53,    59,    65,    69,    70,    74,     3,     7,    12,    13,
    15,    19,    22,   166,    33,    37,    41,    45,    49,    55,
    61,   147,    66,   148,   nil,     4,   139,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    34,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 99, :_reduce_1,
  1, 99, :_reduce_2,
  1, 99, :_reduce_3,
  2, 99, :_reduce_4,
  1, 101, :_reduce_5,
  3, 101, :_reduce_6,
  2, 101, :_reduce_7,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  3, 102, :_reduce_24,
  2, 102, :_reduce_25,
  1, 100, :_reduce_none,
  1, 100, :_reduce_none,
  1, 120, :_reduce_28,
  1, 120, :_reduce_29,
  1, 120, :_reduce_30,
  1, 120, :_reduce_31,
  1, 120, :_reduce_32,
  1, 120, :_reduce_33,
  1, 120, :_reduce_34,
  1, 120, :_reduce_35,
  1, 120, :_reduce_36,
  1, 120, :_reduce_37,
  1, 120, :_reduce_38,
  1, 120, :_reduce_39,
  1, 120, :_reduce_40,
  3, 108, :_reduce_41,
  3, 121, :_reduce_42,
  3, 121, :_reduce_43,
  1, 121, :_reduce_44,
  2, 112, :_reduce_45,
  1, 112, :_reduce_46,
  1, 119, :_reduce_47,
  2, 107, :_reduce_48,
  2, 107, :_reduce_49,
  2, 107, :_reduce_50,
  2, 107, :_reduce_51,
  2, 107, :_reduce_52,
  2, 107, :_reduce_53,
  2, 107, :_reduce_54,
  2, 107, :_reduce_55,
  2, 107, :_reduce_56,
  2, 107, :_reduce_57,
  2, 107, :_reduce_58,
  3, 107, :_reduce_59,
  3, 107, :_reduce_60,
  3, 107, :_reduce_61,
  3, 107, :_reduce_62,
  3, 107, :_reduce_63,
  3, 107, :_reduce_64,
  3, 107, :_reduce_65,
  3, 107, :_reduce_66,
  3, 107, :_reduce_67,
  3, 107, :_reduce_68,
  3, 107, :_reduce_69,
  3, 107, :_reduce_70,
  3, 107, :_reduce_71,
  3, 107, :_reduce_72,
  3, 107, :_reduce_73,
  3, 107, :_reduce_74,
  3, 107, :_reduce_75,
  3, 107, :_reduce_76,
  3, 107, :_reduce_77,
  3, 107, :_reduce_78,
  3, 107, :_reduce_79,
  3, 107, :_reduce_80,
  3, 107, :_reduce_81,
  3, 107, :_reduce_82,
  3, 107, :_reduce_83,
  3, 107, :_reduce_84,
  3, 107, :_reduce_85,
  3, 107, :_reduce_86,
  3, 107, :_reduce_87,
  3, 107, :_reduce_88,
  3, 107, :_reduce_89,
  3, 107, :_reduce_90,
  3, 107, :_reduce_91,
  3, 107, :_reduce_92,
  2, 118, :_reduce_93,
  3, 106, :_reduce_94,
  2, 106, :_reduce_95,
  1, 123, :_reduce_96,
  1, 123, :_reduce_97,
  1, 122, :_reduce_98,
  3, 122, :_reduce_99,
  1, 124, :_reduce_none,
  4, 124, :_reduce_101,
  4, 117, :_reduce_102,
  1, 104, :_reduce_103,
  1, 104, :_reduce_104,
  1, 104, :_reduce_105,
  1, 104, :_reduce_106,
  1, 104, :_reduce_107,
  1, 104, :_reduce_108,
  2, 104, :_reduce_109,
  2, 104, :_reduce_110,
  2, 129, :_reduce_111,
  2, 129, :_reduce_112,
  1, 129, :_reduce_113,
  1, 129, :_reduce_114,
  3, 131, :_reduce_115,
  3, 126, :_reduce_116,
  0, 132, :_reduce_117,
  1, 132, :_reduce_118,
  3, 132, :_reduce_119,
  3, 132, :_reduce_120,
  4, 132, :_reduce_121,
  3, 132, :_reduce_122,
  1, 105, :_reduce_123,
  2, 105, :_reduce_124,
  1, 105, :_reduce_125,
  3, 116, :_reduce_126,
  2, 130, :_reduce_127,
  2, 130, :_reduce_128,
  3, 134, :_reduce_129,
  4, 134, :_reduce_130,
  4, 133, :_reduce_131,
  6, 128, :_reduce_132,
  7, 128, :_reduce_133,
  3, 125, :_reduce_134,
  0, 135, :_reduce_135,
  1, 135, :_reduce_136,
  2, 135, :_reduce_137,
  3, 135, :_reduce_138,
  3, 135, :_reduce_139,
  4, 135, :_reduce_140,
  4, 135, :_reduce_141,
  2, 135, :_reduce_142,
  1, 136, :_reduce_143,
  3, 136, :_reduce_144,
  3, 110, :_reduce_145,
  4, 110, :_reduce_146,
  5, 110, :_reduce_147,
  3, 137, :_reduce_148,
  2, 111, :_reduce_149,
  3, 127, :_reduce_150,
  3, 113, :_reduce_151,
  2, 113, :_reduce_152,
  3, 113, :_reduce_153,
  4, 114, :_reduce_154,
  4, 114, :_reduce_155,
  1, 138, :_reduce_156,
  3, 138, :_reduce_157,
  2, 139, :_reduce_158,
  2, 139, :_reduce_159,
  3, 139, :_reduce_160,
  3, 139, :_reduce_161,
  5, 115, :_reduce_162,
  7, 115, :_reduce_163,
  1, 140, :_reduce_164,
  2, 140, :_reduce_165,
  3, 141, :_reduce_166,
  4, 141, :_reduce_167,
  3, 141, :_reduce_168,
  3, 142, :_reduce_169,
  2, 143, :_reduce_170,
  1, 144, :_reduce_171,
  2, 144, :_reduce_172,
  0, 145, :_reduce_173,
  2, 145, :_reduce_174,
  1, 146, :_reduce_175,
  2, 146, :_reduce_176,
  2, 109, :_reduce_177,
  3, 109, :_reduce_178,
  3, 109, :_reduce_179 ]

racc_reduce_n = 180

racc_shift_n = 309

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :UNLESS => 4,
  :NUMBER => 5,
  :STRING => 6,
  :REGEX => 7,
  :TRUE => 8,
  :FALSE => 9,
  :YES => 10,
  :NO => 11,
  :ON => 12,
  :OFF => 13,
  :IDENTIFIER => 14,
  :PROPERTY_ACCESS => 15,
  :PROTOTYPE_ACCESS => 16,
  :CODE => 17,
  :PARAM => 18,
  :NEW => 19,
  :RETURN => 20,
  :TRY => 21,
  :CATCH => 22,
  :FINALLY => 23,
  :THROW => 24,
  :BREAK => 25,
  :CONTINUE => 26,
  :FOR => 27,
  :IN => 28,
  :OF => 29,
  :BY => 30,
  :WHEN => 31,
  :WHILE => 32,
  :SWITCH => 33,
  :LEADING_WHEN => 34,
  :DELETE => 35,
  :INSTANCEOF => 36,
  :TYPEOF => 37,
  :SUPER => 38,
  :EXTENDS => 39,
  :ARGUMENTS => 40,
  :NEWLINE => 41,
  :COMMENT => 42,
  :JS => 43,
  :INDENT => 44,
  :OUTDENT => 45,
  "?" => 46,
  :UMINUS => 47,
  :NOT => 48,
  "!" => 49,
  "!!" => 50,
  "~" => 51,
  "++" => 52,
  "--" => 53,
  "*" => 54,
  "/" => 55,
  "%" => 56,
  "+" => 57,
  "-" => 58,
  "<<" => 59,
  ">>" => 60,
  ">>>" => 61,
  "&" => 62,
  "|" => 63,
  "^" => 64,
  "<=" => 65,
  "<" => 66,
  ">" => 67,
  ">=" => 68,
  "==" => 69,
  "!=" => 70,
  :IS => 71,
  :ISNT => 72,
  "&&" => 73,
  "||" => 74,
  :AND => 75,
  :OR => 76,
  "-=" => 77,
  "+=" => 78,
  "/=" => 79,
  "*=" => 80,
  "%=" => 81,
  "." => 82,
  :ASSIGN => 83,
  "||=" => 84,
  "&&=" => 85,
  "?=" => 86,
  "=>" => 87,
  "==>" => 88,
  "\n" => 89,
  ";" => 90,
  "," => 91,
  "[" => 92,
  "]" => 93,
  "{" => 94,
  "}" => 95,
  "(" => 96,
  ")" => 97 }

racc_nt_base = 98

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "UNLESS",
  "NUMBER",
  "STRING",
  "REGEX",
  "TRUE",
  "FALSE",
  "YES",
  "NO",
  "ON",
  "OFF",
  "IDENTIFIER",
  "PROPERTY_ACCESS",
  "PROTOTYPE_ACCESS",
  "CODE",
  "PARAM",
  "NEW",
  "RETURN",
  "TRY",
  "CATCH",
  "FINALLY",
  "THROW",
  "BREAK",
  "CONTINUE",
  "FOR",
  "IN",
  "OF",
  "BY",
  "WHEN",
  "WHILE",
  "SWITCH",
  "LEADING_WHEN",
  "DELETE",
  "INSTANCEOF",
  "TYPEOF",
  "SUPER",
  "EXTENDS",
  "ARGUMENTS",
  "NEWLINE",
  "COMMENT",
  "JS",
  "INDENT",
  "OUTDENT",
  "\"?\"",
  "UMINUS",
  "NOT",
  "\"!\"",
  "\"!!\"",
  "\"~\"",
  "\"++\"",
  "\"--\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\">>>\"",
  "\"&\"",
  "\"|\"",
  "\"^\"",
  "\"<=\"",
  "\"<\"",
  "\">\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "IS",
  "ISNT",
  "\"&&\"",
  "\"||\"",
  "AND",
  "OR",
  "\"-=\"",
  "\"+=\"",
  "\"/=\"",
  "\"*=\"",
  "\"%=\"",
  "\".\"",
  "ASSIGN",
  "\"||=\"",
  "\"&&=\"",
  "\"?=\"",
  "\"=>\"",
  "\"==>\"",
  "\"\\n\"",
  "\";\"",
  "\",\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Root",
  "Terminator",
  "Expressions",
  "Block",
  "Expression",
  "Value",
  "Call",
  "Code",
  "Operation",
  "Assign",
  "If",
  "Try",
  "Throw",
  "Return",
  "While",
  "For",
  "Switch",
  "Extends",
  "Splat",
  "Existence",
  "Comment",
  "Literal",
  "AssignObj",
  "ParamList",
  "FuncGlyph",
  "Param",
  "Array",
  "Object",
  "Parenthetical",
  "Range",
  "Accessor",
  "Invocation",
  "Index",
  "AssignList",
  "Super",
  "Arguments",
  "ArgList",
  "SimpleArgs",
  "Catch",
  "ForVariables",
  "ForSource",
  "Whens",
  "When",
  "IfBlock",
  "ElsIf",
  "ElsIfs",
  "ElseBody",
  "IfEnd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_1(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_2(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 51)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_5(val, _values, result)
     result = Expressions.wrap(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_6(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_24(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 86)
  def _reduce_25(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_28(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_29(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_30(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_31(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_32(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_33(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_34(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_35(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_36(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_37(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_38(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_39(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_40(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_41(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_42(val, _values, result)
     result = AssignNode.new(ValueNode.new(val[0]), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_43(val, _values, result)
     result = AssignNode.new(ValueNode.new(LiteralNode.new(val[0])), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 121)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 126)
  def _reduce_45(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 127)
  def _reduce_46(val, _values, result)
     result = ReturnNode.new(ValueNode.new(Value.new('null'))) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_47(val, _values, result)
     result = CommentNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_48(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 140)
  def _reduce_49(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_50(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_51(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_52(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_53(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_54(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 146)
  def _reduce_55(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_56(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_57(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_58(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_59(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_60(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 153)
  def _reduce_61(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_62(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_63(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_64(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_65(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_66(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_67(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_68(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_69(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_70(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_71(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_72(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_73(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_74(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_75(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_76(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_77(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_78(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_79(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_80(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_81(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_82(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_83(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_84(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_85(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_86(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_87(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 187)
  def _reduce_88(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 188)
  def _reduce_89(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 189)
  def _reduce_90(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_91(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 192)
  def _reduce_92(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 197)
  def _reduce_93(val, _values, result)
     result = ExistenceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_94(val, _values, result)
     result = CodeNode.new(val[0], val[2], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 203)
  def _reduce_95(val, _values, result)
     result = CodeNode.new([], val[1], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_96(val, _values, result)
     result = :func 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 209)
  def _reduce_97(val, _values, result)
     result = :boundfunc 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 214)
  def _reduce_98(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 215)
  def _reduce_99(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'grammar.y', 221)
  def _reduce_101(val, _values, result)
     result = SplatNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 226)
  def _reduce_102(val, _values, result)
     result = SplatNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 231)
  def _reduce_103(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 232)
  def _reduce_104(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_105(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_106(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 235)
  def _reduce_107(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_108(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 237)
  def _reduce_109(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 238)
  def _reduce_110(val, _values, result)
     result = ValueNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 243)
  def _reduce_111(val, _values, result)
     result = AccessorNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_112(val, _values, result)
     result = AccessorNode.new(val[1], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_113(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_114(val, _values, result)
     result = SliceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 251)
  def _reduce_115(val, _values, result)
     result = IndexNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 256)
  def _reduce_116(val, _values, result)
     result = ObjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 261)
  def _reduce_117(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_118(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_119(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 264)
  def _reduce_120(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 266)
  def _reduce_121(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 267)
  def _reduce_122(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 272)
  def _reduce_123(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 273)
  def _reduce_124(val, _values, result)
     result = val[1].new_instance 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 274)
  def _reduce_125(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 279)
  def _reduce_126(val, _values, result)
     result = ExtendsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 284)
  def _reduce_127(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 285)
  def _reduce_128(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 290)
  def _reduce_129(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 291)
  def _reduce_130(val, _values, result)
     result = val[1] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 296)
  def _reduce_131(val, _values, result)
     result = CallNode.new(Value.new('super'), val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 302)
  def _reduce_132(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 304)
  def _reduce_133(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 309)
  def _reduce_134(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 314)
  def _reduce_135(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 315)
  def _reduce_136(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_137(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 317)
  def _reduce_138(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 318)
  def _reduce_139(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 319)
  def _reduce_140(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 320)
  def _reduce_141(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 321)
  def _reduce_142(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 326)
  def _reduce_143(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 327)
  def _reduce_144(val, _values, result)
     result = ([val[0]] << val[2]).flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 332)
  def _reduce_145(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 333)
  def _reduce_146(val, _values, result)
     result = TryNode.new(val[1], nil, nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 335)
  def _reduce_147(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 340)
  def _reduce_148(val, _values, result)
     result = [val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 345)
  def _reduce_149(val, _values, result)
     result = ThrowNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 350)
  def _reduce_150(val, _values, result)
     result = ParentheticalNode.new(val[1], val[0].line) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 355)
  def _reduce_151(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 356)
  def _reduce_152(val, _values, result)
     result = WhileNode.new(val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 357)
  def _reduce_153(val, _values, result)
     result = WhileNode.new(val[2], Expressions.wrap(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 364)
  def _reduce_154(val, _values, result)
     result = ForNode.new(val[0], val[3], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 365)
  def _reduce_155(val, _values, result)
     result = ForNode.new(val[3], val[2], val[1][0], val[1][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 370)
  def _reduce_156(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 371)
  def _reduce_157(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 376)
  def _reduce_158(val, _values, result)
     result = {:source => val[1]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 377)
  def _reduce_159(val, _values, result)
     result = {:source => val[1], :object => true} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 379)
  def _reduce_160(val, _values, result)
     result = val[0].merge(:filter => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 381)
  def _reduce_161(val, _values, result)
     result = val[0].merge(:step => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 387)
  def _reduce_162(val, _values, result)
     result = val[3].rewrite_condition(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 389)
  def _reduce_163(val, _values, result)
     result = val[3].rewrite_condition(val[1]).add_else(val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 394)
  def _reduce_164(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 395)
  def _reduce_165(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 400)
  def _reduce_166(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 402)
  def _reduce_167(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 403)
  def _reduce_168(val, _values, result)
     result = val[2].add_comment(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 408)
  def _reduce_169(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 413)
  def _reduce_170(val, _values, result)
     result = val[1].force_statement 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 418)
  def _reduce_171(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 419)
  def _reduce_172(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 424)
  def _reduce_173(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 425)
  def _reduce_174(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 430)
  def _reduce_175(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 431)
  def _reduce_176(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 436)
  def _reduce_177(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 437)
  def _reduce_178(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 438)
  def _reduce_179(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true, :invert => true}) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
