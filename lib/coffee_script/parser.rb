#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

module CoffeeScript

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 462)
  # Lex and parse a CoffeeScript.
  def parse(code)
    # Uncomment the following line to enable grammar debugging, in combination
    # with the -g flag in the Rake build task.
    # @yydebug = true
    @tokens = Lexer.new.tokenize(code)
    do_parse
  end

  # Retrieve the next token from the list.
  def next_token
    @tokens.shift
  end

  # Raise a custom error class that knows about line numbers.
  def on_error(error_token_id, error_value, value_stack)
    raise ParseError.new(token_to_str(error_token_id), error_value, value_stack)
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'135,200,143,28,31,34,38,42,45,51,56,61,64,289,290,182,264,104,105,106',
'252,264,273,59,49,293,102,59,103,49,57,65,131,136,8,14,192,152,190,289',
'290,166,147,151,302,8,14,202,54,200,186,59,199,8,14,-186,-186,147,151',
'155,158,161,163,165,130,134,139,142,146,150,154,157,160,164,168,129',
'133,138,141,145,149,153,156,159,162,167,128,132,137,140,144,148,181',
'8,14,202,12,26,314,32,35,12,40,206,28,31,34,38,42,45,51,56,61,64,296',
'281,59,211,2,147,151,21,25,-186,-186,95,97,41,95,97,52,57,65,66,94,147',
'151,94,7,13,125,22,200,33,36,59,269,187,49,54,208,209,264,283,71,74',
'5,10,16,19,49,8,14,298,59,44,47,214,215,49,72,3,49,59,98,188,95,97,-186',
'-186,95,97,8,14,259,94,8,14,202,94,8,14,192,72,3,-186,-186,121,26,59',
'32,35,12,40,292,28,31,34,38,42,45,51,56,61,64,285,8,14,59,2,49,196,21',
'25,49,197,98,115,41,95,97,52,57,65,66,-186,-186,198,94,7,13,282,22,110',
'33,36,-186,-186,59,49,54,81,104,105,106,71,74,5,10,16,19,102,280,103',
'147,151,44,47,104,105,106,214,215,49,8,14,319,102,78,103,104,105,106',
'171,172,-186,-186,-186,-186,102,210,103,8,14,72,3,81,213,78,26,180,32',
'35,12,40,125,28,31,34,38,42,45,51,56,61,64,104,105,106,,2,,,21,25,102',
',103,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,104,105,106,71',
'74,5,10,16,19,102,,103,,,44,47,147,151,155,158,161,163,165,130,134,139',
'142,146,150,154,157,160,164,168,129,133,138,141,145,,,,72,3,,,,26,,32',
'35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57',
'65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,147',
'151,155,158,161,163,165,130,134,139,142,146,150,154,157,160,164,168',
'129,133,138,141,145,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51',
'56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49',
'54,,,,,71,74,5,10,16,19,,,,,,44,47,147,151,155,158,161,163,165,130,134',
'139,142,146,150,154,157,160,164,168,129,133,138,141,145,,,,72,3,,,,26',
',32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52',
'57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47',
'147,151,155,158,161,163,165,130,134,139,142,146,150,154,157,160,164',
'168,129,133,138,141,145,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45',
'51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,',
',,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,147,151,155,158,161,163,165',
'130,134,139,142,146,150,154,157,160,164,168,129,133,138,141,145,,,,72',
'3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,',
',,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19',
',,,,,44,47,147,151,155,158,161,163,165,130,134,139,142,146,150,154,157',
'160,164,168,129,133,138,141,145,,,,72,3,,,,26,,32,35,12,40,,28,31,34',
'38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22',
',33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,147,151,155,158,161',
'163,165,130,134,139,142,146,150,154,157,160,164,168,129,133,138,141',
'145,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2',
',,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74',
'5,10,16,19,,,,,,44,47,147,151,155,158,161,163,165,130,134,139,142,146',
'150,154,157,160,164,168,129,133,138,141,145,,,,72,3,,,,26,,32,35,12',
'40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66',
',,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,147,151',
'155,158,161,163,165,130,134,139,142,146,150,154,157,147,151,155,158',
'161,163,165,130,134,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51',
'56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49',
'54,,,,,71,74,5,10,16,19,,,,,,44,47,147,151,155,158,161,163,165,130,134',
'139,142,146,150,154,157,147,151,155,158,161,163,165,130,134,,,72,3,',
',,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41',
',,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,',
',44,47,147,151,155,158,161,163,165,130,134,139,142,146,150,154,157,147',
'151,155,158,161,163,165,130,134,,,72,3,,,,26,,32,35,12,40,,28,31,34',
'38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22',
',33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,147,151,155,158,161',
'163,165,130,134,139,142,146,150,154,157,147,151,155,158,161,163,165',
'130,134,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,',
',2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71',
'74,5,10,16,19,,,,,,44,47,147,151,155,158,161,163,165,130,134,147,151',
'155,158,161,163,165,130,134,147,151,155,158,161,163,165,,72,3,,,,26',
',32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52',
'57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47',
'147,151,155,158,161,163,165,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12',
'40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66',
',,,,7,13,,22,,33,36,,,,49,54,113,,,,71,74,5,10,16,19,,,,,,44,47,,,,',
',,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51',
'56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49',
'54,,,,,71,74,5,10,16,19,,,,,315,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3',
',,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,',
'41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,',
',,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34',
'38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22',
',33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,',
',,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,',
',21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5',
'10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40',
',28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,',
',,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,',
',,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61',
'64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,',
',,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26',
',32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52',
'57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47',
',,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45',
'51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,',
',,49,54,,123,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,',
',72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25',
',,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16',
'19,,,,,305,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,',
'28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,',
',7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,',
',,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61',
'64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,',
',,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26',
',32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52',
'57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47',
',,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45',
'51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,',
',,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72',
'3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,',
',,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19',
',,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31',
'34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13',
',22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,',
',,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,',
',2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71',
'74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35',
'12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65',
'66,,,,,7,13,,22,,33,36,,,,49,54,278,,,,71,74,5,10,16,19,,,,,,44,47,',
',,,,,,,,,,,,,,,,,,,,,,,,,72,3,8,14,,26,,32,35,12,40,,28,31,34,38,42',
'45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36',
',,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72',
'3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,',
',,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19',
',,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31',
'34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13',
',22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,',
',,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,',
',2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71',
'74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35',
'12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65',
'66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,',
',,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51',
'56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49',
'54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,',
',26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41',
',,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,',
',44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38',
'42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33',
'36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,',
',,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21',
'25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10',
'16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,',
'28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,',
',7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,',
',,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61',
'64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,',
',,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26',
',32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52',
'57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47',
',,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45',
'51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,',
',,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72',
'3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,',
',,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19',
',,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31',
'34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13',
',22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,',
',,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,',
',2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71',
'74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35',
'12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65',
'66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,',
',,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51',
'56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49',
'54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,',
',26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41',
',,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,',
',44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38',
'42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33',
'36,,,,49,54,113,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,',
',,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,',
'21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5',
'10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40',
',28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,',
',,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,',
',,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61',
'64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,',
',,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26',
',32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52',
'57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47',
',,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45',
'51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,',
',,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72',
'3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,',
',,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19',
',,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31',
'34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13',
',22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,',
',,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,',
',2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71',
'74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35',
'12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65',
'66,,,,,7,13,,22,,33,36,,,,49,54,113,,,,71,74,5,10,16,19,,,,,,44,47,',
',,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45',
'51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,',
',,49,54,59,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,',
'72,3,8,14,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21',
'25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10',
'16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,',
'28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,',
',7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,',
',,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61',
'64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,',
',,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26',
',32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52',
'57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47',
',,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45',
'51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,',
',,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72',
'3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,',
',,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19',
',,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31',
'34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13',
',22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,',
',,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,',
',2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71',
'74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35',
'12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65',
'66,,,,,7,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,',
',,,,,,,,,,,,,,,,,,,,,,72,3,,,,26,,32,35,12,40,,28,31,34,38,42,45,51',
'56,61,64,,,,,2,,,21,25,,,,,41,,,52,57,65,66,,,,,7,13,,22,,33,36,,,,49',
'54,,,,,71,74,5,10,16,19,,,,,,44,47,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,',
',26,,32,35,12,40,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41',
',,52,57,65,66,,,,,7,13,,22,,33,36,,,,49,54,135,,143,,71,74,5,10,16,19',
',,,,,44,47,,,,,,,,,,,,,,,,131,136,,,,152,,,,166,,72,3,,,,26,,32,35,',
'40,,,,147,151,155,158,161,163,165,130,134,139,142,146,150,154,157,160',
'164,168,129,133,138,141,145,149,153,156,159,162,167,128,132,137,140',
'144,148,135,,143,,,,,,,324,,,,,,,,,,,,,,,,,,,,,,,131,136,,,,152,,,,166',
',,,,,,,,,,,,,,,147,151,155,158,161,163,165,130,134,139,142,146,150,154',
'157,160,164,168,129,133,138,141,145,149,153,156,159,162,167,128,132',
'137,140,144,148,,,,,,,,,,318,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21',
'25,,,,,41,,,52,57,65,66,,,,,,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16',
'19,,,,,,44,47,,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,72',
'3,52,57,65,26,,32,35,,40,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19',
',,,,,,,,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,72,3,52',
'57,65,26,,32,35,,40,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,,,,',
',,,,,28,31,34,38,42,45,51,56,61,64,,,,,2,,,21,25,,,,,41,72,3,52,57,65',
'26,,32,35,,40,13,,22,,33,36,,,,49,54,,,,,71,74,5,10,16,19,28,31,34,38',
'42,45,51,56,61,64,,,,,,,,,,,,,,,,,,57,65,,,,,72,3,,,,26,,32,35,,40,135',
'54,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,131,136,,,,152,,,,166,,,,,,,,,26',
',32,35,,40,,147,151,155,158,161,163,165,130,134,139,142,146,150,154',
'157,160,164,168,129,133,138,141,145,149,153,156,159,162,167,128,132',
'137,140,144,148,135,,143,,,,,,,,,,,,,,,,,,,,,,,323,,,,,,,131,136,,,',
'152,,,,166,,,,,,,,,,,,,,,,147,151,155,158,161,163,165,130,134,139,142',
'146,150,154,157,160,164,168,129,133,138,141,145,149,153,156,159,162',
'167,128,132,137,140,144,148,135,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,131',
'136,,,,152,,,,166,,,,,,,,,,,,,,,,147,151,155,158,161,163,165,130,134',
'139,142,146,150,154,157,160,164,168,129,133,138,141,145,149,153,156',
'159,162,167,128,132,137,140,144,148,135,,143,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,131,136,,,,152,,,,166,,,,,,,,,,,,,,,,147,151,155,158,161,163,165',
'130,134,139,142,146,150,154,157,160,164,168,129,133,138,141,145,149',
'153,156,159,162,167,128,132,137,140,144,148,135,,143,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,131,136,,,,152,,,,166,,,,,,,,,,,,,,,,147,151,155,158,161',
'163,165,130,134,139,142,146,150,154,157,160,164,168,129,133,138,141',
'145,149,153,156,159,162,167,128,132,137,140,144,148,135,,143,,,,,,,',
',,,,,,,,,,,,,,,274,,,,,,,131,136,,,,152,,,,166,,,,,,,,,,,,,,,,147,151',
'155,158,161,163,275,130,134,139,142,146,150,154,157,160,164,168,129',
'133,138,141,145,149,153,156,159,162,167,128,132,137,140,144,148,135',
',143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,131,136,,,,152,,,,166,,,,,,,,,,,,',
',,,147,151,155,158,161,163,165,130,134,139,142,146,150,154,157,160,164',
'168,129,133,138,141,145,149,153,156,159,162,167,128,132,137,140,144',
'148,135,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,131,136,,,,152,,,,166,,,,',
',,,,,,,,,,,147,151,155,158,161,163,165,130,134,139,142,146,150,154,157',
'160,164,168,129,133,138,141,145,149,153,156,159,162,167,128,132,137',
'140,144,148,135,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,131,136,,,,152,,,',
'166,,,,,,,,,,,,,,,,147,151,155,158,161,163,204,130,134,139,142,146,150',
'154,157,160,164,168,129,133,138,141,145,149,153,156,159,162,167,128',
'132,137,140,144,148,135,,143,,,,,,,,,,,,,,,,,,,,,,,325,,,,,,,131,136',
',,,152,,,,166,,,,,,,,,,,,,,,,147,151,155,158,161,163,165,130,134,139',
'142,146,150,154,157,160,164,168,129,133,138,141,145,149,153,156,159',
'162,167,128,132,137,140,144,148,135,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,131,136,,,,152,,,,166,,,,,,,,,,,,,,,,147,151,155,158,161,163,165,130',
'134,139,142,146,150,154,157,160,164,168,129,133,138,141,145,149,153',
'156,159,162,167,128,132,137,140,144,148,135,,143,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,131,136,,,,152,,,,166,,,,,,,,,,,,,,,,147,151,155,158,161,163',
'165,130,134,139,142,146,150,154,157,160,164,168,129,133,138,141,145',
'149,153,156,159,162,167,128,132,137,140,144,148,135,,143,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,131,136,,,,152,,,,166,,,,,,,,,,,,,,,,147,151,155,158',
'161,163,165,130,134,139,142,146,150,154,157,160,164,168,129,133,138',
'141,145,149,153,156,159,162,167,128,132,137,140,144,148,135,,143,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,131,136,,,,152,,,,166,,,,,,,,,,,,,,,,147,151',
'155,158,161,163,165,130,134,139,142,146,150,154,157,160,164,168,129',
'133,138,141,145,149,153,156,159,162,167,128,132,137,140,144,148,135',
',143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,131,136,,,,152,,,,166,,,,,,,,59,,',
',,,,,147,151,155,158,161,163,165,130,134,139,142,146,150,154,157,160',
'164,168,129,133,138,141,145,149,153,156,159,162,167,128,132,137,140',
'144,148,135,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,131,136,,,,152,,,,166',
',,,,,,,59,,,,,,,,147,151,155,158,161,163,165,130,134,139,142,146,150',
'154,157,160,164,168,129,133,138,141,145,149,153,156,159,162,167,128',
'132,137,140,144,148,135,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,131,136,,',
',152,,,,166,,,,,,,,,,,,,,,,147,151,155,158,161,163,165,130,134,139,142',
'146,150,154,157,160,164,168,129,133,138,141,145,149,153,156,159,162',
'167,128,132,137,140,144,148,135,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,131',
'136,,,,152,,,,166,,,,,,,,,,,,,,,,147,151,155,158,161,163,165,130,134',
'139,142,146,150,154,157,160,164,168,129,133,138,141,145,149,153,156',
'159,162,167,128,132,137,140,144,148,135,,143,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,131,136,,,,152,,,,166,,,,,,,,,,,,,,,,147,151,155,158,161,163,165',
'130,134,139,142,146,150,154,157,160,164,168,129,133,138,141,145,149',
'153,156,159,162,167,128,132,137,140,144,148,135,,143,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,131,136,,,,152,,,,166,,,,,,,,,,,,,,,,147,151,155,158,161',
'163,165,130,134,139,142,146,150,154,157,160,164,168,129,133,138,141',
'145,149,153,156,159,162,167,128,132,137,140,144,148,135,,143,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,131,136,,,,152,,,,166,,,,,,,,,,,,,,,,147,151,155',
'158,161,163,165,130,134,139,142,146,150,154,157,160,164,168,129,133',
'138,141,145,149,153,156,159,162,167,128,132,137,140,144,148,135,,143',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,131,136,,,,152,,,,166,,,,,,,,,,,,,,,,147',
'151,155,158,161,163,165,130,134,139,142,146,150,154,157,160,164,168',
'129,133,138,141,145,149,153,156,159,162,167,128,132,137,140,144,148',
'135,,143,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,131,136,,,,152,,,,166,,,,,,,,185',
',,,,,,,147,151,155,158,161,163,165,130,134,139,142,146,150,154,157,160',
'164,168,129,133,138,141,145,149,153,156,159,162,167,128,132,137,140',
'144,148,131,136,,,,,,,,166,,,,,,,,,,,,,,,,147,151,155,158,161,163,165',
'130,134,139,142,146,150,154,157,160,164,168,129,133,138,141,145,149',
'153,156,159,162,167,128,132,137,140,144,148,131,136,,,,,,,,166,,,,,',
',,,,,,,,,,147,151,155,158,161,163,165,130,134,139,142,146,150,154,157',
'160,164,168,129,133,138,141,145,149,153,156,159,162,167,128,132,137',
'140,144,148,131,136,,,,,,,,166,,,,,,,,,,,,,,,,147,151,155,158,161,163',
'165,130,134,139,142,146,150,154,157,160,164,168,129,133,138,141,145',
'149,153,156,159,162,167,128,132,137,140,144,148,136,,,,,,,,166,,,,,',
',,,,,,,,,,147,151,155,158,161,163,165,130,134,139,142,146,150,154,157',
'160,164,168,129,133,138,141,145,149,153,156,159,162,167,128,132,137',
'140,144,148,136,,,,,,,,166,,,,,,,,,,,,,,,,147,151,155,158,161,163,165',
'130,134,139,142,146,150,154,157,160,164,168,129,133,138,141,145,149',
'153,156,159,162,167,128,132,137,140,144,148,136,,,,,,,,166,,,,,,,,,',
',,,,,,147,151,155,158,161,163,165,130,134,139,142,146,150,154,157,160',
'164,168,129,133,138,141,145,149,153,156,159,162,167,128,132,137,140',
'144,148,136,,,,,,,,166,,,,,,,,,,,,,,,,147,151,155,158,161,163,165,130',
'134,139,142,146,150,154,157,160,164,168,129,133,138,141,145,149,153',
'156,159,162,167,128,132,137,140,144,148,136,,,,,,,,166,,,,,,,,,,,,,',
',,147,151,155,158,161,163,165,130,134,139,142,146,150,154,157,160,164',
'168,129,133,138,141,145,149,153,156,159,162,167,128,132,137,140,144',
'148,166,,,,,,,,,,,,,,,,147,151,155,158,161,163,165,130,134,139,142,146',
'150,154,157,160,164,168,129,133,138,141,145,149,153,156,159,162,167',
'128,132,137,140,144,148,166,,,,,,,,,,,,,,,,147,151,155,158,161,163,165',
'130,134,139,142,146,150,154,157,160,164,168,129,133,138,141,145,149',
'153,156,159,162,167,128,132,137,140,144,148,166,,,,,,,,,,,,,,,,147,151',
'155,158,161,163,165,130,134,139,142,146,150,154,157,160,164,168,129',
'133,138,141,145,149,153,156,159,162,167,128,132,137,140,144,148,147',
'151,155,158,161,163,165,130,134,139,142,146,150,154,157,160,164,168',
'129,133,138,141,145,149,153,156,159,162,167,128,132,137,140,144,148',
'147,151,155,158,161,163,165,130,134,139,142,146,150,154,157,160,164',
'168,129,133,138,141,145,149,153,156,159,162,167,128,132,137,140,144',
'148,147,151,155,158,161,163,165,130,134,139,142,146,150,154,157,160',
'164,168,129,133,138,141,145,149,153,156,159,162,167,128,132,137,140',
'144,148,147,151,155,158,161,163,165,130,134,139,142,146,150,154,157',
'160,164,168,129,133,138,141,145,149,153,156,159,162,167,128,132,137',
'140,144,148,147,151,155,158,161,163,165,130,134,139,142,146,150,154',
'157,160,164,168,129,133,138,141,145,149,153,156,159,162,167,128,132',
'137,140,144,148,147,151,155,158,161,163,165,130,134,139,142,146,150',
'154,157,160,164,168,129,133,138,141,145,149,153,156,159,162,167,128',
'132,137,140,144,148,147,151,155,158,161,163,165,130,134,139,142,146',
'150,154,157,160,164,168,129,133,138,141,145,149,153,156,159,162,167',
'128,132,137,140,144,148,147,151,155,158,161,163,165,130,134,139,142',
'146,150,154,157,160,164,168,129,133,138,141,145,149,153,156,159,162',
'167,128,132,137,140,144,148' ]
        racc_action_table = arr = Array.new(11137, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'116,112,116,21,21,21,21,21,21,21,21,21,21,216,216,82,295,30,30,30,165',
'185,193,261,295,259,30,216,30,185,21,21,116,116,100,100,100,116,100',
'291,291,116,245,245,275,112,112,112,21,193,94,299,112,313,313,119,119',
'116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116',
'116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116',
'116,82,193,193,193,78,21,299,21,21,103,21,116,103,103,103,103,103,103',
'103,103,103,103,263,205,209,122,103,248,248,103,103,118,118,192,192',
'103,98,98,103,103,103,103,192,250,250,98,103,103,66,103,205,103,103',
'78,189,95,103,103,117,117,263,208,103,103,103,103,103,103,263,122,122',
'263,282,103,103,126,126,192,182,182,98,283,98,97,191,191,175,175,26',
'26,62,62,180,191,205,205,205,26,189,189,189,103,103,83,83,53,103,41',
'103,103,135,103,252,135,135,135,135,135,135,135,135,135,135,213,192',
'192,296,135,191,104,135,135,26,105,26,36,135,272,272,135,135,135,135',
'89,89,106,272,135,135,207,135,32,135,135,174,174,69,135,135,181,70,70',
'70,135,135,135,135,135,135,70,204,70,242,242,135,135,90,90,90,220,220',
'272,262,262,312,90,75,90,91,91,91,70,70,85,85,88,88,91,121,91,67,67',
'135,135,2,125,1,135,81,135,135,5,135,131,5,5,5,5,5,5,5,5,5,5,257,257',
'257,,5,,,5,5,257,,257,,5,,,5,5,5,5,,,,,5,5,,5,,5,5,,,,5,5,,256,256,256',
'5,5,5,5,5,5,256,,256,,,5,5,237,237,237,237,237,237,237,237,237,237,237',
'237,237,237,237,237,237,237,237,237,237,237,237,,,,5,5,,,,5,,5,5,7,5',
',7,7,7,7,7,7,7,7,7,7,,,,,7,,,7,7,,,,,7,,,7,7,7,7,,,,,7,7,,7,,7,7,,,',
'7,7,,,,,7,7,7,7,7,7,,,,,,7,7,240,240,240,240,240,240,240,240,240,240',
'240,240,240,240,240,240,240,240,240,240,240,240,240,,,,7,7,,,,7,,7,7',
'10,7,,10,10,10,10,10,10,10,10,10,10,,,,,10,,,10,10,,,,,10,,,10,10,10',
'10,,,,,10,10,,10,,10,10,,,,10,10,,,,,10,10,10,10,10,10,,,,,,10,10,234',
'234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234',
'234,234,234,234,234,,,,10,10,,,,10,,10,10,12,10,,12,12,12,12,12,12,12',
'12,12,12,,,,,12,,,12,12,,,,,12,,,12,12,12,12,,,,,12,12,,12,,12,12,,',
',12,12,,,,,12,12,12,12,12,12,,,,,,12,12,243,243,243,243,243,243,243',
'243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,,,,12',
'12,,,,12,,12,12,13,12,,13,13,13,13,13,13,13,13,13,13,,,,,13,,,13,13',
',,,,13,,,13,13,13,13,,,,,13,13,,13,,13,13,,,,13,13,,,,,13,13,13,13,13',
'13,,,,,,13,13,230,230,230,230,230,230,230,230,230,230,230,230,230,230',
'230,230,230,230,230,230,230,230,230,,,,13,13,,,,13,,13,13,16,13,,16',
'16,16,16,16,16,16,16,16,16,,,,,16,,,16,16,,,,,16,,,16,16,16,16,,,,,16',
'16,,16,,16,16,,,,16,16,,,,,16,16,16,16,16,16,,,,,,16,16,246,246,246',
'246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246',
'246,246,246,,,,16,16,,,,16,,16,16,19,16,,19,19,19,19,19,19,19,19,19',
'19,,,,,19,,,19,19,,,,,19,,,19,19,19,19,,,,,19,19,,19,,19,19,,,,19,19',
',,,,19,19,19,19,19,19,,,,,,19,19,222,222,222,222,222,222,222,222,222',
'222,222,222,222,222,222,222,222,222,222,222,222,222,222,,,,19,19,,,',
'19,,19,19,134,19,,134,134,134,134,134,134,134,134,134,134,,,,,134,,',
'134,134,,,,,134,,,134,134,134,134,,,,,134,134,,134,,134,134,,,,134,134',
',,,,134,134,134,134,134,134,,,,,,134,134,227,227,227,227,227,227,227',
'227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,,,,134',
'134,,,,134,,134,134,22,134,,22,22,22,22,22,22,22,22,22,22,,,,,22,,,22',
'22,,,,,22,,,22,22,22,22,,,,,22,22,,22,,22,22,,,,22,22,,,,,22,22,22,22',
'22,22,,,,,,22,22,218,218,218,218,218,218,218,218,218,218,218,218,218',
'218,218,231,231,231,231,231,231,231,231,231,,,22,22,,,,22,,22,22,133',
'22,,133,133,133,133,133,133,133,133,133,133,,,,,133,,,133,133,,,,,133',
',,133,133,133,133,,,,,133,133,,133,,133,133,,,,133,133,,,,,133,133,133',
'133,133,133,,,,,,133,133,255,255,255,255,255,255,255,255,255,255,255',
'255,255,255,255,244,244,244,244,244,244,244,244,244,,,133,133,,,,133',
',133,133,314,133,,314,314,314,314,314,314,314,314,314,314,,,,,314,,',
'314,314,,,,,314,,,314,314,314,314,,,,,314,314,,314,,314,314,,,,314,314',
',,,,314,314,314,314,314,314,,,,,,314,314,251,251,251,251,251,251,251',
'251,251,251,251,251,251,251,251,228,228,228,228,228,228,228,228,228',
',,314,314,,,,314,,314,314,132,314,,132,132,132,132,132,132,132,132,132',
'132,,,,,132,,,132,132,,,,,132,,,132,132,132,132,,,,,132,132,,132,,132',
'132,,,,132,132,,,,,132,132,132,132,132,132,,,,,,132,132,247,247,247',
'247,247,247,247,247,247,247,247,247,247,247,247,238,238,238,238,238',
'238,238,238,238,,,132,132,,,,132,,132,132,138,132,,138,138,138,138,138',
'138,138,138,138,138,,,,,138,,,138,138,,,,,138,,,138,138,138,138,,,,',
'138,138,,138,,138,138,,,,138,138,,,,,138,138,138,138,138,138,,,,,,138',
'138,241,241,241,241,241,241,241,241,241,235,235,235,235,235,235,235',
'235,235,223,223,223,223,223,223,223,,138,138,,,,138,,138,138,33,138',
',33,33,33,33,33,33,33,33,33,33,,,,,33,,,33,33,,,,,33,,,33,33,33,33,',
',,,33,33,,33,,33,33,,,,33,33,,,,,33,33,33,33,33,33,,,,,,33,33,219,219',
'219,219,219,219,219,,,,,,,,,,,,,,,,,,,,33,33,,,,33,,33,33,35,33,,35',
'35,35,35,35,35,35,35,35,35,,,,,35,,,35,35,,,,,35,,,35,35,35,35,,,,,35',
'35,,35,,35,35,,,,35,35,35,,,,35,35,35,35,35,35,,,,,,35,35,,,,,,,,,,',
',,,,,,,,,,,,,,,,35,35,,,,35,,35,35,302,35,,302,302,302,302,302,302,302',
'302,302,302,,,,,302,,,302,302,,,,,302,,,302,302,302,302,,,,,302,302',
',302,,302,302,,,,302,302,,,,,302,302,302,302,302,302,,,,,302,302,302',
',,,,,,,,,,,,,,,,,,,,,,,,,,302,302,,,,302,,302,302,40,302,,40,40,40,40',
'40,40,40,40,40,40,,,,,40,,,40,40,,,,,40,,,40,40,40,40,,,,,40,40,,40',
',40,40,,,,40,40,,,,,40,40,40,40,40,40,,,,,,40,40,,,,,,,,,,,,,,,,,,,',
',,,,,,,40,40,,,,40,,40,40,290,40,,290,290,290,290,290,290,290,290,290',
'290,,,,,290,,,290,290,,,,,290,,,290,290,290,290,,,,,290,290,,290,,290',
'290,,,,290,290,,,,,290,290,290,290,290,290,,,,,,290,290,,,,,,,,,,,,',
',,,,,,,,,,,,,,290,290,,,,290,,290,290,44,290,,44,44,44,44,44,44,44,44',
'44,44,,,,,44,,,44,44,,,,,44,,,44,44,44,44,,,,,44,44,,44,,44,44,,,,44',
'44,,,,,44,44,44,44,44,44,,,,,,44,44,,,,,,,,,,,,,,,,,,,,,,,,,,,44,44',
',,,44,,44,44,47,44,,47,47,47,47,47,47,47,47,47,47,,,,,47,,,47,47,,,',
',47,,,47,47,47,47,,,,,47,47,,47,,47,47,,,,47,47,,,,,47,47,47,47,47,47',
',,,,,47,47,,,,,,,,,,,,,,,,,,,,,,,,,,,47,47,,,,47,,47,47,52,47,,52,52',
'52,52,52,52,52,52,52,52,,,,,52,,,52,52,,,,,52,,,52,52,52,52,,,,,52,52',
',52,,52,52,,,,52,52,,,,,52,52,52,52,52,52,,,,,,52,52,,,,,,,,,,,,,,,',
',,,,,,,,,,,52,52,,,,52,,52,52,289,52,,289,289,289,289,289,289,289,289',
'289,289,,,,,289,,,289,289,,,,,289,,,289,289,289,289,,,,,289,289,,289',
',289,289,,,,289,289,,,,,289,289,289,289,289,289,,,,,,289,289,,,,,,,',
',,,,,,,,,,,,,,,,,,,289,289,,,,289,,289,289,59,289,,59,59,59,59,59,59',
'59,59,59,59,,,,,59,,,59,59,,,,,59,,,59,59,59,59,,,,,59,59,,59,,59,59',
',,,59,59,,59,,,59,59,59,59,59,59,,,,,,59,59,,,,,,,,,,,,,,,,,,,,,,,,',
',,59,59,,,,59,,59,59,280,59,,280,280,280,280,280,280,280,280,280,280',
',,,,280,,,280,280,,,,,280,,,280,280,280,280,,,,,280,280,,280,,280,280',
',,,280,280,,,,,280,280,280,280,280,280,,,,,280,280,280,,,,,,,,,,,,,',
',,,,,,,,,,,,,280,280,,,,280,,280,280,278,280,,278,278,278,278,278,278',
'278,278,278,278,,,,,278,,,278,278,,,,,278,,,278,278,278,278,,,,,278',
'278,,278,,278,278,,,,278,278,,,,,278,278,278,278,278,278,,,,,,278,278',
',,,,,,,,,,,,,,,,,,,,,,,,,,278,278,,,,278,,278,278,277,278,,277,277,277',
'277,277,277,277,277,277,277,,,,,277,,,277,277,,,,,277,,,277,277,277',
'277,,,,,277,277,,277,,277,277,,,,277,277,,,,,277,277,277,277,277,277',
',,,,,277,277,,,,,,,,,,,,,,,,,,,,,,,,,,,277,277,,,,277,,277,277,264,277',
',264,264,264,264,264,264,264,264,264,264,,,,,264,,,264,264,,,,,264,',
',264,264,264,264,,,,,264,264,,264,,264,264,,,,264,264,,,,,264,264,264',
'264,264,264,,,,,,264,264,,,,,,,,,,,,,,,,,,,,,,,,,,,264,264,,,,264,,264',
'264,215,264,,215,215,215,215,215,215,215,215,215,215,,,,,215,,,215,215',
',,,,215,,,215,215,215,215,,,,,215,215,,215,,215,215,,,,215,215,,,,,215',
'215,215,215,215,215,,,,,,215,215,,,,,,,,,,,,,,,,,,,,,,,,,,,215,215,',
',,215,,215,215,214,215,,214,214,214,214,214,214,214,214,214,214,,,,',
'214,,,214,214,,,,,214,,,214,214,214,214,,,,,214,214,,214,,214,214,,',
',214,214,,,,,214,214,214,214,214,214,,,,,,214,214,,,,,,,,,,,,,,,,,,',
',,,,,,,,214,214,,,,214,,214,214,71,214,,71,71,71,71,71,71,71,71,71,71',
',,,,71,,,71,71,,,,,71,,,71,71,71,71,,,,,71,71,,71,,71,71,,,,71,71,,',
',,71,71,71,71,71,71,,,,,,71,71,,,,,,,,,,,,,,,,,,,,,,,,,,,71,71,,,,71',
',71,71,74,71,,74,74,74,74,74,74,74,74,74,74,,,,,74,,,74,74,,,,,74,,',
'74,74,74,74,,,,,74,74,,74,,74,74,,,,74,74,,,,,74,74,74,74,74,74,,,,',
',74,74,,,,,,,,,,,,,,,,,,,,,,,,,,,74,74,,,,74,,74,74,202,74,,202,202',
'202,202,202,202,202,202,202,202,,,,,202,,,202,202,,,,,202,,,202,202',
'202,202,,,,,202,202,,202,,202,202,,,,202,202,202,,,,202,202,202,202',
'202,202,,,,,,202,202,,,,,,,,,,,,,,,,,,,,,,,,,,,202,202,202,202,,202',
',202,202,201,202,,201,201,201,201,201,201,201,201,201,201,,,,,201,,',
'201,201,,,,,201,,,201,201,201,201,,,,,201,201,,201,,201,201,,,,201,201',
',,,,201,201,201,201,201,201,,,,,,201,201,,,,,,,,,,,,,,,,,,,,,,,,,,,201',
'201,,,,201,,201,201,188,201,,188,188,188,188,188,188,188,188,188,188',
',,,,188,,,188,188,,,,,188,,,188,188,188,188,,,,,188,188,,188,,188,188',
',,,188,188,,,,,188,188,188,188,188,188,,,,,,188,188,,,,,,,,,,,,,,,,',
',,,,,,,,,,188,188,,,,188,,188,188,187,188,,187,187,187,187,187,187,187',
'187,187,187,,,,,187,,,187,187,,,,,187,,,187,187,187,187,,,,,187,187',
',187,,187,187,,,,187,187,,,,,187,187,187,187,187,187,,,,,,187,187,,',
',,,,,,,,,,,,,,,,,,,,,,,,187,187,,,,187,,187,187,186,187,,186,186,186',
'186,186,186,186,186,186,186,,,,,186,,,186,186,,,,,186,,,186,186,186',
'186,,,,,186,186,,186,,186,186,,,,186,186,,,,,186,186,186,186,186,186',
',,,,,186,186,,,,,,,,,,,,,,,,,,,,,,,,,,,186,186,,,,186,,186,186,172,186',
',172,172,172,172,172,172,172,172,172,172,,,,,172,,,172,172,,,,,172,',
',172,172,172,172,,,,,172,172,,172,,172,172,,,,172,172,,,,,172,172,172',
'172,172,172,,,,,,172,172,,,,,,,,,,,,,,,,,,,,,,,,,,,172,172,,,,172,,172',
'172,137,172,,137,137,137,137,137,137,137,137,137,137,,,,,137,,,137,137',
',,,,137,,,137,137,137,137,,,,,137,137,,137,,137,137,,,,137,137,,,,,137',
'137,137,137,137,137,,,,,,137,137,,,,,,,,,,,,,,,,,,,,,,,,,,,137,137,',
',,137,,137,137,168,137,,168,168,168,168,168,168,168,168,168,168,,,,',
'168,,,168,168,,,,,168,,,168,168,168,168,,,,,168,168,,168,,168,168,,',
',168,168,,,,,168,168,168,168,168,168,,,,,,168,168,,,,,,,,,,,,,,,,,,',
',,,,,,,,168,168,,,,168,,168,168,167,168,,167,167,167,167,167,167,167',
'167,167,167,,,,,167,,,167,167,,,,,167,,,167,167,167,167,,,,,167,167',
',167,,167,167,,,,167,167,,,,,167,167,167,167,167,167,,,,,,167,167,,',
',,,,,,,,,,,,,,,,,,,,,,,,167,167,,,,167,,167,167,166,167,,166,166,166',
'166,166,166,166,166,166,166,,,,,166,,,166,166,,,,,166,,,166,166,166',
'166,,,,,166,166,,166,,166,166,,,,166,166,,,,,166,166,166,166,166,166',
',,,,,166,166,,,,,,,,,,,,,,,,,,,,,,,,,,,166,166,,,,166,,166,166,164,166',
',164,164,164,164,164,164,164,164,164,164,,,,,164,,,164,164,,,,,164,',
',164,164,164,164,,,,,164,164,,164,,164,164,,,,164,164,,,,,164,164,164',
'164,164,164,,,,,,164,164,,,,,,,,,,,,,,,,,,,,,,,,,,,164,164,,,,164,,164',
'164,130,164,,130,130,130,130,130,130,130,130,130,130,,,,,130,,,130,130',
',,,,130,,,130,130,130,130,,,,,130,130,,130,,130,130,,,,130,130,,,,,130',
'130,130,130,130,130,,,,,,130,130,,,,,,,,,,,,,,,,,,,,,,,,,,,130,130,',
',,130,,130,130,162,130,,162,162,162,162,162,162,162,162,162,162,,,,',
'162,,,162,162,,,,,162,,,162,162,162,162,,,,,162,162,,162,,162,162,,',
',162,162,,,,,162,162,162,162,162,162,,,,,,162,162,,,,,,,,,,,,,,,,,,',
',,,,,,,,162,162,,,,162,,162,162,161,162,,161,161,161,161,161,161,161',
'161,161,161,,,,,161,,,161,161,,,,,161,,,161,161,161,161,,,,,161,161',
',161,,161,161,,,,161,161,,,,,161,161,161,161,161,161,,,,,,161,161,,',
',,,,,,,,,,,,,,,,,,,,,,,,161,161,,,,161,,161,161,160,161,,160,160,160',
'160,160,160,160,160,160,160,,,,,160,,,160,160,,,,,160,,,160,160,160',
'160,,,,,160,160,,160,,160,160,,,,160,160,,,,,160,160,160,160,160,160',
',,,,,160,160,,,,,,,,,,,,,,,,,,,,,,,,,,,160,160,,,,160,,160,160,159,160',
',159,159,159,159,159,159,159,159,159,159,,,,,159,,,159,159,,,,,159,',
',159,159,159,159,,,,,159,159,,159,,159,159,,,,159,159,,,,,159,159,159',
'159,159,159,,,,,,159,159,,,,,,,,,,,,,,,,,,,,,,,,,,,159,159,,,,159,,159',
'159,158,159,,158,158,158,158,158,158,158,158,158,158,,,,,158,,,158,158',
',,,,158,,,158,158,158,158,,,,,158,158,,158,,158,158,,,,158,158,,,,,158',
'158,158,158,158,158,,,,,,158,158,,,,,,,,,,,,,,,,,,,,,,,,,,,158,158,',
',,158,,158,158,157,158,,157,157,157,157,157,157,157,157,157,157,,,,',
'157,,,157,157,,,,,157,,,157,157,157,157,,,,,157,157,,157,,157,157,,',
',157,157,,,,,157,157,157,157,157,157,,,,,,157,157,,,,,,,,,,,,,,,,,,',
',,,,,,,,157,157,,,,157,,157,157,156,157,,156,156,156,156,156,156,156',
'156,156,156,,,,,156,,,156,156,,,,,156,,,156,156,156,156,,,,,156,156',
',156,,156,156,,,,156,156,,,,,156,156,156,156,156,156,,,,,,156,156,,',
',,,,,,,,,,,,,,,,,,,,,,,,156,156,,,,156,,156,156,155,156,,155,155,155',
'155,155,155,155,155,155,155,,,,,155,,,155,155,,,,,155,,,155,155,155',
'155,,,,,155,155,,155,,155,155,,,,155,155,,,,,155,155,155,155,155,155',
',,,,,155,155,,,,,,,,,,,,,,,,,,,,,,,,,,,155,155,,,,155,,155,155,102,155',
',102,102,102,102,102,102,102,102,102,102,,,,,102,,,102,102,,,,,102,',
',102,102,102,102,,,,,102,102,,102,,102,102,,,,102,102,102,,,,102,102',
'102,102,102,102,,,,,,102,102,,,,,,,,,,,,,,,,,,,,,,,,,,,102,102,,,,102',
',102,102,136,102,,136,136,136,136,136,136,136,136,136,136,,,,,136,,',
'136,136,,,,,136,,,136,136,136,136,,,,,136,136,,136,,136,136,,,,136,136',
',,,,136,136,136,136,136,136,,,,,,136,136,,,,,,,,,,,,,,,,,,,,,,,,,,,136',
'136,,,,136,,136,136,154,136,,154,154,154,154,154,154,154,154,154,154',
',,,,154,,,154,154,,,,,154,,,154,154,154,154,,,,,154,154,,154,,154,154',
',,,154,154,,,,,154,154,154,154,154,154,,,,,,154,154,,,,,,,,,,,,,,,,',
',,,,,,,,,,154,154,,,,154,,154,154,153,154,,153,153,153,153,153,153,153',
'153,153,153,,,,,153,,,153,153,,,,,153,,,153,153,153,153,,,,,153,153',
',153,,153,153,,,,153,153,,,,,153,153,153,153,153,153,,,,,,153,153,,',
',,,,,,,,,,,,,,,,,,,,,,,,153,153,,,,153,,153,153,152,153,,152,152,152',
'152,152,152,152,152,152,152,,,,,152,,,152,152,,,,,152,,,152,152,152',
'152,,,,,152,152,,152,,152,152,,,,152,152,,,,,152,152,152,152,152,152',
',,,,,152,152,,,,,,,,,,,,,,,,,,,,,,,,,,,152,152,,,,152,,152,152,150,152',
',150,150,150,150,150,150,150,150,150,150,,,,,150,,,150,150,,,,,150,',
',150,150,150,150,,,,,150,150,,150,,150,150,,,,150,150,,,,,150,150,150',
'150,150,150,,,,,,150,150,,,,,,,,,,,,,,,,,,,,,,,,,,,150,150,,,,150,,150',
'150,149,150,,149,149,149,149,149,149,149,149,149,149,,,,,149,,,149,149',
',,,,149,,,149,149,149,149,,,,,149,149,,149,,149,149,,,,149,149,,,,,149',
'149,149,149,149,149,,,,,,149,149,,,,,,,,,,,,,,,,,,,,,,,,,,,149,149,',
',,149,,149,149,129,149,,129,129,129,129,129,129,129,129,129,129,,,,',
'129,,,129,129,,,,,129,,,129,129,129,129,,,,,129,129,,129,,129,129,,',
',129,129,,,,,129,129,129,129,129,129,,,,,,129,129,,,,,,,,,,,,,,,,,,',
',,,,,,,,129,129,,,,129,,129,129,148,129,,148,148,148,148,148,148,148',
'148,148,148,,,,,148,,,148,148,,,,,148,,,148,148,148,148,,,,,148,148',
',148,,148,148,,,,148,148,,,,,148,148,148,148,148,148,,,,,,148,148,,',
',,,,,,,,,,,,,,,,,,,,,,,,148,148,,,,148,,148,148,115,148,,115,115,115',
'115,115,115,115,115,115,115,,,,,115,,,115,115,,,,,115,,,115,115,115',
'115,,,,,115,115,,115,,115,115,,,,115,115,115,,,,115,115,115,115,115',
'115,,,,,,115,115,,,,,,,,,,,,,,,,,,,,,,,,,,,115,115,,,,115,,115,115,0',
'115,,0,0,0,0,0,0,0,0,0,0,,,,,0,,,0,0,,,,,0,,,0,0,0,0,,,,,0,0,,0,,0,0',
',,,0,0,0,,,,0,0,0,0,0,0,,,,,,0,0,,,,,,,,,,,,,,,,,,,,,,,,,,,0,0,0,0,',
'0,,0,0,146,0,,146,146,146,146,146,146,146,146,146,146,,,,,146,,,146',
'146,,,,,146,,,146,146,146,146,,,,,146,146,,146,,146,146,,,,146,146,',
',,,146,146,146,146,146,146,,,,,,146,146,,,,,,,,,,,,,,,,,,,,,,,,,,,146',
'146,,,,146,,146,146,145,146,,145,145,145,145,145,145,145,145,145,145',
',,,,145,,,145,145,,,,,145,,,145,145,145,145,,,,,145,145,,145,,145,145',
',,,145,145,,,,,145,145,145,145,145,145,,,,,,145,145,,,,,,,,,,,,,,,,',
',,,,,,,,,,145,145,,,,145,,145,145,144,145,,144,144,144,144,144,144,144',
'144,144,144,,,,,144,,,144,144,,,,,144,,,144,144,144,144,,,,,144,144',
',144,,144,144,,,,144,144,,,,,144,144,144,144,144,144,,,,,,144,144,,',
',,,,,,,,,,,,,,,,,,,,,,,,144,144,,,,144,,144,144,143,144,,143,143,143',
'143,143,143,143,143,143,143,,,,,143,,,143,143,,,,,143,,,143,143,143',
'143,,,,,143,143,,143,,143,143,,,,143,143,,,,,143,143,143,143,143,143',
',,,,,143,143,,,,,,,,,,,,,,,,,,,,,,,,,,,143,143,,,,143,,143,143,142,143',
',142,142,142,142,142,142,142,142,142,142,,,,,142,,,142,142,,,,,142,',
',142,142,142,142,,,,,142,142,,142,,142,142,,,,142,142,,,,,142,142,142',
'142,142,142,,,,,,142,142,,,,,,,,,,,,,,,,,,,,,,,,,,,142,142,,,,142,,142',
'142,141,142,,141,141,141,141,141,141,141,141,141,141,,,,,141,,,141,141',
',,,,141,,,141,141,141,141,,,,,141,141,,141,,141,141,,,,141,141,,,,,141',
'141,141,141,141,141,,,,,,141,141,,,,,,,,,,,,,,,,,,,,,,,,,,,141,141,',
',,141,,141,141,124,141,,124,124,124,124,124,124,124,124,124,124,,,,',
'124,,,124,124,,,,,124,,,124,124,124,124,,,,,124,124,,124,,124,124,,',
',124,124,,,,,124,124,124,124,124,124,,,,,,124,124,,,,,,,,,,,,,,,,,,',
',,,,,,,,124,124,,,,124,,124,124,140,124,,140,140,140,140,140,140,140',
'140,140,140,,,,,140,,,140,140,,,,,140,,,140,140,140,140,,,,,140,140',
',140,,140,140,,,,140,140,,,,,140,140,140,140,140,140,,,,,,140,140,,',
',,,,,,,,,,,,,,,,,,,,,,,,140,140,,,,140,,140,140,139,140,,139,139,139',
'139,139,139,139,139,139,139,,,,,139,,,139,139,,,,,139,,,139,139,139',
'139,,,,,139,139,,139,,139,139,,,,139,139,,,,,139,139,139,139,139,139',
',,,,,139,139,,,,,,,,,,,,,,,,,,,,,,,,,,,139,139,,,,139,,139,139,128,139',
',128,128,128,128,128,128,128,128,128,128,,,,,128,,,128,128,,,,,128,',
',128,128,128,128,,,,,128,128,,128,,128,128,,,,128,128,,,,,128,128,128',
'128,128,128,,,,,,128,128,,,,,,,,,,,,,,,,,,,,,,,,,,,128,128,,,,128,,128',
'128,113,128,,113,113,113,113,113,113,113,113,113,113,,,,,113,,,113,113',
',,,,113,,,113,113,113,113,,,,,113,113,,113,,113,113,,,,113,113,317,',
'317,,113,113,113,113,113,113,,,,,,113,113,,,,,,,,,,,,,,,,317,317,,,',
'317,,,,317,,113,113,,,,113,,113,113,,113,,,,317,317,317,317,317,317',
'317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317',
'317,317,317,317,317,317,317,317,317,317,317,317,306,,306,,,,,,,317,',
',,,,,,,,,,,,,,,,,,,,,306,306,,,,306,,,,306,,,,,,,,,,,,,,,,306,306,306',
'306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306',
'306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,,,,,,,,',
',306,25,25,25,25,25,25,25,25,25,25,,,,,25,,,25,25,,,,,25,,,25,25,25',
'25,,,,,,25,,25,,25,25,,,,25,25,,,,,25,25,25,25,25,25,,,,,,25,25,,,305',
'305,305,305,305,305,305,305,305,305,,,,,305,,,305,305,,,,,305,25,25',
'305,305,305,25,,25,25,,25,305,,305,,305,305,,,,305,305,,,,,305,305,305',
'305,305,305,,,,,,,,,,315,315,315,315,315,315,315,315,315,315,,,,,315',
',,315,315,,,,,315,305,305,315,315,315,305,,305,305,,305,315,,315,,315',
'315,,,,315,315,,,,,315,315,315,315,315,315,,,,,,,,,,163,163,163,163',
'163,163,163,163,163,163,,,,,163,,,163,163,,,,,163,315,315,163,163,163',
'315,,315,315,,315,163,,163,,163,163,,,,163,163,,,,,163,163,163,163,163',
'163,171,171,171,171,171,171,171,171,171,171,,,,,,,,,,,,,,,,,,171,171',
',,,,163,163,,,,163,,163,163,,163,232,171,232,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,232,232,,,,232,,,,232,,,,,,,,,171,,171,171,,171,,232,232,232,232',
'232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232',
'232,232,232,232,232,232,232,232,232,232,232,232,232,232,316,,316,,,',
',,,,,,,,,,,,,,,,,,,316,,,,,,,316,316,,,,316,,,,316,,,,,,,,,,,,,,,,316',
'316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316',
'316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316',
'212,,212,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,212,212,,,,212,,,,212,,,,,,,,',
',,,,,,,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212',
'212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212',
'212,212,224,,224,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,224,224,,,,224,,,,224',
',,,,,,,,,,,,,,,224,224,224,224,224,224,224,224,224,224,224,224,224,224',
'224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224',
'224,224,224,224,203,,203,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,203,203,,,,203',
',,,203,,,,,,,,,,,,,,,,203,203,203,203,203,203,203,203,203,203,203,203',
'203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203',
'203,203,203,203,203,203,195,,195,,,,,,,,,,,,,,,,,,,,,,,195,,,,,,,195',
'195,,,,195,,,,195,,,,,,,,,,,,,,,,195,195,195,195,195,195,195,195,195',
'195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195',
'195,195,195,195,195,195,195,195,195,194,,194,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,194,194,,,,194,,,,194,,,,,,,,,,,,,,,,194,194,194,194,194,194,194',
'194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194',
'194,194,194,194,194,194,194,194,194,194,194,304,,304,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,304,304,,,,304,,,,304,,,,,,,,,,,,,,,,304,304,304,304,304',
'304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304',
'304,304,304,304,304,304,304,304,304,304,304,304,304,114,,114,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,114,114,,,,114,,,,114,,,,,,,,,,,,,,,,114,114,114',
'114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114',
'114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,322,,322',
',,,,,,,,,,,,,,,,,,,,,,322,,,,,,,322,322,,,,322,,,,322,,,,,,,,,,,,,,',
',322,322,322,322,322,322,322,322,322,322,322,322,322,322,322,322,322',
'322,322,322,322,322,322,322,322,322,322,322,322,322,322,322,322,322',
'322,321,,321,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,321,321,,,,321,,,,321,,,,',
',,,,,,,,,,,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321',
'321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321',
'321,321,321,303,,303,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,303,303,,,,303,,,',
'303,,,,,,,,,,,,,,,,303,303,303,303,303,303,303,303,303,303,303,303,303',
'303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303',
'303,303,303,303,303,300,,300,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,300,300,,',
',300,,,,300,,,,,,,,,,,,,,,,300,300,300,300,300,300,300,300,300,300,300',
'300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300',
'300,300,300,300,300,300,300,239,,239,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,239',
'239,,,,239,,,,239,,,,,,,,,,,,,,,,239,239,239,239,239,239,239,239,239',
'239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239',
'239,239,239,239,239,239,239,239,239,84,,84,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,84,84,,,,84,,,,84,,,,,,,,84,,,,,,,,84,84,84,84,84,84,84,84,84,84',
'84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84',
'84,84,86,,86,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,86,86,,,,86,,,,86,,,,,,,,86',
',,,,,,,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86',
'86,86,86,86,86,86,86,86,86,86,86,86,86,86,268,,268,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,268,268,,,,268,,,,268,,,,,,,,,,,,,,,,268,268,268,268,268',
'268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268',
'268,268,268,268,268,268,268,268,268,268,268,268,268,279,,279,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,279,279,,,,279,,,,279,,,,,,,,,,,,,,,,279,279,279',
'279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279',
'279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,276,,276',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,276,,,,276,,,,276,,,,,,,,,,,,,,,,276',
'276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276',
'276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276',
'68,,68,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,68,68,,,,68,,,,68,,,,,,,,,,,,,,',
',68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68',
'68,68,68,68,68,68,68,68,68,68,68,68,266,,266,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,266,266,,,,266,,,,266,,,,,,,,,,,,,,,,266,266,266,266,266,266,266',
'266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266',
'266,266,266,266,266,266,266,266,266,266,266,267,,267,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,267,267,,,,267,,,,267,,,,,,,,,,,,,,,,267,267,267,267,267',
'267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267',
'267,267,267,267,267,267,267,267,267,267,267,267,267,87,,87,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,87,87,,,,87,,,,87,,,,,,,,87,,,,,,,,87,87,87,87,87',
'87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87',
'87,87,87,87,87,87,87,93,93,,,,,,,,93,,,,,,,,,,,,,,,,93,93,93,93,93,93',
'93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93',
'93,93,93,93,93,93,120,120,,,,,,,,120,,,,,,,,,,,,,,,,120,120,120,120',
'120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120',
'120,120,120,120,120,120,120,120,120,120,120,120,120,120,258,258,,,,',
',,,258,,,,,,,,,,,,,,,,258,258,258,258,258,258,258,258,258,258,258,258',
'258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258',
'258,258,258,258,258,258,287,,,,,,,,287,,,,,,,,,,,,,,,,287,287,287,287',
'287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287',
'287,287,287,287,287,287,287,287,287,287,287,287,287,287,286,,,,,,,,286',
',,,,,,,,,,,,,,,286,286,286,286,286,286,286,286,286,286,286,286,286,286',
'286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286',
'286,286,286,286,310,,,,,,,,310,,,,,,,,,,,,,,,,310,310,310,310,310,310',
'310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310',
'310,310,310,310,310,310,310,310,310,310,310,310,309,,,,,,,,309,,,,,',
',,,,,,,,,,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309',
'309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309',
'309,309,309,225,,,,,,,,225,,,,,,,,,,,,,,,,225,225,225,225,225,225,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225',
'225,225,225,225,225,225,225,225,225,225,225,92,,,,,,,,,,,,,,,,92,92',
'92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92',
'92,92,92,92,92,92,92,92,92,92,253,,,,,,,,,,,,,,,,253,253,253,253,253',
'253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253',
'253,253,253,253,253,253,253,253,253,253,253,253,253,111,,,,,,,,,,,,',
',,,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111',
'111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111',
'111,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233',
'233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233',
'233,233,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226',
'226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226',
'226,226,226,217,217,217,217,217,217,217,217,217,217,217,217,217,217',
'217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217',
'217,217,217,217,249,249,249,249,249,249,249,249,249,249,249,249,249',
'249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249',
'249,249,249,249,249,254,254,254,254,254,254,254,254,254,254,254,254',
'254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254',
'254,254,254,254,254,254,221,221,221,221,221,221,221,221,221,221,221',
'221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221',
'221,221,221,221,221,221,221,236,236,236,236,236,236,236,236,236,236',
'236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236',
'236,236,236,236,236,236,236,236,229,229,229,229,229,229,229,229,229',
'229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229',
'229,229,229,229,229,229,229,229,229' ]
        racc_action_check = arr = Array.new(11137, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  6462,   295,   276,   nil,   nil,   301,   nil,   402,   nil,   nil,
   503,   nil,   604,   705,   nil,   nil,   806,   nil,   nil,   907,
   nil,    -2,  1109,   nil,   nil,  7813,   175,   nil,   nil,   nil,
     2,   nil,   229,  1614,   nil,  1715,   203,   nil,   nil,   nil,
  1917,   148,   nil,   nil,  2119,   nil,   nil,  2220,   nil,   nil,
   nil,   nil,  2321,   197,   nil,   nil,   nil,   nil,   nil,  2523,
   nil,   nil,    86,   nil,   nil,   nil,   126,   196,  9859,   197,
   237,  3230,   nil,   nil,  3331,   275,   nil,   nil,    94,   nil,
   nil,   235,    -6,   136,  9399,   226,  9491, 10135,   228,   176,
   253,   265, 10661, 10195,     3,   100,   nil,   128,   123,   nil,
   -62,   nil,  5452,    99,   207,   211,   223,   nil,   nil,   nil,
   nil, 10763,   -51,  7573,  8847,  6361,    -2,   121,    64,    -4,
 10255,   290,    65,   nil,  7169,   199,   132,   nil,  7472,  6159,
  4543,   291,  1412,  1210,  1008,   200,  5553,  4038,  1513,  7371,
  7270,  7068,  6967,  6866,  6765,  6664,  6563,   nil,  6260,  6058,
  5957,   nil,  5856,  5755,  5654,  5351,  5250,  5149,  5048,  4947,
  4846,  4745,  4644,  8008,  4442,   -45,  4341,  4240,  4139,   nil,
   nil,  8064,  3937,   nil,   187,   119,   nil,   nil,   nil,   nil,
   119,   231,    76,   nil,   nil,   -20,  3836,  3735,  3634,    94,
   nil,   171,   120,    -3,  8663,  8571,   nil,   nil,   nil,   nil,
   nil,  3533,  3432,  8479,   197,    90,   nil,   211,   139,    65,
   nil,   nil,  8295,   201,  3129,  3028,   -24, 10868,  1118,  1623,
   236, 10973,   916,  1540,  8387, 10610, 10833,  1017,  1335, 11043,
   714,  1133,  8111, 10798,   512,  1531, 11008,   310,  1436,  9307,
   411,  1522,   205,   613,  1234,   -17,   815,  1421,    60, 10903,
    76,  1320,   139, 10712, 10938,  1219,   338,   301, 10315,   -40,
   nil,   -28,   178,   111,  2927,   nil,  9951, 10043,  9583,   nil,
   nil,   nil,   224,   nil,   nil,   -21,  9767,  2826,  2725,  9675,
  2624,   nil,   113,   122,   nil,   nil, 10433, 10374,   nil,  2422,
  2018,     2,   nil,   nil,   nil,   -25,   167,   nil,   nil,     0,
  9215,   nil,  1816,  9123,  8755,  7878,  7714,   nil,   nil, 10551,
 10492,   nil,   224,   -43,  1311,  7943,  8203,  7622,   nil,   nil,
   nil,  9031,  8939,   nil,   nil,   nil ]

racc_action_default = [
    -1,  -179,  -186,   -98,   -10,  -186,  -106,  -186,   -26,   -11,
  -186,  -107,  -186,  -186,   -27,   -12,  -186,  -108,   -13,  -186,
  -109,  -186,  -186,   -14,  -110,   -46,  -120,   -15,   -28,   -16,
  -126,   -29,  -134,  -186,   -31,  -141,  -186,   -17,   -34,   -18,
  -186,  -186,   -35,   -19,  -186,   -36,   -20,  -186,  -128,   -47,
   -21,   -37,  -186,  -186,   -30,   -22,   -38,   -32,    -2,  -186,
   -23,   -39,    -3,  -105,  -104,   -33,  -186,  -186,    -5,  -186,
    -8,  -186,   -97,    -9,  -186,  -179,  -181,  -183,  -186,  -177,
   -99,  -101,  -186,   -49,  -158,   -53,  -186,  -186,   -55,   -54,
  -186,  -127,   -56,   -45,  -186,  -186,   -44,  -186,  -120,  -121,
  -186,  -131,  -141,  -186,  -186,  -186,  -186,  -112,  -116,  -117,
  -135,   -57,  -186,  -186,  -142,  -141,  -186,  -186,   -51,   -50,
  -155,  -186,  -186,   -25,    -7,  -162,  -186,    -4,  -186,  -186,
  -186,  -186,  -186,  -186,  -186,  -186,  -186,  -186,  -186,  -186,
  -186,  -186,  -186,  -186,  -186,  -186,  -186,   -59,  -186,  -186,
  -186,   -58,  -186,  -186,  -186,  -186,  -186,  -186,  -186,  -186,
  -186,  -186,  -186,   -94,  -186,  -186,  -186,  -186,  -186,   -96,
  -130,  -186,  -186,  -111,   -52,   -48,  -182,  -178,  -180,  -176,
  -186,  -186,  -186,  -157,  -175,  -186,  -186,  -186,  -186,  -186,
  -119,  -186,  -186,  -186,  -142,  -186,  -113,  -114,  -115,  -140,
  -148,  -186,  -186,  -143,  -186,  -186,  -156,  -151,  -186,  -186,
   326,   -24,    -6,  -186,  -186,  -186,  -186,   -86,   -74,   -63,
  -186,   -87,   -75,   -64,  -184,   -93,   -88,   -76,   -65,   -89,
   -77,   -66,  -185,   -90,   -78,   -67,   -91,   -79,   -68,  -159,
   -80,   -69,   -60,   -81,   -70,   -61,   -82,   -71,   -62,   -84,
   -83,   -72,  -186,   -92,   -85,   -73,  -129,  -186,   -40,  -186,
  -100,  -186,  -186,  -186,  -186,  -170,   -41,   -43,   -42,  -125,
  -123,  -122,  -186,  -132,  -118,  -186,  -145,  -186,  -186,  -144,
  -186,  -133,  -186,  -186,  -152,  -163,  -164,  -165,  -161,  -186,
  -186,  -160,  -103,  -102,   -95,  -186,  -186,  -171,  -168,  -186,
  -149,  -124,  -186,  -146,  -147,  -103,  -186,  -153,  -154,  -167,
  -166,  -174,  -186,  -172,  -186,  -103,  -186,  -186,  -136,  -169,
  -173,  -150,  -186,  -138,  -137,  -139 ]

racc_goto_table = [
    58,   173,    80,   216,   270,   271,   265,   170,   112,    90,
   100,   126,    67,    91,    62,    76,    53,    83,    79,    84,
   299,   173,    85,   263,    86,    87,   207,   170,    88,    96,
   179,    89,   261,    75,    92,    82,    77,    93,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   111,   nil,   114,   nil,   nil,
   nil,   nil,   116,   117,   nil,   nil,   118,   nil,   nil,   119,
   nil,   nil,   124,   nil,   120,   nil,   nil,   127,   nil,   nil,
   nil,   nil,   nil,   122,   nil,   193,   220,   nil,   nil,   nil,
   nil,   169,   189,   174,   297,   301,   175,   nil,   205,   176,
   178,   nil,   177,   nil,   nil,   nil,   183,   291,   184,   nil,
   191,    96,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   194,   195,   311,   nil,   nil,   nil,
   nil,   nil,   124,   nil,   nil,   203,   nil,   194,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   212,   nil,   nil,   nil,
   217,   218,   219,   nil,   221,   222,   223,   224,   225,   226,
   227,   228,   229,   230,   231,   232,   233,   234,   235,   256,
   236,   237,   238,   257,   239,   240,   241,   242,   243,   244,
   245,   246,   247,   248,   249,   250,   251,   nil,   253,   254,
   255,   260,   nil,   nil,   258,   nil,   nil,   173,   262,   191,
   nil,   nil,   272,   170,    96,    96,   nil,   nil,   266,   267,
   268,   nil,   277,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   276,   279,   nil,   nil,   nil,   nil,   nil,
   nil,   284,   nil,   nil,   nil,   nil,   286,   287,   288,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   295,   nil,   nil,   nil,   262,   nil,   nil,   nil,
   nil,   nil,   nil,   294,   nil,    96,   300,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   303,
   304,   nil,   306,   nil,   307,   308,   nil,   nil,   262,   nil,
   nil,   309,   310,   nil,   nil,   nil,   nil,   nil,   312,   nil,
   nil,   313,   nil,   320,   316,   nil,   nil,   317,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   321,   322 ]

racc_goto_check = [
     2,    32,    26,    43,    23,    23,    45,    38,    39,     6,
    36,    42,     4,    33,     3,    49,     1,     5,    47,     5,
    40,    32,     5,    44,     5,     5,    41,    38,     5,    21,
    46,     5,    25,    48,     5,    24,    50,     5,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     5,   nil,     5,   nil,   nil,
   nil,   nil,     5,     4,   nil,   nil,     5,   nil,   nil,     5,
   nil,   nil,     2,   nil,     5,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,     3,   nil,    39,    42,   nil,   nil,   nil,
   nil,     4,    36,     5,    45,    23,     5,   nil,    39,    49,
     4,   nil,    47,   nil,   nil,   nil,     4,    43,     4,   nil,
     2,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     5,     5,    45,   nil,   nil,   nil,
   nil,   nil,     2,   nil,   nil,     5,   nil,     5,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     5,   nil,   nil,   nil,
     5,     5,     5,   nil,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     5,     5,     5,     5,     5,     6,
     5,     5,     5,    33,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     5,     5,     5,   nil,     5,     5,
     5,    26,   nil,   nil,     5,   nil,   nil,    32,    21,     2,
   nil,   nil,     2,    38,    21,    21,   nil,   nil,     5,     5,
     5,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     5,     5,   nil,   nil,   nil,   nil,   nil,
   nil,     4,   nil,   nil,   nil,   nil,     5,     5,     4,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     2,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,   nil,     4,   nil,    21,     5,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     5,
     5,   nil,     5,   nil,     4,     4,   nil,   nil,    21,   nil,
   nil,     5,     5,   nil,   nil,   nil,   nil,   nil,     4,   nil,
   nil,     4,   nil,     2,     5,   nil,   nil,     5,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     5,     5 ]

racc_goto_pointer = [
   nil,    16,     0,    14,    12,    12,   -12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     3,   nil,  -187,    33,  -150,     0,   nil,   nil,   nil,
   nil,   nil,   -69,    -8,   nil,   nil,   -16,   nil,   -63,   -27,
  -244,   -91,   -55,  -123,  -162,  -179,   -48,    17,    32,    14,
    35 ]

racc_goto_default = [
   nil,   nil,   201,   nil,   nil,    68,    70,    73,     4,     9,
    15,    18,    23,    27,    29,    37,    39,    43,    46,    50,
    55,    60,    63,    99,   nil,    69,   nil,     6,    11,    17,
    20,    24,   107,    30,   108,   109,   nil,    48,   101,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     1,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 107, :_reduce_1,
  1, 107, :_reduce_2,
  1, 107, :_reduce_3,
  2, 107, :_reduce_4,
  1, 109, :_reduce_5,
  3, 109, :_reduce_6,
  2, 109, :_reduce_7,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  3, 110, :_reduce_24,
  2, 110, :_reduce_25,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 128, :_reduce_28,
  1, 128, :_reduce_29,
  1, 128, :_reduce_30,
  1, 128, :_reduce_31,
  1, 128, :_reduce_32,
  1, 128, :_reduce_33,
  1, 128, :_reduce_34,
  1, 128, :_reduce_35,
  1, 128, :_reduce_36,
  1, 128, :_reduce_37,
  1, 128, :_reduce_38,
  1, 128, :_reduce_39,
  3, 116, :_reduce_40,
  3, 129, :_reduce_41,
  3, 129, :_reduce_42,
  3, 129, :_reduce_43,
  1, 129, :_reduce_44,
  2, 120, :_reduce_45,
  1, 120, :_reduce_46,
  1, 127, :_reduce_47,
  2, 115, :_reduce_48,
  2, 115, :_reduce_49,
  2, 115, :_reduce_50,
  2, 115, :_reduce_51,
  2, 115, :_reduce_52,
  2, 115, :_reduce_53,
  2, 115, :_reduce_54,
  2, 115, :_reduce_55,
  2, 115, :_reduce_56,
  2, 115, :_reduce_57,
  2, 115, :_reduce_58,
  2, 115, :_reduce_59,
  3, 115, :_reduce_60,
  3, 115, :_reduce_61,
  3, 115, :_reduce_62,
  3, 115, :_reduce_63,
  3, 115, :_reduce_64,
  3, 115, :_reduce_65,
  3, 115, :_reduce_66,
  3, 115, :_reduce_67,
  3, 115, :_reduce_68,
  3, 115, :_reduce_69,
  3, 115, :_reduce_70,
  3, 115, :_reduce_71,
  3, 115, :_reduce_72,
  3, 115, :_reduce_73,
  3, 115, :_reduce_74,
  3, 115, :_reduce_75,
  3, 115, :_reduce_76,
  3, 115, :_reduce_77,
  3, 115, :_reduce_78,
  3, 115, :_reduce_79,
  3, 115, :_reduce_80,
  3, 115, :_reduce_81,
  3, 115, :_reduce_82,
  3, 115, :_reduce_83,
  3, 115, :_reduce_84,
  3, 115, :_reduce_85,
  3, 115, :_reduce_86,
  3, 115, :_reduce_87,
  3, 115, :_reduce_88,
  3, 115, :_reduce_89,
  3, 115, :_reduce_90,
  3, 115, :_reduce_91,
  3, 115, :_reduce_92,
  3, 115, :_reduce_93,
  2, 126, :_reduce_94,
  5, 114, :_reduce_95,
  2, 114, :_reduce_96,
  1, 131, :_reduce_97,
  1, 131, :_reduce_98,
  1, 130, :_reduce_99,
  3, 130, :_reduce_100,
  1, 132, :_reduce_none,
  4, 132, :_reduce_102,
  4, 125, :_reduce_103,
  1, 112, :_reduce_104,
  1, 112, :_reduce_105,
  1, 112, :_reduce_106,
  1, 112, :_reduce_107,
  1, 112, :_reduce_108,
  1, 112, :_reduce_109,
  1, 112, :_reduce_110,
  2, 112, :_reduce_111,
  2, 112, :_reduce_112,
  2, 138, :_reduce_113,
  2, 138, :_reduce_114,
  2, 138, :_reduce_115,
  1, 138, :_reduce_116,
  1, 138, :_reduce_117,
  3, 140, :_reduce_118,
  3, 134, :_reduce_119,
  0, 142, :_reduce_120,
  1, 142, :_reduce_121,
  3, 142, :_reduce_122,
  3, 142, :_reduce_123,
  4, 142, :_reduce_124,
  3, 142, :_reduce_125,
  1, 113, :_reduce_126,
  2, 113, :_reduce_127,
  1, 113, :_reduce_128,
  3, 124, :_reduce_129,
  2, 139, :_reduce_130,
  2, 139, :_reduce_131,
  3, 144, :_reduce_132,
  4, 143, :_reduce_133,
  1, 137, :_reduce_134,
  2, 137, :_reduce_135,
  6, 136, :_reduce_136,
  7, 136, :_reduce_137,
  6, 141, :_reduce_138,
  7, 141, :_reduce_139,
  3, 133, :_reduce_140,
  0, 145, :_reduce_141,
  1, 145, :_reduce_142,
  2, 145, :_reduce_143,
  3, 145, :_reduce_144,
  3, 145, :_reduce_145,
  4, 145, :_reduce_146,
  4, 145, :_reduce_147,
  2, 145, :_reduce_148,
  1, 146, :_reduce_149,
  3, 146, :_reduce_150,
  3, 118, :_reduce_151,
  4, 118, :_reduce_152,
  5, 118, :_reduce_153,
  3, 147, :_reduce_154,
  2, 119, :_reduce_155,
  3, 135, :_reduce_156,
  3, 121, :_reduce_157,
  2, 121, :_reduce_158,
  3, 121, :_reduce_159,
  4, 122, :_reduce_160,
  4, 122, :_reduce_161,
  1, 148, :_reduce_162,
  3, 148, :_reduce_163,
  2, 149, :_reduce_164,
  2, 149, :_reduce_165,
  3, 149, :_reduce_166,
  3, 149, :_reduce_167,
  5, 123, :_reduce_168,
  7, 123, :_reduce_169,
  1, 150, :_reduce_170,
  2, 150, :_reduce_171,
  3, 151, :_reduce_172,
  4, 151, :_reduce_173,
  3, 151, :_reduce_174,
  3, 152, :_reduce_175,
  2, 153, :_reduce_176,
  1, 154, :_reduce_177,
  2, 154, :_reduce_178,
  0, 155, :_reduce_179,
  2, 155, :_reduce_180,
  1, 156, :_reduce_181,
  2, 156, :_reduce_182,
  2, 117, :_reduce_183,
  3, 117, :_reduce_184,
  3, 117, :_reduce_185 ]

racc_reduce_n = 186

racc_shift_n = 326

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :UNLESS => 4,
  :NUMBER => 5,
  :STRING => 6,
  :REGEX => 7,
  :TRUE => 8,
  :FALSE => 9,
  :YES => 10,
  :NO => 11,
  :ON => 12,
  :OFF => 13,
  :IDENTIFIER => 14,
  :PROPERTY_ACCESS => 15,
  :PROTOTYPE_ACCESS => 16,
  :SOAK_ACCESS => 17,
  :CODE => 18,
  :PARAM_START => 19,
  :PARAM => 20,
  :PARAM_END => 21,
  :NEW => 22,
  :RETURN => 23,
  :CALL_START => 24,
  :CALL_END => 25,
  :INDEX_START => 26,
  :INDEX_END => 27,
  :TRY => 28,
  :CATCH => 29,
  :FINALLY => 30,
  :THROW => 31,
  :BREAK => 32,
  :CONTINUE => 33,
  :FOR => 34,
  :IN => 35,
  :OF => 36,
  :BY => 37,
  :WHEN => 38,
  :WHILE => 39,
  :SWITCH => 40,
  :LEADING_WHEN => 41,
  :DELETE => 42,
  :INSTANCEOF => 43,
  :TYPEOF => 44,
  :SUPER => 45,
  :EXTENDS => 46,
  :ASSIGN => 47,
  :NEWLINE => 48,
  :COMMENT => 49,
  :JS => 50,
  :INDENT => 51,
  :OUTDENT => 52,
  :UMINUS => 53,
  :UPLUS => 54,
  :NOT => 55,
  "!" => 56,
  "!!" => 57,
  "~" => 58,
  "++" => 59,
  "--" => 60,
  "*" => 61,
  "/" => 62,
  "%" => 63,
  "?" => 64,
  "." => 65,
  "+" => 66,
  "-" => 67,
  "<<" => 68,
  ">>" => 69,
  ">>>" => 70,
  "&" => 71,
  "|" => 72,
  "^" => 73,
  "<=" => 74,
  "<" => 75,
  ">" => 76,
  ">=" => 77,
  "==" => 78,
  "!=" => 79,
  :IS => 80,
  :ISNT => 81,
  "&&" => 82,
  "||" => 83,
  :AND => 84,
  :OR => 85,
  "-=" => 86,
  "+=" => 87,
  "/=" => 88,
  "*=" => 89,
  "%=" => 90,
  "||=" => 91,
  "&&=" => 92,
  "?=" => 93,
  "->" => 94,
  "=>" => 95,
  "\n" => 96,
  ";" => 97,
  "," => 98,
  "{" => 99,
  "}" => 100,
  "@" => 101,
  "[" => 102,
  "]" => 103,
  "(" => 104,
  ")" => 105 }

racc_nt_base = 106

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "UNLESS",
  "NUMBER",
  "STRING",
  "REGEX",
  "TRUE",
  "FALSE",
  "YES",
  "NO",
  "ON",
  "OFF",
  "IDENTIFIER",
  "PROPERTY_ACCESS",
  "PROTOTYPE_ACCESS",
  "SOAK_ACCESS",
  "CODE",
  "PARAM_START",
  "PARAM",
  "PARAM_END",
  "NEW",
  "RETURN",
  "CALL_START",
  "CALL_END",
  "INDEX_START",
  "INDEX_END",
  "TRY",
  "CATCH",
  "FINALLY",
  "THROW",
  "BREAK",
  "CONTINUE",
  "FOR",
  "IN",
  "OF",
  "BY",
  "WHEN",
  "WHILE",
  "SWITCH",
  "LEADING_WHEN",
  "DELETE",
  "INSTANCEOF",
  "TYPEOF",
  "SUPER",
  "EXTENDS",
  "ASSIGN",
  "NEWLINE",
  "COMMENT",
  "JS",
  "INDENT",
  "OUTDENT",
  "UMINUS",
  "UPLUS",
  "NOT",
  "\"!\"",
  "\"!!\"",
  "\"~\"",
  "\"++\"",
  "\"--\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"?\"",
  "\".\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\">>>\"",
  "\"&\"",
  "\"|\"",
  "\"^\"",
  "\"<=\"",
  "\"<\"",
  "\">\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "IS",
  "ISNT",
  "\"&&\"",
  "\"||\"",
  "AND",
  "OR",
  "\"-=\"",
  "\"+=\"",
  "\"/=\"",
  "\"*=\"",
  "\"%=\"",
  "\"||=\"",
  "\"&&=\"",
  "\"?=\"",
  "\"->\"",
  "\"=>\"",
  "\"\\n\"",
  "\";\"",
  "\",\"",
  "\"{\"",
  "\"}\"",
  "\"@\"",
  "\"[\"",
  "\"]\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Root",
  "Terminator",
  "Expressions",
  "Block",
  "Expression",
  "Value",
  "Call",
  "Code",
  "Operation",
  "Assign",
  "If",
  "Try",
  "Throw",
  "Return",
  "While",
  "For",
  "Switch",
  "Extends",
  "Splat",
  "Existence",
  "Comment",
  "Literal",
  "AssignObj",
  "ParamList",
  "FuncGlyph",
  "Param",
  "Array",
  "Object",
  "Parenthetical",
  "Range",
  "This",
  "Accessor",
  "Invocation",
  "Index",
  "Slice",
  "AssignList",
  "Super",
  "Arguments",
  "ArgList",
  "SimpleArgs",
  "Catch",
  "ForVariables",
  "ForSource",
  "Whens",
  "When",
  "IfBlock",
  "ElsIf",
  "ElsIfs",
  "ElseBody",
  "IfEnd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_1(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_2(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_5(val, _values, result)
     result = Expressions.wrap(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_6(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_24(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_25(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_28(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_29(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_30(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_31(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_32(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_33(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_34(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_35(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_36(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_37(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_38(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_39(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_40(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_41(val, _values, result)
     result = AssignNode.new(ValueNode.new(val[0]), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_42(val, _values, result)
     result = AssignNode.new(ValueNode.new(LiteralNode.new(val[0])), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_43(val, _values, result)
     result = AssignNode.new(ValueNode.new(LiteralNode.new(val[0])), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_45(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_46(val, _values, result)
     result = ReturnNode.new(ValueNode.new(Value.new('null'))) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_47(val, _values, result)
     result = CommentNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 136)
  def _reduce_48(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_49(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_50(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_51(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 140)
  def _reduce_52(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_53(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_54(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_55(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_56(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_57(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 146)
  def _reduce_58(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_59(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_60(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 150)
  def _reduce_61(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_62(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 153)
  def _reduce_63(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 154)
  def _reduce_64(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_65(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 157)
  def _reduce_66(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_67(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_68(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 161)
  def _reduce_69(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_70(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_71(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 165)
  def _reduce_72(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_73(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_74(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_75(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 170)
  def _reduce_76(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_77(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_78(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_79(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_80(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_81(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_82(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_83(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_84(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 181)
  def _reduce_85(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_86(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_87(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_88(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_89(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_90(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 187)
  def _reduce_91(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 189)
  def _reduce_92(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 190)
  def _reduce_93(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 195)
  def _reduce_94(val, _values, result)
     result = ExistenceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 201)
  def _reduce_95(val, _values, result)
     result = CodeNode.new(val[1], val[4], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_96(val, _values, result)
     result = CodeNode.new([], val[1], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 207)
  def _reduce_97(val, _values, result)
     result = :func 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_98(val, _values, result)
     result = :boundfunc 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 213)
  def _reduce_99(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 214)
  def _reduce_100(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

# reduce 101 omitted

module_eval(<<'.,.,', 'grammar.y', 220)
  def _reduce_102(val, _values, result)
     result = SplatNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 225)
  def _reduce_103(val, _values, result)
     result = SplatNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 230)
  def _reduce_104(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 231)
  def _reduce_105(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 232)
  def _reduce_106(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_107(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_108(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 235)
  def _reduce_109(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_110(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 237)
  def _reduce_111(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 238)
  def _reduce_112(val, _values, result)
     result = ValueNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 243)
  def _reduce_113(val, _values, result)
     result = AccessorNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_114(val, _values, result)
     result = AccessorNode.new(val[1], :prototype) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_115(val, _values, result)
     result = AccessorNode.new(val[1], :soak) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_116(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 247)
  def _reduce_117(val, _values, result)
     result = SliceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_118(val, _values, result)
     result = IndexNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_119(val, _values, result)
     result = ObjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_120(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_121(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 264)
  def _reduce_122(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 265)
  def _reduce_123(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 267)
  def _reduce_124(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 268)
  def _reduce_125(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 273)
  def _reduce_126(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 274)
  def _reduce_127(val, _values, result)
     result = val[1].new_instance 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 275)
  def _reduce_128(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 280)
  def _reduce_129(val, _values, result)
     result = ExtendsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 285)
  def _reduce_130(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 286)
  def _reduce_131(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 291)
  def _reduce_132(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 296)
  def _reduce_133(val, _values, result)
     result = CallNode.new(Value.new('super'), val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 301)
  def _reduce_134(val, _values, result)
     result = ThisNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 302)
  def _reduce_135(val, _values, result)
     result = ThisNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 308)
  def _reduce_136(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 310)
  def _reduce_137(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_138(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 318)
  def _reduce_139(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 323)
  def _reduce_140(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 328)
  def _reduce_141(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 329)
  def _reduce_142(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 330)
  def _reduce_143(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 331)
  def _reduce_144(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 332)
  def _reduce_145(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 333)
  def _reduce_146(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_147(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 335)
  def _reduce_148(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 340)
  def _reduce_149(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 341)
  def _reduce_150(val, _values, result)
     result = ([val[0]] << val[2]).flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 346)
  def _reduce_151(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 347)
  def _reduce_152(val, _values, result)
     result = TryNode.new(val[1], nil, nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 349)
  def _reduce_153(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 354)
  def _reduce_154(val, _values, result)
     result = [val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 359)
  def _reduce_155(val, _values, result)
     result = ThrowNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 364)
  def _reduce_156(val, _values, result)
     result = ParentheticalNode.new(val[1], val[0].line) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 369)
  def _reduce_157(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 370)
  def _reduce_158(val, _values, result)
     result = WhileNode.new(val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 371)
  def _reduce_159(val, _values, result)
     result = WhileNode.new(val[2], Expressions.wrap(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 378)
  def _reduce_160(val, _values, result)
     result = ForNode.new(val[0], val[3], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 379)
  def _reduce_161(val, _values, result)
     result = ForNode.new(val[3], val[2], val[1][0], val[1][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 384)
  def _reduce_162(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 385)
  def _reduce_163(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 390)
  def _reduce_164(val, _values, result)
     result = {:source => val[1]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 391)
  def _reduce_165(val, _values, result)
     result = {:source => val[1], :object => true} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 393)
  def _reduce_166(val, _values, result)
     result = val[0].merge(:filter => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 395)
  def _reduce_167(val, _values, result)
     result = val[0].merge(:step => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 401)
  def _reduce_168(val, _values, result)
     result = val[3].rewrite_condition(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 403)
  def _reduce_169(val, _values, result)
     result = val[3].rewrite_condition(val[1]).add_else(val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 408)
  def _reduce_170(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 409)
  def _reduce_171(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 414)
  def _reduce_172(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 416)
  def _reduce_173(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 417)
  def _reduce_174(val, _values, result)
     result = val[2].add_comment(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 422)
  def _reduce_175(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 427)
  def _reduce_176(val, _values, result)
     result = val[1].force_statement 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 432)
  def _reduce_177(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 433)
  def _reduce_178(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 438)
  def _reduce_179(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 439)
  def _reduce_180(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 444)
  def _reduce_181(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 445)
  def _reduce_182(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 450)
  def _reduce_183(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 451)
  def _reduce_184(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 452)
  def _reduce_185(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true, :invert => true}) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
