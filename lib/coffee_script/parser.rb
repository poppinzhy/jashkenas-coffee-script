#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

module CoffeeScript

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 450)
  # Lex and parse a CoffeeScript.
  def parse(code)
    # Uncomment the following line to enable grammar debugging, in combination
    # with the -g flag in the Rake build task.
    # @yydebug = true
    @tokens = Lexer.new.tokenize(code)
    do_parse
  end

  # Retrieve the next token from the list.
  def next_token
    @tokens.shift
  end

  # Raise a custom error class that knows about line numbers.
  def on_error(error_token_id, error_value, value_stack)
    raise ParseError.new(token_to_str(error_token_id), error_value, value_stack)
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'119,37,127,21,24,25,29,34,39,44,48,51,55,132,202,203,284,284,255,-181',
'-181,172,276,277,27,27,35,40,142,146,83,85,86,120,195,196,37,135,173',
'132,1,19,75,132,32,115,118,132,308,-181,-181,56,59,115,118,123,126,130',
'134,138,141,145,149,152,114,117,122,125,129,133,137,140,144,148,151',
'113,116,121,124,128,131,136,139,143,147,150,112,83,85,86,83,85,86,2',
'171,8,7,15,194,21,24,25,29,34,39,44,48,51,55,7,87,56,59,1,80,174,14',
'18,22,95,174,30,35,40,42,276,277,94,182,61,66,286,3,37,9,11,132,19,201',
'27,32,37,-181,-181,95,50,53,57,62,70,72,37,94,37,37,17,64,68,27,64,68',
'176,132,177,64,68,176,87,115,118,87,80,269,198,80,83,85,86,64,68,83',
'85,86,27,56,59,83,85,86,2,154,8,7,15,263,21,24,25,29,34,39,44,48,51',
'55,64,68,161,200,1,64,68,14,18,22,132,298,30,35,40,42,-181,-181,174',
'95,61,66,260,3,270,9,11,94,19,37,27,32,77,64,68,189,50,53,57,62,70,72',
'64,68,280,284,17,64,68,159,87,202,203,27,80,87,299,272,27,80,91,87,64',
'68,176,80,64,68,189,183,261,132,190,95,104,56,59,-181,-181,37,2,94,8',
'7,15,97,21,24,25,29,34,39,44,48,51,55,273,192,37,95,1,191,110,14,18',
'22,234,94,30,35,40,42,27,154,91,310,61,66,184,3,75,9,11,132,19,110,27',
'32,,115,118,,50,53,57,62,70,72,27,132,,,17,,,115,118,123,126,130,134',
'138,141,145,149,152,114,117,122,125,129,133,137,140,144,148,,132,,,',
'56,59,-181,-181,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14',
'18,22,132,,30,35,40,42,-181,-181,,,61,66,,3,,9,11,,19,,27,32,,,,,50',
'53,57,62,70,72,132,,,,17,,115,118,123,126,130,134,138,141,145,149,152',
'114,117,122,125,129,133,137,140,144,148,,,,,,,56,59,,,,2,,8,7,15,,21',
'24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66',
',3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,132,,,,17,,115,118,123,126',
'130,134,138,141,145,149,152,114,117,122,125,129,133,137,140,144,148',
',,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18',
'22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72',
'132,,,,17,,115,118,123,126,130,134,138,141,145,149,152,114,117,122,125',
'129,133,137,140,144,148,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39',
'44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27',
'32,,,,,50,53,57,62,70,72,132,,,,17,,115,118,123,126,130,134,138,141',
'145,149,152,114,117,122,125,129,133,137,140,144,148,,,,,,,56,59,,,,2',
',8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42',
',,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,132,,,,17,,115,118',
'123,126,130,134,138,141,145,149,152,114,117,122,125,129,133,137,140',
'144,148,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,',
'1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57',
'62,70,72,132,,,,17,,115,118,123,126,130,134,138,141,145,149,152,114',
'117,122,125,129,133,137,140,144,148,,,,,,,56,59,,,,2,,8,7,15,,21,24',
'25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3',
',9,11,,19,,27,32,,,,,50,53,57,62,70,72,132,,,,17,,115,118,123,126,130',
'134,138,141,145,149,152,114,117,122,125,129,133,137,140,144,148,,,,',
',,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22',
',,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,132',
',,,17,,115,118,123,126,130,134,138,141,145,149,152,114,117,132,,,,,',
'115,118,123,126,130,134,138,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44',
'48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32',
',,,,50,53,57,62,70,72,132,,,,17,,115,118,123,126,130,134,138,141,145',
'149,152,114,117,132,,,,,,115,118,123,126,130,134,138,,56,59,,,,2,,8',
'7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,',
',,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,132,,,,17,,115,118',
'123,126,130,134,138,141,145,149,152,114,117,132,,,,,,115,118,123,126',
'130,134,138,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1',
',,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57',
'62,70,72,132,,,,17,,115,118,123,126,130,134,138,141,145,149,152,114',
'117,132,,,,,,115,118,123,126,130,,,,56,59,,,,2,,8,7,15,,21,24,25,29',
'34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11',
',19,,27,32,,,,,50,53,57,62,70,72,132,,,,17,,115,118,123,126,130,134',
'138,141,145,149,132,,,,,,115,118,123,126,130,134,138,141,145,149,,56',
'59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30',
'35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,132,,,',
'17,,115,118,123,126,130,134,138,141,145,149,132,,,,,,115,118,123,126',
'130,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,',
'14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,108,,,50,53,57',
'62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24',
'25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3',
',9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18',
'22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72',
',,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34',
'39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19',
',27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59',
',,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35',
'40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48',
'51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,',
',,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,',
'8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42',
',,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55',
',,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50',
'53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15',
',21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61',
'66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1',
',,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57',
'62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24',
'25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3',
',9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18',
'22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72',
',,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34',
'39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19',
',27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59',
',,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35',
'40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48',
'51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,',
',,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,',
'8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42',
',,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,',
',,,,,,,,,,,,,,290,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51',
'55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,',
'50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7',
'15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,',
',61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,',
',,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53',
'57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21',
'24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66',
',3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14',
'18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70',
'72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29',
'34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11',
',19,,27,32,77,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22',
',,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,',
',,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34',
'39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19',
',27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59',
',,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35',
'40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48',
'51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,',
',,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,',
'8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42',
',,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55',
',,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50',
'53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15',
',21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61',
'66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1',
',,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57',
'62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24',
'25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3',
',9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18',
'22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72',
',,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34',
'39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19',
',27,32,77,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56',
'59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30',
'35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44',
'48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32',
',,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2',
',8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42',
',,,,61,66,,3,,9,11,,19,,27,32,37,,,,50,53,57,62,70,72,,,,,17,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,56,59,64,68,,2,,8,7,15,,21,24,25,29,34,39,44,48',
'51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,',
',,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,',
'8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42',
',,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55',
',,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50',
'53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15',
',21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61',
'66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1',
',,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,258,,,,50,53',
'57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,64,68,,2,,8,7,15',
',21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61',
'66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1',
',,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57',
'62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24',
'25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3',
',9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18',
'22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72',
',,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34',
'39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19',
',27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59',
',,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35',
'40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48',
'51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,',
',,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,',
'8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42',
',,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55',
',,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50',
'53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15',
',21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61',
'66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1',
',,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57',
'62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24',
'25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3',
',9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18',
'22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72',
',,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59,,,,2,,8,7,15,,21,24,25,29,34',
'39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,42,,,,,61,66,,3,,9,11,,19',
',27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,59',
',,,2,,8,7,15,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35',
'40,42,,,,,61,66,,3,,9,11,,19,,27,32,119,,127,,50,53,57,62,70,72,,,,',
'17,,,,,,,,,,,,,,142,146,,,,120,,,,135,,,,,,56,59,,,132,2,,8,,15,115',
'118,123,126,130,134,138,141,145,149,152,114,117,122,125,129,133,137',
'140,144,148,151,113,116,121,124,128,131,136,139,143,147,150,112,,,,',
',,,309,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30,35,40,,,',
',,,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62,70,72,,,,,17,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,56,59,,,,2,,8,,15,21,24,25,29,34,39,44,48,51,55,,,,,1',
',,14,18,22,,,30,35,40,42,,,,,,66,,3,,9,11,,19,,27,32,,,,,50,53,57,62',
'70,72,,,,,17,,,,21,24,25,29,34,39,44,48,51,55,,,,,1,,,14,18,22,,,30',
'35,40,56,59,,,,2,66,8,3,15,9,11,,19,,27,32,119,,127,,50,53,57,62,21',
'24,25,29,34,39,44,48,51,55,,,,,,,,,,,142,146,,35,40,120,,,,135,,,,,',
'56,59,,19,132,2,32,8,,15,115,118,123,126,130,134,138,141,145,149,152',
'114,117,122,125,129,133,137,140,144,148,151,113,116,121,124,128,131',
'136,139,143,147,150,112,119,,127,,,,,303,,,,2,,8,,15,,,,,,,,,,,,,142',
'146,,,,120,,,,135,,,,,,,,,,132,,,,,,115,118,123,126,130,134,138,141',
'145,149,152,114,117,122,125,129,133,137,140,144,148,151,113,116,121',
'124,128,131,136,139,179,147,150,112,119,,127,,,,,262,,,,,,,,,,,,,,,',
',,,,,142,146,,,,120,,,,135,,,,,,,,,,132,,,,,,115,118,123,126,130,134',
'138,141,145,149,152,114,117,122,125,129,133,137,140,144,148,151,113',
'116,121,124,128,131,136,139,179,147,150,112,119,,127,,,,,,,,,,,,,,,',
',,,,,,,,,,142,146,,,,120,,,,135,,,,,,,,37,,132,,,,,,115,118,123,126',
'130,134,138,141,145,149,152,114,117,122,125,129,133,137,140,144,148',
'151,113,116,121,124,128,131,136,139,143,147,150,112,119,,127,,,,,,,',
',,,,,,,,,,,,,,,,,,142,146,,,,120,,,,135,,,,,,,,,,132,,,,,,115,118,123',
'126,130,134,138,141,145,149,152,114,117,122,125,129,133,137,140,144',
'148,151,113,116,121,124,128,131,136,139,143,147,150,112,119,,127,,,',
',,,,,,,,,,,,,,,,,,,,,,142,146,,,,120,,,,135,,,,,,,,,,132,,,,,,115,118',
'123,126,130,134,138,141,145,149,152,114,117,122,125,129,133,137,140',
'144,148,151,113,116,121,124,128,131,136,139,143,147,150,112,119,,127',
',,,,,,,,,,,,,,,,,,,,,,,,,142,146,,,,120,,,,135,,,,,,,,,,132,,,,,,115',
'118,123,126,130,134,138,141,145,149,152,114,117,122,125,129,133,137',
'140,144,148,151,113,116,121,124,128,131,136,139,143,147,150,112,119',
',127,,,,,,,,,,,,,,,,,,,,,,,,,,142,146,,,,120,,,,135,,,,,,,,,,132,,,',
',,115,118,123,126,130,134,138,141,145,149,152,114,117,122,125,129,133',
'137,140,144,148,151,113,116,121,124,128,131,136,139,143,147,150,112',
'119,,127,,,,,,,,,,,,,,,,,,,,,,,,,,142,146,,,,120,,,,135,,,,,,,,,,132',
',,,,,115,118,123,126,130,134,138,141,145,149,152,114,117,122,125,129',
'133,137,140,144,148,151,113,116,121,124,128,131,136,139,143,147,150',
'112,119,,127,,,,,,,,,,,,,,,,,,,,,,,,,,142,146,,,,120,,,,135,,,,,,,,',
',132,,,,,,115,118,123,126,130,134,138,141,145,149,152,114,117,122,125',
'129,133,137,140,144,148,151,113,116,121,124,128,131,136,139,143,147',
'150,112,119,,127,,,,,,,,,,,,,,,,,,,,,,,,,,142,146,,,,120,,,,135,,,,',
',,,,,132,,,,,,115,118,123,126,130,134,138,141,145,149,152,114,117,122',
'125,129,133,137,140,144,148,151,113,116,121,124,128,131,136,139,143',
'147,150,112,119,,127,,,,,,,,,,,,,,,,,,,,,,,,,,142,146,,,,120,,,,135',
',,,,,,,,,132,,,,,,115,118,123,126,130,134,138,141,145,149,152,114,117',
'122,125,129,133,137,140,144,148,151,113,116,121,124,128,131,136,139',
'143,147,150,112,119,,127,,,,,,,,,,,,,,,,,,,,,,,,,,142,146,,,,120,,,',
'135,,,,,,,,,,132,,,,,,115,118,123,126,130,134,138,141,145,149,152,114',
'117,122,125,129,133,137,140,144,148,151,113,116,121,124,128,131,136',
'139,143,147,150,112,119,,127,,,,,,,,,,,,,,,,,,,,,,,,,,142,146,,,,120',
',,,135,,,,,,,,,,132,,,,,,115,118,123,126,130,134,138,141,145,149,152',
'114,117,122,125,129,133,137,140,144,148,151,113,116,121,124,128,131',
'136,139,143,147,150,112,119,,127,,,,,,,,,,,,,,,,,,,,,,,,,,142,146,,',
',120,,,,135,,,,,,,,,,132,,,,,,115,118,123,126,130,134,138,141,145,149',
'152,114,117,122,125,129,133,137,140,144,148,151,113,116,121,124,128',
'131,136,139,143,147,150,112,119,,127,,,,,,,,,,,,,,,,,,,,,,,,,,142,146',
',,,120,,,,135,,,,,,,,,,132,,,,,,115,118,123,126,130,134,138,141,145',
'149,152,114,117,122,125,129,133,137,140,144,148,151,113,116,121,124',
'128,131,136,139,143,147,150,112,119,,127,,,,,,,,,,,,,,,,,,,,,,,,,,142',
'146,,,,120,,,,135,,,,,,,,,,132,,,,,,115,118,123,126,130,134,138,141',
'145,149,152,114,117,122,125,129,133,137,140,144,148,151,113,116,121',
'124,128,131,136,139,143,147,150,112,119,,127,,,,,,,,,,,,,,,,,,,,,,,',
',,142,146,,,,120,,,,135,,,,,,,,252,,132,,,,,,115,118,123,126,130,134',
'138,141,145,149,152,114,117,122,125,129,133,137,140,144,148,151,113',
'116,121,124,128,131,136,139,143,147,150,112,119,,127,,,,,,,,,,,,,,,',
',,,,,,,,,,142,146,,,,120,,,,135,,,,,,,,,,132,,,,,,115,118,123,126,130',
'134,138,141,145,149,152,114,117,122,125,129,133,137,140,144,148,151',
'113,116,121,124,128,131,136,139,143,147,150,112,119,,127,,,,,,,,,,,',
',,,,,,,,,,,,,,142,146,,,,120,,,,135,,,,,,,,37,,132,,,,,,115,118,123',
'126,130,134,138,141,145,149,152,114,117,122,125,129,133,137,140,144',
'148,151,113,116,121,124,128,131,136,139,143,147,150,112,119,,127,,,',
',,,,,,,,,,,,,,,,,,,,,,142,146,,,,120,,,,135,,,,,,,,,,132,,,,,,115,118',
'123,126,130,134,138,141,145,149,152,114,117,122,125,129,133,137,140',
'144,148,151,113,116,121,124,128,131,136,139,143,147,150,112,142,146',
',,,,,,,135,,,,,,,,,,132,,,,,,115,118,123,126,130,134,138,141,145,149',
'152,114,117,122,125,129,133,137,140,144,148,151,113,116,121,124,128',
'131,136,139,143,147,150,112,142,146,,,,,,,,135,,,,,,,,,,132,,,,,,115',
'118,123,126,130,134,138,141,145,149,152,114,117,122,125,129,133,137',
'140,144,148,151,113,116,121,124,128,131,136,139,143,147,150,112,142',
'146,,,,,,,,135,,,,,,,,,,132,,,,,,115,118,123,126,130,134,138,141,145',
'149,152,114,117,122,125,129,133,137,140,144,148,151,113,116,121,124',
'128,131,136,139,143,142,146,,,,,,,,135,,,,,,,,,,132,,,,,,115,118,123',
'126,130,134,138,141,145,149,152,114,117,122,125,129,133,137,140,144',
'148,151,113,116,121,124,128,131,136,139,143,142,146,,,,,,,,135,,,,,',
',,,,132,,,,,,115,118,123,126,130,134,138,141,145,149,152,114,117,122',
'125,129,133,137,140,144,148,151,113,116,121,124,128,131,136,139,143',
'142,146,,,,,,,,135,,,,,,,,,,132,,,,,,115,118,123,126,130,134,138,141',
'145,149,152,114,117,122,125,129,133,137,140,144,148,151,113,116,121',
'124,128,131,136,139,143,146,,,,,,,,135,,,,,,,,,,132,,,,,,115,118,123',
'126,130,134,138,141,145,149,152,114,117,122,125,129,133,137,140,144',
'148,151,113,116,121,124,128,131,136,139,143,146,,,,,,,,135,,,,,,,,,',
'132,,,,,,115,118,123,126,130,134,138,141,145,149,152,114,117,122,125',
'129,133,137,140,144,148,151,113,116,121,124,128,131,136,139,143,146',
',,,,,,,135,,,,,,,,,,132,,,,,,115,118,123,126,130,134,138,141,145,149',
'152,114,117,122,125,129,133,137,140,144,148,151,113,116,121,124,128',
'131,136,139,143,146,,,,,,,,135,,,,,,,,,,132,,,,,,115,118,123,126,130',
'134,138,141,145,149,152,114,117,122,125,129,133,137,140,144,148,151',
'113,116,121,124,128,131,136,139,143,146,,,,,,,,135,,,,,,,,,,132,,,,',
',115,118,123,126,130,134,138,141,145,149,152,114,117,122,125,129,133',
'137,140,144,148,151,113,116,121,124,128,131,136,139,143,135,,,,,,,,',
',132,,,,,,115,118,123,126,130,134,138,141,145,149,152,114,117,122,125',
'129,133,137,140,144,148,151,113,116,121,124,128,131,136,139,135,,,,',
',,,,,132,,,,,,115,118,123,126,130,134,138,141,145,149,152,114,117,122',
'125,129,133,137,140,144,148,151,113,116,121,124,128,131,136,139,135',
',,,,,,,,,132,,,,,,115,118,123,126,130,134,138,141,145,149,152,114,117',
'122,125,129,133,137,140,144,148,151,113,116,121,124,128,131,136,139',
'132,,,,,,115,118,123,126,130,134,138,141,145,149,152,114,117,122,125',
'129,133,137,140,144,148,151,113,116,121,124,128,131,136,139,132,,,,',
',115,118,123,126,130,134,138,141,145,149,152,114,117,122,125,129,133',
'137,140,144,148,151,113,116,121,124,128,131,136,139,132,,,,,,115,118',
'123,126,130,134,138,141,145,149,152,114,117,122,125,129,133,137,140',
'144,148,151,113,116,121,124,128,131,136,139,132,,,,,,115,118,123,126',
'130,134,138,141,145,149,152,114,117,122,125,129,133,137,140,144,148',
'151,113,116,121,124,128,131,136,139,132,,,,,,115,118,123,126,130,134',
'138,141,145,149,152,114,117,122,125,129,133,137,140,144,148,151,113',
'116,121,124,128,131,136,139' ]
        racc_action_table = arr = Array.new(10011, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'100,301,100,14,14,14,14,14,14,14,14,14,14,101,111,111,300,252,173,101',
'101,73,204,204,300,252,14,14,100,100,98,98,98,100,103,103,204,100,75',
'214,261,14,171,163,14,214,214,100,301,163,163,172,172,100,100,100,100',
'100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100',
'100,100,100,100,100,100,100,100,100,100,100,100,100,5,5,5,250,250,250',
'14,73,14,129,14,100,129,129,129,129,129,129,129,129,129,129,154,98,261',
'261,129,98,76,129,129,129,189,193,129,129,129,129,279,279,189,83,129',
'129,255,129,47,129,129,164,129,110,129,129,270,164,164,188,129,129,129',
'129,129,129,272,188,254,154,129,41,41,189,76,76,76,221,76,193,193,193',
'5,221,221,250,5,193,104,250,99,99,99,36,36,46,46,46,188,129,129,249',
'249,249,129,45,129,2,129,187,2,2,2,2,2,2,2,2,2,2,189,189,46,107,2,307',
'307,2,2,2,165,281,2,2,2,2,165,165,180,8,2,2,179,2,195,2,2,8,2,196,2',
'2,2,187,187,187,2,2,2,2,2,2,282,282,234,281,2,107,107,46,99,233,233',
'281,99,46,281,197,8,46,8,249,180,180,180,249,93,93,93,85,180,169,93',
'91,26,2,2,169,169,22,2,91,2,3,2,11,3,3,3,3,3,3,3,3,3,3,201,95,298,266',
'3,94,142,3,3,3,143,266,3,3,3,3,91,155,91,305,3,3,86,3,1,3,3,217,3,42',
'3,3,,217,217,,3,3,3,3,3,3,266,208,,,3,,,208,208,208,208,208,208,208',
'208,208,208,208,208,208,208,208,208,208,208,208,208,208,,167,,,,3,3',
'167,167,,3,,3,151,3,,151,151,151,151,151,151,151,151,151,151,,,,,151',
',,151,151,151,170,,151,151,151,151,170,170,,,151,151,,151,,151,151,',
'151,,151,151,,,,,151,151,151,151,151,151,206,,,,151,,206,206,206,206',
'206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206,206',
',,,,,,151,151,,,,151,,151,7,151,,7,7,7,7,7,7,7,7,7,7,,,,,7,,,7,7,7,',
',7,7,7,7,,,,,7,7,,7,,7,7,,7,,7,7,,,,,7,7,7,7,7,7,242,,,,7,,242,242,242',
'242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242',
'242,,,,,,,7,7,,,,7,,7,150,7,,150,150,150,150,150,150,150,150,150,150',
',,,,150,,,150,150,150,,,150,150,150,150,,,,,150,150,,150,,150,150,,150',
',150,150,,,,,150,150,150,150,150,150,239,,,,150,,239,239,239,239,239',
'239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,,,,',
',,150,150,,,,150,,150,9,150,,9,9,9,9,9,9,9,9,9,9,,,,,9,,,9,9,9,,,9,9',
'9,9,,,,,9,9,,9,,9,9,,9,,9,9,,,,,9,9,9,9,9,9,212,,,,9,,212,212,212,212',
'212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212',
',,,,,,9,9,,,,9,,9,149,9,,149,149,149,149,149,149,149,149,149,149,,,',
',149,,,149,149,149,,,149,149,149,149,,,,,149,149,,149,,149,149,,149',
',149,149,,,,,149,149,149,149,149,149,235,,,,149,,235,235,235,235,235',
'235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,235,,,,',
',,149,149,,,,149,,149,148,149,,148,148,148,148,148,148,148,148,148,148',
',,,,148,,,148,148,148,,,148,148,148,148,,,,,148,148,,148,,148,148,,148',
',148,148,,,,,148,148,148,148,148,148,231,,,,148,,231,231,231,231,231',
'231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,231,,,,',
',,148,148,,,,148,,148,15,148,,15,15,15,15,15,15,15,15,15,15,,,,,15,',
',15,15,15,,,15,15,15,15,,,,,15,15,,15,,15,15,,15,,15,15,,,,,15,15,15',
'15,15,15,228,,,,15,,228,228,228,228,228,228,228,228,228,228,228,228',
'228,228,228,228,228,228,228,228,228,,,,,,,15,15,,,,15,,15,17,15,,17',
'17,17,17,17,17,17,17,17,17,,,,,17,,,17,17,17,,,17,17,17,17,,,,,17,17',
',17,,17,17,,17,,17,17,,,,,17,17,17,17,17,17,216,,,,17,,216,216,216,216',
'216,216,216,216,216,216,216,216,216,236,,,,,,236,236,236,236,236,236',
'236,,17,17,,,,17,,17,147,17,,147,147,147,147,147,147,147,147,147,147',
',,,,147,,,147,147,147,,,147,147,147,147,,,,,147,147,,147,,147,147,,147',
',147,147,,,,,147,147,147,147,147,147,224,,,,147,,224,224,224,224,224',
'224,224,224,224,224,224,224,224,232,,,,,,232,232,232,232,232,232,232',
',147,147,,,,147,,147,146,147,,146,146,146,146,146,146,146,146,146,146',
',,,,146,,,146,146,146,,,146,146,146,146,,,,,146,146,,146,,146,146,,146',
',146,146,,,,,146,146,146,146,146,146,213,,,,146,,213,213,213,213,213',
'213,213,213,213,213,213,213,213,240,,,,,,240,240,240,240,240,240,240',
',146,146,,,,146,,146,145,146,,145,145,145,145,145,145,145,145,145,145',
',,,,145,,,145,145,145,,,145,145,145,145,,,,,145,145,,145,,145,145,,145',
',145,145,,,,,145,145,145,145,145,145,220,,,,145,,220,220,220,220,220',
'220,220,220,220,220,220,220,220,229,,,,,,229,229,229,229,229,,,,145',
'145,,,,145,,145,30,145,,30,30,30,30,30,30,30,30,30,30,,,,,30,,,30,30',
'30,,,30,30,30,30,,,,,30,30,,30,,30,30,,30,,30,30,,,,,30,30,30,30,30',
'30,207,,,,30,,207,207,207,207,207,207,207,207,207,207,209,,,,,,209,209',
'209,209,209,209,209,209,209,209,,30,30,,,,30,,30,144,30,,144,144,144',
'144,144,144,144,144,144,144,,,,,144,,,144,144,144,,,144,144,144,144',
',,,,144,144,,144,,144,144,,144,,144,144,,,,,144,144,144,144,144,144',
'243,,,,144,,243,243,243,243,243,243,243,243,243,243,225,,,,,,225,225',
'225,225,225,,,,,,,144,144,,,,144,,144,37,144,,37,37,37,37,37,37,37,37',
'37,37,,,,,37,,,37,37,37,,,37,37,37,37,,,,,37,37,,37,,37,37,,37,,37,37',
',37,,,37,37,37,37,37,37,,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,37,37,,,',
'37,,37,284,37,,284,284,284,284,284,284,284,284,284,284,,,,,284,,,284',
'284,284,,,284,284,284,284,,,,,284,284,,284,,284,284,,284,,284,284,,',
',,284,284,284,284,284,284,,,,,284,,,,,,,,,,,,,,,,,,,,,,,,,,,,,284,284',
',,,284,,284,277,284,,277,277,277,277,277,277,277,277,277,277,,,,,277',
',,277,277,277,,,277,277,277,277,,,,,277,277,,277,,277,277,,277,,277',
'277,,,,,277,277,277,277,277,277,,,,,277,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'277,277,,,,277,,277,159,277,,159,159,159,159,159,159,159,159,159,159',
',,,,159,,,159,159,159,,,159,159,159,159,,,,,159,159,,159,,159,159,,159',
',159,159,,,,,159,159,159,159,159,159,,,,,159,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,159,159,,,,159,,159,276,159,,276,276,276,276,276,276,276,276,276',
'276,,,,,276,,,276,276,276,,,276,276,276,276,,,,,276,276,,276,,276,276',
',276,,276,276,,,,,276,276,276,276,276,276,,,,,276,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,276,276,,,,276,,276,141,276,,141,141,141,141,141,141,141,141',
'141,141,,,,,141,,,141,141,141,,,141,141,141,141,,,,,141,141,,141,,141',
'141,,141,,141,141,,,,,141,141,141,141,141,141,,,,,141,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,141,141,,,,141,,141,140,141,,140,140,140,140,140,140,140',
'140,140,140,,,,,140,,,140,140,140,,,140,140,140,140,,,,,140,140,,140',
',140,140,,140,,140,140,,,,,140,140,140,140,140,140,,,,,140,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,140,140,,,,140,,140,50,140,,50,50,50,50,50,50,50',
'50,50,50,,,,,50,,,50,50,50,,,50,50,50,50,,,,,50,50,,50,,50,50,,50,,50',
'50,,,,,50,50,50,50,50,50,,,,,50,,,,,,,,,,,,,,,,,,,,,,,,,,,,,50,50,,',
',50,,50,53,50,,53,53,53,53,53,53,53,53,53,53,,,,,53,,,53,53,53,,,53',
'53,53,53,,,,,53,53,,53,,53,53,,53,,53,53,,,,,53,53,53,53,53,53,,,,,53',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,53,53,,,,53,,53,57,53,,57,57,57,57,57,57',
'57,57,57,57,,,,,57,,,57,57,57,,,57,57,57,57,,,,,57,57,,57,,57,57,,57',
',57,57,,,,,57,57,57,57,57,57,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,57',
',,,57,,57,61,57,,61,61,61,61,61,61,61,61,61,61,,,,,61,,,61,61,61,,,61',
'61,61,61,,,,,61,61,,61,,61,61,,61,,61,61,,,,,61,61,61,61,61,61,,,,,61',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,61,61,,,,61,,61,62,61,,62,62,62,62,62,62',
'62,62,62,62,,,,,62,,,62,62,62,,,62,62,62,62,,,,,62,62,,62,,62,62,,62',
',62,62,,,,,62,62,62,62,62,62,,,,,62,,,,,,,,,,,,,,,,,,,,,,,,,,,,,62,62',
',,,62,,62,66,62,,66,66,66,66,66,66,66,66,66,66,,,,,66,,,66,66,66,,,66',
'66,66,66,,,,,66,66,,66,,66,66,,66,,66,66,,,,,66,66,66,66,66,66,,,,,66',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,66,66,,,,66,,66,70,66,,70,70,70,70,70,70',
'70,70,70,70,,,,,70,,,70,70,70,,,70,70,70,70,,,,,70,70,,70,,70,70,,70',
',70,70,,,,,70,70,70,70,70,70,,,,,70,,,,,,,,,,,,,,,,,,,,,,,,,,,,,70,70',
',,,70,,70,72,70,,72,72,72,72,72,72,72,72,72,72,,,,,72,,,72,72,72,,,72',
'72,72,72,,,,,72,72,,72,,72,72,,72,,72,72,,,,,72,72,72,72,72,72,,,,,72',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,72,72,,,,72,,72,260,72,,260,260,260,260',
'260,260,260,260,260,260,,,,,260,,,260,260,260,,,260,260,260,260,,,,',
'260,260,,260,,260,260,,260,,260,260,,,,,260,260,260,260,260,260,,,,',
'260,,,,,,,,,,,,,,,,,,,,,,,,260,,,,,260,260,,,,260,,260,139,260,,139',
'139,139,139,139,139,139,139,139,139,,,,,139,,,139,139,139,,,139,139',
'139,139,,,,,139,139,,139,,139,139,,139,,139,139,,,,,139,139,139,139',
'139,139,,,,,139,,,,,,,,,,,,,,,,,,,,,,,,,,,,,139,139,,,,139,,139,258',
'139,,258,258,258,258,258,258,258,258,258,258,,,,,258,,,258,258,258,',
',258,258,258,258,,,,,258,258,,258,,258,258,,258,,258,258,,,,,258,258',
'258,258,258,258,,,,,258,,,,,,,,,,,,,,,,,,,,,,,,,,,,,258,258,,,,258,',
'258,77,258,,77,77,77,77,77,77,77,77,77,77,,,,,77,,,77,77,77,,,77,77',
'77,77,,,,,77,77,,77,,77,77,,77,,77,77,,,,,77,77,77,77,77,77,,,,,77,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,77,77,,,,77,,77,138,77,,138,138,138,138,138',
'138,138,138,138,138,,,,,138,,,138,138,138,,,138,138,138,138,,,,,138',
'138,,138,,138,138,,138,,138,138,,,,,138,138,138,138,138,138,,,,,138',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,138,138,,,,138,,138,257,138,,257,257,257',
'257,257,257,257,257,257,257,,,,,257,,,257,257,257,,,257,257,257,257',
',,,,257,257,,257,,257,257,,257,,257,257,,,,,257,257,257,257,257,257',
',,,,257,,,,,,,,,,,,,,,,,,,,,,,,,,,,,257,257,,,,257,,257,80,257,,80,80',
'80,80,80,80,80,80,80,80,,,,,80,,,80,80,80,,,80,80,80,80,,,,,80,80,,80',
',80,80,,80,,80,80,80,,,,80,80,80,80,80,80,,,,,80,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,80,80,,,,80,,80,137,80,,137,137,137,137,137,137,137,137,137',
'137,,,,,137,,,137,137,137,,,137,137,137,137,,,,,137,137,,137,,137,137',
',137,,137,137,,,,,137,137,137,137,137,137,,,,,137,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,137,137,,,,137,,137,152,137,,152,152,152,152,152,152,152,152',
'152,152,,,,,152,,,152,152,152,,,152,152,152,152,,,,,152,152,,152,,152',
'152,,152,,152,152,,,,,152,152,152,152,152,152,,,,,152,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,152,152,,,,152,,152,136,152,,136,136,136,136,136,136,136',
'136,136,136,,,,,136,,,136,136,136,,,136,136,136,136,,,,,136,136,,136',
',136,136,,136,,136,136,,,,,136,136,136,136,136,136,,,,,136,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,136,136,,,,136,,136,87,136,,87,87,87,87,87,87,87',
'87,87,87,,,,,87,,,87,87,87,,,87,87,87,87,,,,,87,87,,87,,87,87,,87,,87',
'87,,,,,87,87,87,87,87,87,,,,,87,,,,,,,,,,,,,,,,,,,,,,,,,,,,,87,87,,',
',87,,87,135,87,,135,135,135,135,135,135,135,135,135,135,,,,,135,,,135',
'135,135,,,135,135,135,135,,,,,135,135,,135,,135,135,,135,,135,135,,',
',,135,135,135,135,135,135,,,,,135,,,,,,,,,,,,,,,,,,,,,,,,,,,,,135,135',
',,,135,,135,134,135,,134,134,134,134,134,134,134,134,134,134,,,,,134',
',,134,134,134,,,134,134,134,134,,,,,134,134,,134,,134,134,,134,,134',
'134,,,,,134,134,134,134,134,134,,,,,134,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'134,134,,,,134,,134,133,134,,133,133,133,133,133,133,133,133,133,133',
',,,,133,,,133,133,133,,,133,133,133,133,,,,,133,133,,133,,133,133,,133',
',133,133,,,,,133,133,133,133,133,133,,,,,133,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,133,133,,,,133,,133,203,133,,203,203,203,203,203,203,203,203,203',
'203,,,,,203,,,203,203,203,,,203,203,203,203,,,,,203,203,,203,,203,203',
',203,,203,203,,,,,203,203,203,203,203,203,,,,,203,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,203,203,,,,203,,203,202,203,,202,202,202,202,202,202,202,202',
'202,202,,,,,202,,,202,202,202,,,202,202,202,202,,,,,202,202,,202,,202',
'202,,202,,202,202,,,,,202,202,202,202,202,202,,,,,202,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,202,202,,,,202,,202,131,202,,131,131,131,131,131,131,131',
'131,131,131,,,,,131,,,131,131,131,,,131,131,131,131,,,,,131,131,,131',
',131,131,,131,,131,131,,,,,131,131,131,131,131,131,,,,,131,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,131,131,,,,131,,131,97,131,,97,97,97,97,97,97,97',
'97,97,97,,,,,97,,,97,97,97,,,97,97,97,97,,,,,97,97,,97,,97,97,,97,,97',
'97,97,,,,97,97,97,97,97,97,,,,,97,,,,,,,,,,,,,,,,,,,,,,,,,,,,,97,97',
',,,97,,97,192,97,,192,192,192,192,192,192,192,192,192,192,,,,,192,,',
'192,192,192,,,192,192,192,192,,,,,192,192,,192,,192,192,,192,,192,192',
',,,,192,192,192,192,192,192,,,,,192,,,,,,,,,,,,,,,,,,,,,,,,,,,,,192',
'192,,,,192,,192,191,192,,191,191,191,191,191,191,191,191,191,191,,,',
',191,,,191,191,191,,,191,191,191,191,,,,,191,191,,191,,191,191,,191',
',191,191,,,,,191,191,191,191,191,191,,,,,191,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,191,191,,,,191,,191,0,191,,0,0,0,0,0,0,0,0,0,0,,,,,0,,,0,0,0,,',
'0,0,0,0,,,,,0,0,,0,,0,0,,0,,0,0,0,,,,0,0,0,0,0,0,,,,,0,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,0,0,0,0,,0,,0,130,0,,130,130,130,130,130,130,130,130',
'130,130,,,,,130,,,130,130,130,,,130,130,130,130,,,,,130,130,,130,,130',
'130,,130,,130,130,,,,,130,130,130,130,130,130,,,,,130,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,130,130,,,,130,,130,308,130,,308,308,308,308,308,308,308',
'308,308,308,,,,,308,,,308,308,308,,,308,308,308,308,,,,,308,308,,308',
',308,308,,308,,308,308,,,,,308,308,308,308,308,308,,,,,308,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,308,308,,,,308,,308,128,308,,128,128,128,128,128',
'128,128,128,128,128,,,,,128,,,128,128,128,,,128,128,128,128,,,,,128',
'128,,128,,128,128,,128,,128,128,,,,,128,128,128,128,128,128,,,,,128',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,128,128,,,,128,,128,124,128,,124,124,124',
'124,124,124,124,124,124,124,,,,,124,,,124,124,124,,,124,124,124,124',
',,,,124,124,,124,,124,124,,124,,124,124,,,,,124,124,124,124,124,124',
',,,,124,,,,,,,,,,,,,,,,,,,,,,,,,,,,,124,124,,,,124,,124,176,124,,176',
'176,176,176,176,176,176,176,176,176,,,,,176,,,176,176,176,,,176,176',
'176,176,,,,,176,176,,176,,176,176,,176,,176,176,176,,,,176,176,176,176',
'176,176,,,,,176,,,,,,,,,,,,,,,,,,,,,,,,,,,,,176,176,176,176,,176,,176',
'106,176,,106,106,106,106,106,106,106,106,106,106,,,,,106,,,106,106,106',
',,106,106,106,106,,,,,106,106,,106,,106,106,,106,,106,106,,,,,106,106',
'106,106,106,106,,,,,106,,,,,,,,,,,,,,,,,,,,,,,,,,,,,106,106,,,,106,',
'106,175,106,,175,175,175,175,175,175,175,175,175,175,,,,,175,,,175,175',
'175,,,175,175,175,175,,,,,175,175,,175,,175,175,,175,,175,175,,,,,175',
'175,175,175,175,175,,,,,175,,,,,,,,,,,,,,,,,,,,,,,,,,,,,175,175,,,,175',
',175,126,175,,126,126,126,126,126,126,126,126,126,126,,,,,126,,,126',
'126,126,,,126,126,126,126,,,,,126,126,,126,,126,126,,126,,126,126,,',
',,126,126,126,126,126,126,,,,,126,,,,,,,,,,,,,,,,,,,,,,,,,,,,,126,126',
',,,126,,126,125,126,,125,125,125,125,125,125,125,125,125,125,,,,,125',
',,125,125,125,,,125,125,125,125,,,,,125,125,,125,,125,125,,125,,125',
'125,,,,,125,125,125,125,125,125,,,,,125,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'125,125,,,,125,,125,112,125,,112,112,112,112,112,112,112,112,112,112',
',,,,112,,,112,112,112,,,112,112,112,112,,,,,112,112,,112,,112,112,,112',
',112,112,,,,,112,112,112,112,112,112,,,,,112,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,112,112,,,,112,,112,113,112,,113,113,113,113,113,113,113,113,113',
'113,,,,,113,,,113,113,113,,,113,113,113,113,,,,,113,113,,113,,113,113',
',113,,113,113,,,,,113,113,113,113,113,113,,,,,113,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,113,113,,,,113,,113,114,113,,114,114,114,114,114,114,114,114',
'114,114,,,,,114,,,114,114,114,,,114,114,114,114,,,,,114,114,,114,,114',
'114,,114,,114,114,,,,,114,114,114,114,114,114,,,,,114,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,114,114,,,,114,,114,116,114,,116,116,116,116,116,116,116',
'116,116,116,,,,,116,,,116,116,116,,,116,116,116,116,,,,,116,116,,116',
',116,116,,116,,116,116,,,,,116,116,116,116,116,116,,,,,116,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,116,116,,,,116,,116,117,116,,117,117,117,117,117',
'117,117,117,117,117,,,,,117,,,117,117,117,,,117,117,117,117,,,,,117',
'117,,117,,117,117,,117,,117,117,,,,,117,117,117,117,117,117,,,,,117',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,117,117,,,,117,,117,119,117,,119,119,119',
'119,119,119,119,119,119,119,,,,,119,,,119,119,119,,,119,119,119,119',
',,,,119,119,,119,,119,119,,119,,119,119,,,,,119,119,119,119,119,119',
',,,,119,,,,,,,,,,,,,,,,,,,,,,,,,,,,,119,119,,,,119,,119,120,119,,120',
'120,120,120,120,120,120,120,120,120,,,,,120,,,120,120,120,,,120,120',
'120,120,,,,,120,120,,120,,120,120,,120,,120,120,,,,,120,120,120,120',
'120,120,,,,,120,,,,,,,,,,,,,,,,,,,,,,,,,,,,,120,120,,,,120,,120,121',
'120,,121,121,121,121,121,121,121,121,121,121,,,,,121,,,121,121,121,',
',121,121,121,121,,,,,121,121,,121,,121,121,,121,,121,121,,,,,121,121',
'121,121,121,121,,,,,121,,,,,,,,,,,,,,,,,,,,,,,,,,,,,121,121,,,,121,',
'121,122,121,,122,122,122,122,122,122,122,122,122,122,,,,,122,,,122,122',
'122,,,122,122,122,122,,,,,122,122,,122,,122,122,,122,,122,122,,,,,122',
'122,122,122,122,122,,,,,122,,,,,,,,,,,,,,,,,,,,,,,,,,,,,122,122,,,,122',
',122,123,122,,123,123,123,123,123,123,123,123,123,123,,,,,123,,,123',
'123,123,,,123,123,123,123,,,,,123,123,,123,,123,123,,123,,123,123,,',
',,123,123,123,123,123,123,,,,,123,,,,,,,,,,,,,,,,,,,,,,,,,,,,,123,123',
',,,123,,123,127,123,,127,127,127,127,127,127,127,127,127,127,,,,,127',
',,127,127,127,,,127,127,127,127,,,,,127,127,,127,,127,127,,127,,127',
'127,304,,304,,127,127,127,127,127,127,,,,,127,,,,,,,,,,,,,,304,304,',
',,304,,,,304,,,,,,127,127,,,304,127,,127,,127,304,304,304,304,304,304',
'304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304',
'304,304,304,304,304,304,304,304,304,304,304,,,,,,,,304,290,290,290,290',
'290,290,290,290,290,290,,,,,290,,,290,290,290,,,290,290,290,,,,,,,290',
',290,,290,290,,290,,290,290,,,,,290,290,290,290,290,290,,,,,290,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,290,290,,,,290,,290,,290,18,18,18,18,18,18,18',
'18,18,18,,,,,18,,,18,18,18,,,18,18,18,18,,,,,,18,,18,,18,18,,18,,18',
'18,,,,,18,18,18,18,18,18,,,,,18,,,,132,132,132,132,132,132,132,132,132',
'132,,,,,132,,,132,132,132,,,132,132,132,18,18,,,,18,132,18,132,18,132',
'132,,132,,132,132,289,,289,,132,132,132,132,161,161,161,161,161,161',
'161,161,161,161,,,,,,,,,,,289,289,,161,161,289,,,,289,,,,,,132,132,',
'161,289,132,161,132,,132,289,289,289,289,289,289,289,289,289,289,289',
'289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289,289',
'289,289,289,289,289,289,185,,185,,,,,289,,,,161,,161,,161,,,,,,,,,,',
',,185,185,,,,185,,,,185,,,,,,,,,,185,,,,,,185,185,185,185,185,185,185',
'185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185',
'185,185,185,185,185,185,185,185,185,185,78,,78,,,,,185,,,,,,,,,,,,,',
',,,,,,,78,78,,,,78,,,,78,,,,,,,,,,78,,,,,,78,78,78,78,78,78,78,78,78',
'78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78',
'78,78,89,,89,,,,,,,,,,,,,,,,,,,,,,,,,,89,89,,,,89,,,,89,,,,,,,,89,,89',
',,,,,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89',
'89,89,89,89,89,89,89,89,89,89,89,89,89,218,,218,,,,,,,,,,,,,,,,,,,,',
',,,,,218,218,,,,218,,,,218,,,,,,,,,,218,,,,,,218,218,218,218,218,218',
'218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218,218',
'218,218,218,218,218,218,218,218,218,218,218,256,,256,,,,,,,,,,,,,,,',
',,,,,,,,,,256,256,,,,256,,,,256,,,,,,,,,,256,,,,,,256,256,256,256,256',
'256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256,256',
'256,256,256,256,256,256,256,256,256,256,256,256,211,,211,,,,,,,,,,,',
',,,,,,,,,,,,,,211,211,,,,211,,,,211,,,,,,,,,,211,,,,,,211,211,211,211',
'211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211,211',
'211,211,211,211,211,211,211,211,211,211,211,211,211,259,,259,,,,,,,',
',,,,,,,,,,,,,,,,,,259,259,,,,259,,,,259,,,,,,,,,,259,,,,,,259,259,259',
'259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259',
'259,259,259,259,259,259,259,259,259,259,259,259,259,259,267,,267,,,',
',,,,,,,,,,,,,,,,,,,,,,267,267,,,,267,,,,267,,,,,,,,,,267,,,,,,267,267',
'267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267',
'267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,268,,268',
',,,,,,,,,,,,,,,,,,,,,,,,,268,268,,,,268,,,,268,,,,,,,,,,268,,,,,,268',
'268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268',
'268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,210',
',210,,,,,,,,,,,,,,,,,,,,,,,,,,210,210,,,,210,,,,210,,,,,,,,,,210,,,',
',,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210',
'210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210,210',
'43,,43,,,,,,,,,,,,,,,,,,,,,,,,,,43,43,,,,43,,,,43,,,,,,,,,,43,,,,,,43',
'43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43',
'43,43,43,43,43,43,43,43,43,43,287,,287,,,,,,,,,,,,,,,,,,,,,,,,,,287',
'287,,,,287,,,,287,,,,,,,,,,287,,,,,,287,287,287,287,287,287,287,287',
'287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287',
'287,287,287,287,287,287,287,287,287,288,,288,,,,,,,,,,,,,,,,,,,,,,,',
',,288,288,,,,288,,,,288,,,,,,,,,,288,,,,,,288,288,288,288,288,288,288',
'288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288,288',
'288,288,288,288,288,288,288,288,288,288,199,,199,,,,,,,,,,,,,,,,,,,',
',,,,,,199,199,,,,199,,,,199,,,,,,,,,,199,,,,,,199,199,199,199,199,199',
'199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199',
'199,199,199,199,199,199,199,199,199,199,199,181,,181,,,,,,,,,,,,,,,',
',,,,,,,,,,181,181,,,,181,,,,181,,,,,,,,,,181,,,,,,181,181,181,181,181',
'181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181',
'181,181,181,181,181,181,181,181,181,181,181,181,178,,178,,,,,,,,,,,',
',,,,,,,,,,,,,,178,178,,,,178,,,,178,,,,,,,,,,178,,,,,,178,178,178,178',
'178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178',
'178,178,178,178,178,178,178,178,178,178,178,178,178,168,,168,,,,,,,',
',,,,,,,,,,,,,,,,,,168,168,,,,168,,,,168,,,,,,,,168,,168,,,,,,168,168',
'168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168',
'168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,302,,302',
',,,,,,,,,,,,,,,,,,,,,,,,,302,302,,,,302,,,,302,,,,,,,,,,302,,,,,,302',
'302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,302',
'302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,302,166',
',166,,,,,,,,,,,,,,,,,,,,,,,,,,166,166,,,,166,,,,166,,,,,,,,166,,166',
',,,,,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166',
'166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166',
'166,312,,312,,,,,,,,,,,,,,,,,,,,,,,,,,312,312,,,,312,,,,312,,,,,,,,',
',312,,,,,,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312',
'312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312',
'312,312,102,102,,,,,,,,102,,,,,,,,,,102,,,,,,102,102,102,102,102,102',
'102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102',
'102,102,102,102,102,102,102,102,102,102,102,248,248,,,,,,,,248,,,,,',
',,,,248,,,,,,248,248,248,248,248,248,248,248,248,248,248,248,248,248',
'248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248',
'248,248,248,238,238,,,,,,,,238,,,,,,,,,,238,,,,,,238,238,238,238,238',
'238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238',
'238,238,238,238,238,238,238,238,238,105,105,,,,,,,,105,,,,,,,,,,105',
',,,,,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105',
'105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,205,205',
',,,,,,,205,,,,,,,,,,205,,,,,,205,205,205,205,205,205,205,205,205,205',
'205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205',
'205,205,205,205,241,241,,,,,,,,241,,,,,,,,,,241,,,,,,241,241,241,241',
'241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241,241',
'241,241,241,241,241,241,241,241,241,241,295,,,,,,,,295,,,,,,,,,,295',
',,,,,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,295',
'295,295,295,295,295,295,295,295,295,295,295,295,295,295,295,296,,,,',
',,,296,,,,,,,,,,296,,,,,,296,296,296,296,296,296,296,296,296,296,296',
'296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296,296',
'296,296,296,274,,,,,,,,274,,,,,,,,,,274,,,,,,274,274,274,274,274,274',
'274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274',
'274,274,274,274,274,274,274,274,275,,,,,,,,275,,,,,,,,,,275,,,,,,275',
'275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275',
'275,275,275,275,275,275,275,275,275,275,275,275,275,237,,,,,,,,237,',
',,,,,,,,237,,,,,,237,237,237,237,237,237,237,237,237,237,237,237,237',
'237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237',
'237,96,,,,,,,,,,96,,,,,,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96',
'96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,79,,,,,,,,,,79,,,,,,79',
'79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79',
'79,79,79,79,79,79,226,,,,,,,,,,226,,,,,,226,226,226,226,226,226,226',
'226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226',
'226,226,226,226,226,226,219,,,,,,219,219,219,219,219,219,219,219,219',
'219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219',
'219,219,219,219,222,,,,,,222,222,222,222,222,222,222,222,222,222,222',
'222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222,222',
'222,222,230,,,,,,230,230,230,230,230,230,230,230,230,230,230,230,230',
'230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230',
'215,,,,,,215,215,215,215,215,215,215,215,215,215,215,215,215,215,215',
'215,215,215,215,215,215,215,215,215,215,215,215,215,215,215,227,,,,',
',227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227,227',
'227,227,227,227,227,227,227,227,227,227,227,227,227' ]
        racc_action_check = arr = Array.new(10011, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  4990,   305,   190,   286,   nil,    72,   nil,   478,   218,   670,
   nil,   191,   nil,   nil,    -2,   958,   nil,  1054,  7142,   nil,
   nil,   nil,   237,   nil,   nil,   nil,   279,   nil,   nil,   nil,
  1438,   nil,   nil,   nil,   nil,   nil,    86,  1630,   nil,   nil,
   nil,    64,   316,  8204,   nil,   187,   165,    86,   nil,   nil,
  2302,   nil,   nil,  2398,   nil,   nil,   nil,  2494,   nil,   nil,
   nil,  2590,  2686,   nil,   nil,   nil,  2782,   nil,   nil,   nil,
  2878,   nil,  2974,     0,   nil,   -47,    67,  3358,  7421,  9700,
  3646,   nil,   nil,   114,   nil,   260,   309,  4030,   nil,  7508,
   nil,   272,   nil,   179,   217,   213,  9654,  4702,    15,   160,
    -2,   -36,  9046,     9,   173,  9220,  5566,   160,   nil,   nil,
    44,   -17,  5950,  6046,  6142,   nil,  6238,  6334,   nil,  6430,
  6526,  6622,  6718,  6814,  5374,  5854,  5758,  6910,  5278,    94,
  5086,  4606,  7202,  4318,  4222,  4126,  3934,  3742,  3454,  3166,
  2206,  2110,   293,   226,  1534,  1342,  1246,  1150,   862,   766,
   574,   382,  3838,   nil,   107,   315,   nil,   nil,   nil,  1918,
   nil,  7252,   nil,    -6,    87,   166,  8900,   323,  8726,   227,
   358,    22,   -39,   -67,   nil,  5662,  5470,   nil,  8639,   142,
   175,  8552,   nil,   nil,   nil,  7334,   nil,   146,   138,   113,
   nil,  4894,  4798,    72,   nil,   215,   187,   236,   nil,  8465,
   nil,   287,  4510,  4414,   -11,  9276,   390,  1446,   295,  1462,
  8117,  7769,   678,  1254,   -10,  9890,  1062,   279,  7595,  9782,
  1350,   113,  9818,   nil,  1158,  1558,  9746,  9926,   966,  1369,
  9854,   870,  1177,   225,   164,   774,  1081,  9607,  9164,   582,
  1273,  9332,   486,  1542,   nil,   nil,   nil,   nil,  9105,   171,
    75,   nil,   -20,   nil,   106,    46,  7682,  3550,  3262,  7856,
  3070,    21,   nil,   nil,   nil,   nil,   298,  7943,  8030,   nil,
    94,   nil,   104,   nil,  9497,  9552,  2014,  1822,   nil,    92,
   nil,   213,   155,   nil,  1726,   nil,   nil,  8291,  8378,  7247,
  7047,   nil,   nil,   nil,   nil,  9387,  9442,   nil,   256,   nil,
   -21,   -46,  8813,   nil,  6955,   272,   nil,   118,  5182,   nil,
   nil,   nil,  8987 ]

racc_action_default = [
    -1,  -181,  -136,  -181,   -15,  -124,   -16,  -181,  -118,  -181,
   -17,  -181,   -18,  -126,  -181,  -181,   -19,  -181,   -46,   -34,
   -20,   -28,  -181,   -21,   -29,   -31,  -181,   -47,   -22,   -35,
  -181,    -2,   -30,   -23,   -36,   -32,    -3,  -181,  -104,   -37,
   -33,  -181,  -181,    -5,   -38,  -174,    -8,  -181,   -39,    -9,
  -181,   -40,   -10,  -181,  -105,  -103,   -96,  -181,  -106,   -97,
   -11,  -181,  -181,  -107,   -26,   -12,  -181,  -108,   -27,   -13,
  -181,   -14,  -181,  -181,   -98,  -100,  -181,  -181,  -137,   -55,
  -136,  -110,  -114,  -181,  -129,  -181,  -181,  -181,  -115,  -181,
   -44,  -118,  -119,  -181,  -181,  -181,   -56,  -136,  -125,  -181,
  -181,   -50,   -45,  -181,  -181,  -150,    -7,  -181,   -25,    -4,
  -157,  -181,  -181,  -181,  -181,   -58,  -181,  -181,   -57,  -181,
  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,
  -181,  -181,   -93,  -181,  -181,  -181,  -181,  -181,  -181,  -181,
  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,  -181,
  -181,  -181,  -181,  -172,  -181,  -174,  -176,  -178,  -109,  -181,
  -128,  -181,   -95,   -51,   -48,   -49,  -153,   -52,  -181,   -54,
   -53,  -181,  -181,  -181,  -143,  -181,  -181,  -135,  -138,  -181,
  -181,  -137,  -111,  -112,  -113,  -181,  -170,  -181,  -181,  -181,
  -117,  -181,  -181,  -181,  -151,  -181,  -181,  -146,   313,    -6,
   -24,  -181,  -181,  -181,  -181,   -90,   -79,   -68,   -80,   -69,
  -179,  -154,   -81,   -70,   -59,   -83,   -71,   -60,  -180,   -84,
   -72,   -61,   -85,   -82,   -73,   -62,   -91,   -86,   -74,   -63,
   -87,   -75,   -64,  -181,  -181,   -76,   -65,   -92,   -88,   -77,
   -66,   -89,   -78,   -67,  -171,  -175,  -173,  -177,   -41,  -181,
  -127,  -152,  -181,   -99,  -181,  -181,  -140,  -181,  -181,  -139,
  -181,  -130,  -116,  -123,  -121,  -120,  -181,   -42,   -43,  -132,
  -181,  -147,  -181,  -158,  -159,  -160,  -181,  -181,  -156,  -155,
  -102,  -181,  -181,  -165,  -181,   -94,  -101,  -141,  -142,  -181,
  -102,  -131,  -122,  -149,  -148,  -162,  -161,  -166,  -181,  -163,
  -181,  -181,  -144,  -133,  -181,  -181,  -169,  -167,  -181,  -134,
  -164,  -168,  -145 ]

racc_goto_table = [
    31,    88,    41,    90,    78,    79,   111,   160,   158,    89,
    74,    96,    99,    98,    76,    93,    36,   100,   283,   101,
   102,    26,   204,   301,   103,   264,   265,   197,   281,   254,
   244,    73,   105,   155,   291,   156,   106,   157,   nil,   nil,
   nil,   109,    88,   nil,   nil,   153,   nil,   297,   nil,   162,
   nil,   nil,   163,   107,   nil,   164,   nil,   nil,   nil,   165,
   160,   158,   nil,   166,   167,   nil,   306,   nil,   168,   nil,
   nil,   nil,   169,   nil,   170,   nil,   nil,   nil,   nil,   178,
   nil,   nil,   181,   nil,   nil,   nil,    90,   nil,   nil,   185,
   nil,   186,   180,   188,    88,    88,   nil,   nil,   187,   181,
   nil,   nil,   nil,   292,   nil,   nil,   233,   106,   199,   193,
   nil,   nil,   nil,   nil,   205,   206,   207,   nil,   208,   209,
   nil,   210,   211,   212,   213,   214,   215,   216,   217,   218,
   219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
   229,   230,   231,   232,   279,   247,   235,   236,   237,   238,
   239,   240,   241,   242,   243,   246,   245,   nil,   nil,   250,
   249,   248,   nil,   nil,   nil,   nil,   nil,   nil,   251,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   257,   256,   259,   nil,
   253,   nil,   nil,    90,    90,   nil,   nil,   188,   nil,   266,
   nil,   nil,   nil,   267,   268,   nil,   nil,   nil,   271,   nil,
   nil,   nil,   nil,   nil,   274,   275,   278,   nil,   nil,   nil,
   nil,   160,   158,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    88,    88,   282,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   285,   nil,   nil,   287,
   288,    90,   289,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   293,   nil,   294,   nil,   282,   nil,   295,   296,
   nil,   nil,   300,   nil,   nil,   nil,   302,   nil,   nil,   nil,
   nil,   nil,   304,   nil,   nil,   282,   nil,   nil,   nil,   nil,
   305,   nil,   nil,   307,   nil,   nil,   nil,   311,   nil,   nil,
   312 ]

racc_goto_check = [
     2,    30,     4,    21,     5,     5,    40,    36,    31,     5,
    26,     5,     6,    32,    37,    34,     3,     5,    43,     5,
     5,     1,    41,    38,     4,    23,    23,    39,    42,    25,
    44,    24,     5,    46,     8,    47,     2,    48,   nil,   nil,
   nil,     2,    30,   nil,   nil,    45,   nil,    43,   nil,     4,
   nil,   nil,     5,     3,   nil,     5,   nil,   nil,   nil,     5,
    36,    31,   nil,     5,     5,   nil,    43,   nil,     5,   nil,
   nil,   nil,     5,   nil,     5,   nil,   nil,   nil,   nil,     5,
   nil,   nil,     5,   nil,   nil,   nil,    21,   nil,   nil,     5,
   nil,     4,    37,     2,    30,    30,   nil,   nil,    34,     5,
   nil,   nil,   nil,    23,   nil,   nil,    40,     2,     5,    37,
   nil,   nil,   nil,   nil,     5,     5,     5,   nil,     5,     5,
   nil,     5,     5,     5,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,    41,    47,     5,     5,     5,     5,
     5,     5,     5,     5,     5,    45,     4,   nil,   nil,     6,
    32,     5,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,     5,     5,   nil,
    26,   nil,   nil,    21,    21,   nil,   nil,     2,   nil,     2,
   nil,   nil,   nil,     5,     5,   nil,   nil,   nil,     4,   nil,
   nil,   nil,   nil,   nil,     5,     5,     4,   nil,   nil,   nil,
   nil,    36,    31,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    30,    30,    21,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,     5,
     5,    21,     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     4,   nil,     4,   nil,    21,   nil,     5,     5,
   nil,   nil,     2,   nil,   nil,   nil,     5,   nil,   nil,   nil,
   nil,   nil,     5,   nil,   nil,    21,   nil,   nil,   nil,   nil,
     4,   nil,   nil,     4,   nil,   nil,   nil,     2,   nil,   nil,
     5 ]

racc_goto_pointer = [
   nil,    21,     0,    16,     2,     2,    -2,   nil,  -227,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    -5,   nil,  -163,    30,  -143,     9,   nil,   nil,   nil,
    -4,   -38,    -1,   nil,     7,   nil,   -39,    12,  -261,   -76,
   -36,   -89,  -224,  -234,  -124,     0,   -12,   -10,    -8 ]

racc_goto_default = [
   nil,   nil,   175,   nil,   nil,    43,    46,    49,    52,    60,
    65,    69,    71,     4,     6,    10,    12,    16,    20,    23,
    28,    33,    38,    92,   nil,    47,   nil,    54,    58,    63,
    67,    81,     5,    82,   nil,    13,    84,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    45,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 102, :_reduce_1,
  1, 102, :_reduce_2,
  1, 102, :_reduce_3,
  2, 102, :_reduce_4,
  1, 104, :_reduce_5,
  3, 104, :_reduce_6,
  2, 104, :_reduce_7,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  1, 106, :_reduce_none,
  3, 105, :_reduce_24,
  2, 105, :_reduce_25,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  1, 123, :_reduce_28,
  1, 123, :_reduce_29,
  1, 123, :_reduce_30,
  1, 123, :_reduce_31,
  1, 123, :_reduce_32,
  1, 123, :_reduce_33,
  1, 123, :_reduce_34,
  1, 123, :_reduce_35,
  1, 123, :_reduce_36,
  1, 123, :_reduce_37,
  1, 123, :_reduce_38,
  1, 123, :_reduce_39,
  1, 123, :_reduce_40,
  3, 111, :_reduce_41,
  3, 124, :_reduce_42,
  3, 124, :_reduce_43,
  1, 124, :_reduce_44,
  2, 115, :_reduce_45,
  1, 115, :_reduce_46,
  1, 122, :_reduce_47,
  2, 110, :_reduce_48,
  2, 110, :_reduce_49,
  2, 110, :_reduce_50,
  2, 110, :_reduce_51,
  2, 110, :_reduce_52,
  2, 110, :_reduce_53,
  2, 110, :_reduce_54,
  2, 110, :_reduce_55,
  2, 110, :_reduce_56,
  2, 110, :_reduce_57,
  2, 110, :_reduce_58,
  3, 110, :_reduce_59,
  3, 110, :_reduce_60,
  3, 110, :_reduce_61,
  3, 110, :_reduce_62,
  3, 110, :_reduce_63,
  3, 110, :_reduce_64,
  3, 110, :_reduce_65,
  3, 110, :_reduce_66,
  3, 110, :_reduce_67,
  3, 110, :_reduce_68,
  3, 110, :_reduce_69,
  3, 110, :_reduce_70,
  3, 110, :_reduce_71,
  3, 110, :_reduce_72,
  3, 110, :_reduce_73,
  3, 110, :_reduce_74,
  3, 110, :_reduce_75,
  3, 110, :_reduce_76,
  3, 110, :_reduce_77,
  3, 110, :_reduce_78,
  3, 110, :_reduce_79,
  3, 110, :_reduce_80,
  3, 110, :_reduce_81,
  3, 110, :_reduce_82,
  3, 110, :_reduce_83,
  3, 110, :_reduce_84,
  3, 110, :_reduce_85,
  3, 110, :_reduce_86,
  3, 110, :_reduce_87,
  3, 110, :_reduce_88,
  3, 110, :_reduce_89,
  3, 110, :_reduce_90,
  3, 110, :_reduce_91,
  3, 110, :_reduce_92,
  2, 121, :_reduce_93,
  5, 109, :_reduce_94,
  2, 109, :_reduce_95,
  1, 126, :_reduce_96,
  1, 126, :_reduce_97,
  1, 125, :_reduce_98,
  3, 125, :_reduce_99,
  1, 127, :_reduce_none,
  4, 127, :_reduce_101,
  4, 120, :_reduce_102,
  1, 107, :_reduce_103,
  1, 107, :_reduce_104,
  1, 107, :_reduce_105,
  1, 107, :_reduce_106,
  1, 107, :_reduce_107,
  1, 107, :_reduce_108,
  2, 107, :_reduce_109,
  2, 107, :_reduce_110,
  2, 132, :_reduce_111,
  2, 132, :_reduce_112,
  2, 132, :_reduce_113,
  1, 132, :_reduce_114,
  1, 132, :_reduce_115,
  3, 134, :_reduce_116,
  3, 129, :_reduce_117,
  0, 135, :_reduce_118,
  1, 135, :_reduce_119,
  3, 135, :_reduce_120,
  3, 135, :_reduce_121,
  4, 135, :_reduce_122,
  3, 135, :_reduce_123,
  1, 108, :_reduce_124,
  2, 108, :_reduce_125,
  1, 108, :_reduce_126,
  3, 119, :_reduce_127,
  2, 133, :_reduce_128,
  2, 133, :_reduce_129,
  3, 137, :_reduce_130,
  4, 137, :_reduce_131,
  4, 136, :_reduce_132,
  6, 131, :_reduce_133,
  7, 131, :_reduce_134,
  3, 128, :_reduce_135,
  0, 138, :_reduce_136,
  1, 138, :_reduce_137,
  2, 138, :_reduce_138,
  3, 138, :_reduce_139,
  3, 138, :_reduce_140,
  4, 138, :_reduce_141,
  4, 138, :_reduce_142,
  2, 138, :_reduce_143,
  1, 139, :_reduce_144,
  3, 139, :_reduce_145,
  3, 113, :_reduce_146,
  4, 113, :_reduce_147,
  5, 113, :_reduce_148,
  3, 140, :_reduce_149,
  2, 114, :_reduce_150,
  3, 130, :_reduce_151,
  3, 116, :_reduce_152,
  2, 116, :_reduce_153,
  3, 116, :_reduce_154,
  4, 117, :_reduce_155,
  4, 117, :_reduce_156,
  1, 141, :_reduce_157,
  3, 141, :_reduce_158,
  2, 142, :_reduce_159,
  2, 142, :_reduce_160,
  3, 142, :_reduce_161,
  3, 142, :_reduce_162,
  5, 118, :_reduce_163,
  7, 118, :_reduce_164,
  1, 143, :_reduce_165,
  2, 143, :_reduce_166,
  3, 144, :_reduce_167,
  4, 144, :_reduce_168,
  3, 144, :_reduce_169,
  3, 145, :_reduce_170,
  2, 146, :_reduce_171,
  1, 147, :_reduce_172,
  2, 147, :_reduce_173,
  0, 148, :_reduce_174,
  2, 148, :_reduce_175,
  1, 149, :_reduce_176,
  2, 149, :_reduce_177,
  2, 112, :_reduce_178,
  3, 112, :_reduce_179,
  3, 112, :_reduce_180 ]

racc_reduce_n = 181

racc_shift_n = 313

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :UNLESS => 4,
  :NUMBER => 5,
  :STRING => 6,
  :REGEX => 7,
  :TRUE => 8,
  :FALSE => 9,
  :YES => 10,
  :NO => 11,
  :ON => 12,
  :OFF => 13,
  :IDENTIFIER => 14,
  :PROPERTY_ACCESS => 15,
  :PROTOTYPE_ACCESS => 16,
  :SOAK_ACCESS => 17,
  :CODE => 18,
  :PARAM_START => 19,
  :PARAM => 20,
  :PARAM_END => 21,
  :NEW => 22,
  :RETURN => 23,
  :TRY => 24,
  :CATCH => 25,
  :FINALLY => 26,
  :THROW => 27,
  :BREAK => 28,
  :CONTINUE => 29,
  :FOR => 30,
  :IN => 31,
  :OF => 32,
  :BY => 33,
  :WHEN => 34,
  :WHILE => 35,
  :SWITCH => 36,
  :LEADING_WHEN => 37,
  :DELETE => 38,
  :INSTANCEOF => 39,
  :TYPEOF => 40,
  :SUPER => 41,
  :EXTENDS => 42,
  :ARGUMENTS => 43,
  :NEWLINE => 44,
  :COMMENT => 45,
  :JS => 46,
  :INDENT => 47,
  :OUTDENT => 48,
  "?" => 49,
  :UMINUS => 50,
  :NOT => 51,
  "!" => 52,
  "!!" => 53,
  "~" => 54,
  "++" => 55,
  "--" => 56,
  "*" => 57,
  "/" => 58,
  "%" => 59,
  "+" => 60,
  "-" => 61,
  "<<" => 62,
  ">>" => 63,
  ">>>" => 64,
  "&" => 65,
  "|" => 66,
  "^" => 67,
  "<=" => 68,
  "<" => 69,
  ">" => 70,
  ">=" => 71,
  "==" => 72,
  "!=" => 73,
  :IS => 74,
  :ISNT => 75,
  "&&" => 76,
  "||" => 77,
  :AND => 78,
  :OR => 79,
  "-=" => 80,
  "+=" => 81,
  "/=" => 82,
  "*=" => 83,
  "%=" => 84,
  "." => 85,
  "||=" => 86,
  "&&=" => 87,
  "?=" => 88,
  :ASSIGN => 89,
  "->" => 90,
  "=>" => 91,
  "\n" => 92,
  ";" => 93,
  "," => 94,
  "[" => 95,
  "]" => 96,
  "{" => 97,
  "}" => 98,
  "(" => 99,
  ")" => 100 }

racc_nt_base = 101

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "UNLESS",
  "NUMBER",
  "STRING",
  "REGEX",
  "TRUE",
  "FALSE",
  "YES",
  "NO",
  "ON",
  "OFF",
  "IDENTIFIER",
  "PROPERTY_ACCESS",
  "PROTOTYPE_ACCESS",
  "SOAK_ACCESS",
  "CODE",
  "PARAM_START",
  "PARAM",
  "PARAM_END",
  "NEW",
  "RETURN",
  "TRY",
  "CATCH",
  "FINALLY",
  "THROW",
  "BREAK",
  "CONTINUE",
  "FOR",
  "IN",
  "OF",
  "BY",
  "WHEN",
  "WHILE",
  "SWITCH",
  "LEADING_WHEN",
  "DELETE",
  "INSTANCEOF",
  "TYPEOF",
  "SUPER",
  "EXTENDS",
  "ARGUMENTS",
  "NEWLINE",
  "COMMENT",
  "JS",
  "INDENT",
  "OUTDENT",
  "\"?\"",
  "UMINUS",
  "NOT",
  "\"!\"",
  "\"!!\"",
  "\"~\"",
  "\"++\"",
  "\"--\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\">>>\"",
  "\"&\"",
  "\"|\"",
  "\"^\"",
  "\"<=\"",
  "\"<\"",
  "\">\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "IS",
  "ISNT",
  "\"&&\"",
  "\"||\"",
  "AND",
  "OR",
  "\"-=\"",
  "\"+=\"",
  "\"/=\"",
  "\"*=\"",
  "\"%=\"",
  "\".\"",
  "\"||=\"",
  "\"&&=\"",
  "\"?=\"",
  "ASSIGN",
  "\"->\"",
  "\"=>\"",
  "\"\\n\"",
  "\";\"",
  "\",\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Root",
  "Terminator",
  "Expressions",
  "Block",
  "Expression",
  "Value",
  "Call",
  "Code",
  "Operation",
  "Assign",
  "If",
  "Try",
  "Throw",
  "Return",
  "While",
  "For",
  "Switch",
  "Extends",
  "Splat",
  "Existence",
  "Comment",
  "Literal",
  "AssignObj",
  "ParamList",
  "FuncGlyph",
  "Param",
  "Array",
  "Object",
  "Parenthetical",
  "Range",
  "Accessor",
  "Invocation",
  "Index",
  "AssignList",
  "Super",
  "Arguments",
  "ArgList",
  "SimpleArgs",
  "Catch",
  "ForVariables",
  "ForSource",
  "Whens",
  "When",
  "IfBlock",
  "ElsIf",
  "ElsIfs",
  "ElseBody",
  "IfEnd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_1(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_2(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 50)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 51)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_5(val, _values, result)
     result = Expressions.wrap(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_6(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 58)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_24(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 86)
  def _reduce_25(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_28(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_29(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_30(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_31(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_32(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_33(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_34(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_35(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_36(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_37(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_38(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_39(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_40(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_41(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_42(val, _values, result)
     result = AssignNode.new(ValueNode.new(val[0]), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_43(val, _values, result)
     result = AssignNode.new(ValueNode.new(LiteralNode.new(val[0])), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 121)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 126)
  def _reduce_45(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 127)
  def _reduce_46(val, _values, result)
     result = ReturnNode.new(ValueNode.new(Value.new('null'))) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_47(val, _values, result)
     result = CommentNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_48(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 140)
  def _reduce_49(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_50(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_51(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_52(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_53(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_54(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 146)
  def _reduce_55(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_56(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_57(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_58(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_59(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_60(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 153)
  def _reduce_61(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_62(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_63(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_64(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_65(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_66(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_67(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_68(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_69(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_70(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_71(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_72(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_73(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_74(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_75(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_76(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_77(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_78(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_79(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_80(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_81(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_82(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_83(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_84(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_85(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_86(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_87(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 187)
  def _reduce_88(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 188)
  def _reduce_89(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 189)
  def _reduce_90(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_91(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 192)
  def _reduce_92(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 197)
  def _reduce_93(val, _values, result)
     result = ExistenceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 203)
  def _reduce_94(val, _values, result)
     result = CodeNode.new(val[1], val[4], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 204)
  def _reduce_95(val, _values, result)
     result = CodeNode.new([], val[1], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 209)
  def _reduce_96(val, _values, result)
     result = :func 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 210)
  def _reduce_97(val, _values, result)
     result = :boundfunc 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 215)
  def _reduce_98(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 216)
  def _reduce_99(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

# reduce 100 omitted

module_eval(<<'.,.,', 'grammar.y', 222)
  def _reduce_101(val, _values, result)
     result = SplatNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 227)
  def _reduce_102(val, _values, result)
     result = SplatNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 232)
  def _reduce_103(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_104(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_105(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 235)
  def _reduce_106(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_107(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 237)
  def _reduce_108(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 238)
  def _reduce_109(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 239)
  def _reduce_110(val, _values, result)
     result = ValueNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_111(val, _values, result)
     result = AccessorNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_112(val, _values, result)
     result = AccessorNode.new(val[1], :prototype) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_113(val, _values, result)
     result = AccessorNode.new(val[1], :soak) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 247)
  def _reduce_114(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 248)
  def _reduce_115(val, _values, result)
     result = SliceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 253)
  def _reduce_116(val, _values, result)
     result = IndexNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 258)
  def _reduce_117(val, _values, result)
     result = ObjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_118(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 264)
  def _reduce_119(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 265)
  def _reduce_120(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 266)
  def _reduce_121(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 268)
  def _reduce_122(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 269)
  def _reduce_123(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 274)
  def _reduce_124(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 275)
  def _reduce_125(val, _values, result)
     result = val[1].new_instance 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 276)
  def _reduce_126(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 281)
  def _reduce_127(val, _values, result)
     result = ExtendsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 286)
  def _reduce_128(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 287)
  def _reduce_129(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 292)
  def _reduce_130(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_131(val, _values, result)
     result = val[1] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 298)
  def _reduce_132(val, _values, result)
     result = CallNode.new(Value.new('super'), val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 304)
  def _reduce_133(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_134(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 311)
  def _reduce_135(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_136(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 317)
  def _reduce_137(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 318)
  def _reduce_138(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 319)
  def _reduce_139(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 320)
  def _reduce_140(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 321)
  def _reduce_141(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 322)
  def _reduce_142(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 323)
  def _reduce_143(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 328)
  def _reduce_144(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 329)
  def _reduce_145(val, _values, result)
     result = ([val[0]] << val[2]).flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_146(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 335)
  def _reduce_147(val, _values, result)
     result = TryNode.new(val[1], nil, nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 337)
  def _reduce_148(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 342)
  def _reduce_149(val, _values, result)
     result = [val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 347)
  def _reduce_150(val, _values, result)
     result = ThrowNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 352)
  def _reduce_151(val, _values, result)
     result = ParentheticalNode.new(val[1], val[0].line) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 357)
  def _reduce_152(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 358)
  def _reduce_153(val, _values, result)
     result = WhileNode.new(val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 359)
  def _reduce_154(val, _values, result)
     result = WhileNode.new(val[2], Expressions.wrap(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 366)
  def _reduce_155(val, _values, result)
     result = ForNode.new(val[0], val[3], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 367)
  def _reduce_156(val, _values, result)
     result = ForNode.new(val[3], val[2], val[1][0], val[1][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 372)
  def _reduce_157(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 373)
  def _reduce_158(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 378)
  def _reduce_159(val, _values, result)
     result = {:source => val[1]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 379)
  def _reduce_160(val, _values, result)
     result = {:source => val[1], :object => true} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 381)
  def _reduce_161(val, _values, result)
     result = val[0].merge(:filter => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 383)
  def _reduce_162(val, _values, result)
     result = val[0].merge(:step => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 389)
  def _reduce_163(val, _values, result)
     result = val[3].rewrite_condition(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 391)
  def _reduce_164(val, _values, result)
     result = val[3].rewrite_condition(val[1]).add_else(val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 396)
  def _reduce_165(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 397)
  def _reduce_166(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 402)
  def _reduce_167(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 404)
  def _reduce_168(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 405)
  def _reduce_169(val, _values, result)
     result = val[2].add_comment(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 410)
  def _reduce_170(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 415)
  def _reduce_171(val, _values, result)
     result = val[1].force_statement 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 420)
  def _reduce_172(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 421)
  def _reduce_173(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 426)
  def _reduce_174(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 427)
  def _reduce_175(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 432)
  def _reduce_176(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 433)
  def _reduce_177(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 438)
  def _reduce_178(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 439)
  def _reduce_179(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 440)
  def _reduce_180(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true, :invert => true}) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
