#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

module CoffeeScript

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 420)
  # Lex and parse a CoffeeScript.
  def parse(code)
    # Uncomment the following line to enable grammar debugging, in combination
    # with the -g flag in the Rake build task.
    # @yydebug = true
    @tokens = Lexer.new.tokenize(code)
    do_parse
  end

  # Retrieve the next token from the list.
  def next_token
    @tokens.shift
  end

  # Raise a custom error class that knows about line numbers.
  def on_error(error_token_id, error_value, value_stack)
    raise ParseError.new(token_to_str(error_token_id), error_value, value_stack)
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'94,229,102,17,21,24,29,32,37,45,50,54,58,156,135,65,69,134,231,87,230',
'154,137,22,25,105,114,117,120,123,90,93,98,95,250,38,42,65,69,13,80',
'10,87,126,38,42,226,10,227,114,117,120,123,90,93,98,101,104,107,110',
'113,116,119,122,89,92,97,100,103,106,109,112,115,118,121,88,91,96,99',
'126,126,108,111,33,80,126,166,72,126,61,7,66,236,17,21,24,29,32,37,45',
'50,54,58,264,126,65,69,1,4,8,7,129,18,22,25,28,238,125,80,46,51,128',
'62,82,67,70,156,241,10,13,245,247,168,170,154,35,40,44,48,53,57,59,126',
'80,87,3,38,42,232,239,80,-166,-166,125,125,131,80,128,128,125,10,87',
'125,128,38,42,128,156,114,117,38,42,163,33,254,154,221,55,125,61,7,66',
'128,17,21,24,29,32,37,45,50,54,58,229,220,65,69,1,4,8,80,10,18,22,25',
'28,38,42,229,46,51,249,62,164,67,70,125,272,10,13,128,245,247,80,156',
'35,40,44,48,53,57,59,154,87,80,3,38,42,226,77,114,117,87,213,244,82',
'220,250,87,114,117,38,42,226,10,-166,-166,274,10,265,158,285,137,33',
',,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,156,,18',
'22,25,28,,,154,46,51,,62,87,67,70,,,10,13,114,117,120,123,90,35,40,44',
'48,53,57,59,87,,10,3,158,,,114,117,120,123,90,93,98,101,104,107,110',
'113,116,119,122,89,92,97,100,103,106,38,42,232,33,,,233,55,,61,7,66',
',17,21,24,29,32,37,45,50,54,58,87,,65,69,1,4,8,-166,-166,18,22,25,28',
',,,46,51,,62,87,67,70,,,10,13,114,117,120,123,90,35,40,44,48,53,57,59',
'87,,,3,,,,114,117,120,123,90,93,98,101,104,107,110,113,116,119,122,89',
'92,97,100,103,106,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58',
'87,,65,69,1,4,8,-166,-166,18,22,25,28,,,,46,51,,62,87,67,70,87,,10,13',
'-166,-166,,-166,-166,35,40,44,48,53,57,59,87,,,3,,,,114,117,120,123',
'90,93,98,101,104,107,110,113,116,119,122,89,92,97,100,103,106,,,,33',
',,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,87,,65,69,1,4,8,-166,-166',
'18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,87',
',,3,,,,114,117,120,123,90,93,98,101,104,107,110,113,116,119,122,89,92',
'97,100,103,106,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,',
',65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44',
'48,53,57,59,87,,,3,,,,114,117,120,123,90,93,98,101,104,107,110,113,116',
'119,122,89,92,97,100,103,106,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37',
'45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13',
',,,,,35,40,44,48,53,57,59,87,,,3,,,,114,117,120,123,90,93,98,101,104',
'107,110,113,116,119,122,89,92,97,100,103,106,,,,33,,,,55,,61,7,66,,17',
'21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62',
',67,70,,,10,13,,,,,,35,40,44,48,53,57,59,87,,,3,,,,114,117,120,123,90',
'93,98,101,104,107,110,113,116,,,,,,,,276,,,,33,,,,55,,61,7,66,,17,21',
'24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67',
'70,,,10,13,,,,,,35,40,44,48,53,57,59,87,,,3,,,,114,117,120,123,90,93',
'98,101,104,107,110,113,116,119,122,89,92,97,100,103,106,,,,33,,,,55',
',61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28',
',,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,87,,,3,,,,114',
'117,120,123,90,93,98,101,104,107,110,113,116,119,122,89,92,97,100,103',
'106,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4',
'8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59',
'87,,,3,,,,114,117,120,123,90,93,98,101,104,107,110,113,116,,,,,,,,,',
',,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18',
'22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,87,,',
'3,,,,114,117,120,123,90,93,98,101,104,107,110,113,116,,,,,,,,,,,,33',
',,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22',
'25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,87,,,3,',
',,114,117,120,123,90,93,98,101,104,107,110,113,116,,,,,,,,,,,,33,,,',
'55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25',
'28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,87,,,3,,,,114',
'117,120,123,90,93,98,101,104,107,87,,,,,,,114,117,120,123,90,93,98,33',
',,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22',
'25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,87,,,3,',
',,114,117,120,123,90,93,98,101,104,107,87,,,,,,,114,117,120,123,90,93',
'98,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,',
'18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,87',
',,3,,,,114,117,120,123,90,93,98,101,104,107,,,,,,,,,,,,,,,33,,,,55,',
'61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,',
',,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,',
',,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,',
'65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44',
'48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21',
'24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67',
'70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,',
',33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18',
'22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3',
',,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50',
'54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35',
'40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66',
',17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51',
',62,,67,70,,,10,13,148,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,',
',,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69',
'1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53',
'57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29',
'32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,',
'10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,',
',,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25',
'28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,',
',,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58',
',,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44',
'48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21',
'24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67',
'70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,',
',33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18',
'22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3',
',,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50',
'54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,256,,',
',,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,38,42,,55',
',61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28',
',,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,',
',,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,',
',65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,148,,,,,35,40',
'44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17',
'21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62',
',67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,',
',,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8',
',,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,148,,,,,35,40,44,48,53,57',
'59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32',
'37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10',
'13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,38,42',
',55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25',
'28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,',
',,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58',
',,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44',
'48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21',
'24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67',
'70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,',
',33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18',
'22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3',
',,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50',
'54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,172,',
',,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61',
'7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46',
'51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,',
',,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69',
'1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,148,,,,,35,40,44,48',
'53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24',
'29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70',
',,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33',
',,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22',
'25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,',
',,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54',
'58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40',
'44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17',
'21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62',
',67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,',
',,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8',
',,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59',
',,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37',
'45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13',
',,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,',
'61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,',
',,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,',
',,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,',
'65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44',
'48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21',
'24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67',
'70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,',
',33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18',
'22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3',
',,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50',
'54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35',
'40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66',
',17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51',
',62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,',
',,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1',
'4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57',
'59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32',
'37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10',
'13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55',
',61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28',
',,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,',
',,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,',
',65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44',
'48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21',
'24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67',
'70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,',
',33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18',
'22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3',
',,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50',
'54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35',
'40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66',
',17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51',
',62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,',
',,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1',
'4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57',
'59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32',
'37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10',
'13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55',
',61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28',
',,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,',
',,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,',
',65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44',
'48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21',
'24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67',
'70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,',
',33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18',
'22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,,,,3',
',,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66,,17,21,24,29,32,37,45,50',
'54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51,,62,,67,70,,,10,13,,,,,,35',
'40,44,48,53,57,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,33,,,,55,,61,7,66',
',17,21,24,29,32,37,45,50,54,58,,,65,69,1,4,8,,,18,22,25,28,,,,46,51',
',62,,67,70,,,10,13,,,,,,35,40,44,48,53,57,59,94,,102,3,,,,17,21,24,29',
'32,37,45,50,54,58,,,,,,,,,105,,22,25,,,33,,95,,55,,61,,66,,,87,13,,',
',,,114,117,120,123,90,93,98,101,104,107,110,113,116,119,122,89,92,97',
'100,103,106,109,112,115,118,121,88,91,96,99,225,,108,111,94,,102,,,243',
',,72,,61,,66,,,,,,,,,,,,,105,,,,,,,,95,,,,,,,,,87,,,,,,,114,117,120',
'123,90,93,98,101,104,107,110,113,116,119,122,89,92,97,100,103,106,109',
'112,115,118,121,88,91,96,99,,,108,111,,,,,,282,17,21,24,29,32,37,45',
'50,54,58,,,,,,,,,,,22,25,,,,,,,,,,,,,,,13,,,,94,,102,,,,,,,,,,,,,,,',
',,,,,,,105,,,,,,,,95,,,,,,,,,87,,72,,61,,66,114,117,120,123,90,93,98',
'101,104,107,110,113,116,119,122,89,92,97,100,103,106,109,112,115,118',
'121,88,91,96,99,,,108,111,94,,102,,,286,,,,,,,,,,,,,,,,,,,,105,,,,,',
',,95,,,,,,,,,87,,,,,,,114,117,120,123,90,93,98,101,104,107,110,113,116',
'119,122,89,92,97,100,103,106,109,112,115,118,121,88,91,96,99,,,108,111',
'94,,102,,,,,,,,,,,,,,,,,,,,,,,105,,,,,,,,95,,,,,,,,,87,,,,,,,114,117',
'120,123,90,93,98,101,104,107,110,113,116,119,122,89,92,97,100,103,106',
'109,112,115,118,121,88,91,96,99,,,108,111,94,,102,,,,,,,,,,,,,,,,,,',
',,,,105,,,,,,,,95,,,,,,,,,87,,,,,,,114,117,120,123,90,93,98,101,104',
'107,110,113,116,119,122,89,92,97,100,103,106,109,112,115,118,121,88',
'91,96,99,,,108,111,94,,102,,,,,,,,,,,,,,,,,,,,,,,105,,,,,,,,95,,,,,',
',,,87,,,,,,,114,117,120,123,90,93,98,101,104,107,110,113,116,119,122',
'89,92,97,100,103,106,109,112,115,118,121,88,91,96,99,,,108,111,94,,102',
',,,,,,,,,,,,,,,,,,,,,,105,,,,,,,,95,,,,,,,,,87,,,,,,,114,117,120,123',
'90,93,98,101,104,107,110,113,116,119,122,89,92,97,100,103,106,109,112',
'115,118,121,88,91,96,99,,,108,111,94,,102,,,,,,,,,,,,,,,,,,,,,,,105',
',,,,,,,95,,,,,,,80,,87,,,,,,,114,117,120,123,90,93,98,101,104,107,110',
'113,116,119,122,89,92,97,100,103,106,109,112,115,118,121,88,91,96,99',
',,108,111,94,,102,,,,,,,,,,,,,,,,,,,,,,,105,,,,,,,,95,,,,,,,80,,87,',
',,,,,114,117,120,123,90,93,98,101,104,107,110,113,116,119,122,89,92',
'97,100,103,106,109,112,115,118,121,88,91,96,99,,,108,111,94,,102,,,',
',,,,,,,,,,,,,,,,,,,105,,,,,,,,95,,,,,,,,,87,,,,,,,114,117,120,123,90',
'93,98,101,104,107,110,113,116,119,122,89,92,97,100,103,106,109,112,115',
'118,121,88,91,96,99,,,108,111,94,,102,,,,,,,,,,,,,,,,,,,,,,,105,,,,',
',,,95,,,,,,,,,87,,,,,,,114,117,120,123,90,93,98,101,104,107,110,113',
'116,119,122,89,92,97,100,103,106,109,112,115,118,121,88,91,96,99,,,108',
'111,94,,102,,,,,,,,,,,,,,,,,,,,,,,105,,,,,,,,95,,,,,,,,,87,,,,,,,114',
'117,120,123,90,93,98,101,104,107,110,113,116,119,122,89,92,97,100,103',
'106,109,112,115,118,121,88,91,96,99,225,,108,111,94,,102,,,,,,,,,,,',
',,,,,,,,,,,105,,,,,,,,95,,,,,,,,,87,,,,,,,114,117,120,123,90,93,98,101',
'104,107,110,113,116,119,122,89,92,97,100,103,106,109,112,115,118,121',
'88,91,96,99,,,108,111,94,,102,,,,,,,,,,,,,,,,,,,,,,,105,,,,,,,,95,,',
',,,,,,87,,,,,,,114,117,120,123,90,93,98,101,104,107,110,113,116,119',
'122,89,92,97,100,103,106,109,112,115,118,121,88,91,96,99,,,108,111,94',
',102,,,,,,,,,,,,,,,,,,,,,,,105,,,,,,,,95,,,,,,,,,87,,,,,,,114,117,120',
'123,90,93,98,101,104,107,110,113,116,119,122,89,92,97,100,103,106,109',
'112,115,118,121,88,91,96,99,,,108,111,94,,102,,,,,,,,,,,,,,,,,,,,,,',
'105,,,,,,,,95,,,,,,,,,87,,,,,,,114,117,120,123,90,93,98,101,104,107',
'110,113,116,119,122,89,92,97,100,103,106,109,112,115,118,121,88,91,96',
'99,,,108,111,94,,102,,,,,,,,,,,,,,,,,,,,,,,105,,,,,,,,95,,,,,,,80,,87',
',,,,,,114,117,120,123,90,93,98,101,104,107,110,113,116,119,122,89,92',
'97,100,103,106,109,112,115,118,121,88,91,96,99,,,108,111,94,,102,,,',
',,,,,,,,,,,,,,,,,,,105,,,,,,,,95,,,,,,,,,87,,,,,,,114,117,120,123,90',
'93,98,101,104,107,110,113,116,119,122,89,92,97,100,103,106,109,112,115',
'118,121,88,91,96,99,,,108,111,94,,102,,,,,,,,,,,,,,,,,,,,,,,105,,,,',
',,,95,,,,,,,,,87,,,,,,,114,117,120,123,90,93,98,101,104,107,110,113',
'116,119,122,89,92,97,100,103,106,109,112,115,118,121,88,91,96,99,,,108',
'111,94,,102,,,,,,,,,,,,,,,,,,,,,,,105,,,,,,,,95,,,,,,,223,,87,,,,,,',
'114,117,120,123,90,93,98,101,104,107,110,113,116,119,122,89,92,97,100',
'103,106,109,112,115,118,121,88,91,96,99,105,,108,111,,,,,95,,,,,,,,',
'87,,,,,,,114,117,120,123,90,93,98,101,104,107,110,113,116,119,122,89',
'92,97,100,103,106,109,112,115,118,121,88,91,96,99,105,,,,,,,,95,,,,',
',,,,87,,,,,,,114,117,120,123,90,93,98,101,104,107,110,113,116,119,122',
'89,92,97,100,103,106,109,112,115,118,121,88,91,96,99,105,,,,,,,,95,',
',,,,,,,87,,,,,,,114,117,120,123,90,93,98,101,104,107,110,113,116,119',
'122,89,92,97,100,103,106,109,112,115,118,121,88,91,96,99,105,,,,,,,',
'95,,,,,,,,,87,,,,,,,114,117,120,123,90,93,98,101,104,107,110,113,116',
'119,122,89,92,97,100,103,106,109,112,115,118,121,88,91,96,99,95,,,,',
',,,,87,,,,,,,114,117,120,123,90,93,98,101,104,107,110,113,116,119,122',
'89,92,97,100,103,106,109,112,115,118,121,88,91,96,99,95,,,,,,,,,87,',
',,,,,114,117,120,123,90,93,98,101,104,107,110,113,116,119,122,89,92',
'97,100,103,106,109,112,115,118,121,88,91,96,99,95,,,,,,,,,87,,,,,,,114',
'117,120,123,90,93,98,101,104,107,110,113,116,119,122,89,92,97,100,103',
'106,109,112,115,118,121,88,91,96,99,95,,,,,,,,,87,,,,,,,114,117,120',
'123,90,93,98,101,104,107,110,113,116,119,122,89,92,97,100,103,106,109',
'112,115,118,121,88,91,96,99,95,,,,,,,,,87,,,,,,,114,117,120,123,90,93',
'98,101,104,107,110,113,116,119,122,89,92,97,100,103,106,109,112,115',
'118,121,88,91,96,99,95,,,,,,,,,87,,,,,,,114,117,120,123,90,93,98,101',
'104,107,110,113,116,119,122,89,92,97,100,103,106,109,112,115,118,121',
'88,91,96,99,87,,,,,,,114,117,120,123,90,93,98,101,104,107,110,113,116',
'119,122,89,92,97,100,103,106,109,112,115,118,121,88,91,96,99,87,,,,',
',,114,117,120,123,90,93,98,101,104,107,110,113,116,119,122,89,92,97',
'100,103,106,109,112,115,118,121,88,91,96,99,87,,,,,,,114,117,120,123',
'90,93,98,101,104,107,110,113,116,119,122,89,92,97,100,103,106,109,112',
'115,118,121,88,91,96,99,87,,,,,,,114,117,120,123,90,93,98,101,104,107',
'110,113,116,119,122,89,92,97,100,103,106,109,112,115,118,121,88,91,96',
'99,87,,,,,,,114,117,120,123,90,93,98,101,104,107,110,113,116,119,122',
'89,92,97,100,103,106,109,112,115,118,121,88,91,96,99' ]
        racc_action_table = arr = Array.new(8814, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'161,150,161,129,129,129,129,129,129,129,129,129,129,261,20,244,244,20',
'156,197,154,261,28,129,129,161,197,197,197,197,197,197,197,161,223,12',
'12,134,134,129,238,223,161,152,150,150,150,261,150,161,161,161,161,161',
'161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161',
'161,161,161,161,161,161,161,161,73,74,161,161,244,239,153,77,129,19',
'129,96,129,161,96,96,96,96,96,96,96,96,96,96,235,215,96,96,96,96,96',
'82,19,96,96,96,96,168,152,33,96,96,152,96,14,96,96,232,171,96,96,219',
'219,79,79,232,96,96,96,96,96,96,96,49,219,151,96,235,235,235,169,82',
'151,151,73,74,19,170,73,74,153,232,180,19,153,280,280,19,234,180,180',
'171,171,69,96,225,234,137,96,215,96,3,96,215,3,3,3,3,3,3,3,3,3,3,214',
'136,3,3,3,3,3,135,234,3,3,3,3,232,232,237,3,3,221,3,70,3,3,49,251,3',
'3,49,242,242,272,158,3,3,3,3,3,3,3,158,208,8,3,214,214,214,5,208,208',
'211,126,214,84,195,251,75,211,211,237,237,237,251,75,75,251,158,237',
'158,281,105,3,,,,3,,3,4,3,,4,4,4,4,4,4,4,4,4,4,,,4,4,4,4,4,61,,4,4,4',
'4,,,61,4,4,,4,188,4,4,,,4,4,188,188,188,188,188,4,4,4,4,4,4,4,190,,61',
'4,61,,,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190,190',
'190,190,190,190,190,157,157,157,4,,,157,4,,4,276,4,,276,276,276,276',
'276,276,276,276,276,276,147,,276,276,276,276,276,147,147,276,276,276',
'276,,,,276,276,,276,183,276,276,,,276,276,183,183,183,183,183,276,276',
'276,276,276,276,276,206,,,276,,,,206,206,206,206,206,206,206,206,206',
'206,206,206,206,206,206,206,206,206,206,206,206,,,,276,,,,276,,276,7',
'276,,7,7,7,7,7,7,7,7,7,7,143,,7,7,7,7,7,143,143,7,7,7,7,,,,7,7,,7,139',
'7,7,141,,7,7,139,139,,141,141,7,7,7,7,7,7,7,204,,,7,,,,204,204,204,204',
'204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204',
',,,7,,,,7,,7,120,7,,120,120,120,120,120,120,120,120,120,120,140,,120',
'120,120,120,120,140,140,120,120,120,120,,,,120,120,,120,,120,120,,,120',
'120,,,,,,120,120,120,120,120,120,120,196,,,120,,,,196,196,196,196,196',
'196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,,,,120',
',,,120,,120,256,120,,256,256,256,256,256,256,256,256,256,256,,,256,256',
'256,256,256,,,256,256,256,256,,,,256,256,,256,,256,256,,,256,256,,,',
',,256,256,256,256,256,256,256,202,,,256,,,,202,202,202,202,202,202,202',
'202,202,202,202,202,202,202,202,202,202,202,202,202,202,,,,256,,,,256',
',256,255,256,,255,255,255,255,255,255,255,255,255,255,,,255,255,255',
'255,255,,,255,255,255,255,,,,255,255,,255,,255,255,,,255,255,,,,,,255',
'255,255,255,255,255,255,193,,,255,,,,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,,,,255,,,,255,,255',
'254,255,,254,254,254,254,254,254,254,254,254,254,,,254,254,254,254,254',
',,254,254,254,254,,,,254,254,,254,,254,254,,,254,254,,,,,,254,254,254',
'254,254,254,254,210,,,254,,,,210,210,210,210,210,210,210,210,210,210',
'210,210,210,,,,,,,,254,,,,254,,,,254,,254,18,254,,18,18,18,18,18,18',
'18,18,18,18,,,18,18,18,18,18,,,18,18,18,18,,,,18,18,,18,,18,18,,,18',
'18,,,,,,18,18,18,18,18,18,18,187,,,18,,,,187,187,187,187,187,187,187',
'187,187,187,187,187,187,187,187,187,187,187,187,187,187,,,,18,,,,18',
',18,250,18,,250,250,250,250,250,250,250,250,250,250,,,250,250,250,250',
'250,,,250,250,250,250,,,,250,250,,250,,250,250,,,250,250,,,,,,250,250',
'250,250,250,250,250,199,,,250,,,,199,199,199,199,199,199,199,199,199',
'199,199,199,199,199,199,199,199,199,199,199,199,,,,250,,,,250,,250,247',
'250,,247,247,247,247,247,247,247,247,247,247,,,247,247,247,247,247,',
',247,247,247,247,,,,247,247,,247,,247,247,,,247,247,,,,,,247,247,247',
'247,247,247,247,182,,,247,,,,182,182,182,182,182,182,182,182,182,182',
'182,182,182,,,,,,,,,,,,247,,,,247,,247,245,247,,245,245,245,245,245',
'245,245,245,245,245,,,245,245,245,245,245,,,245,245,245,245,,,,245,245',
',245,,245,245,,,245,245,,,,,,245,245,245,245,245,245,245,207,,,245,',
',,207,207,207,207,207,207,207,207,207,207,207,207,207,,,,,,,,,,,,245',
',,,245,,245,231,245,,231,231,231,231,231,231,231,231,231,231,,,231,231',
'231,231,231,,,231,231,231,231,,,,231,231,,231,,231,231,,,231,231,,,',
',,231,231,231,231,231,231,231,179,,,231,,,,179,179,179,179,179,179,179',
'179,179,179,179,179,179,,,,,,,,,,,,231,,,,231,,231,35,231,,35,35,35',
'35,35,35,35,35,35,35,,,35,35,35,35,35,,,35,35,35,35,,,,35,35,,35,,35',
'35,,,35,35,,,,,,35,35,35,35,35,35,35,205,,,35,,,,205,205,205,205,205',
'205,205,205,205,205,191,,,,,,,191,191,191,191,191,191,191,35,,,,35,',
'35,40,35,,40,40,40,40,40,40,40,40,40,40,,,40,40,40,40,40,,,40,40,40',
'40,,,,40,40,,40,,40,40,,,40,40,,,,,,40,40,40,40,40,40,40,203,,,40,,',
',203,203,203,203,203,203,203,203,203,203,194,,,,,,,194,194,194,194,194',
'194,194,40,,,,40,,40,44,40,,44,44,44,44,44,44,44,44,44,44,,,44,44,44',
'44,44,,,44,44,44,44,,,,44,44,,44,,44,44,,,44,44,,,,,,44,44,44,44,44',
'44,44,200,,,44,,,,200,200,200,200,200,200,200,200,200,200,,,,,,,,,,',
',,,,44,,,,44,,44,46,44,,46,46,46,46,46,46,46,46,46,46,,,46,46,46,46',
'46,,,46,46,46,46,,,,46,46,,46,,46,46,,,46,46,,,,,,46,46,46,46,46,46',
'46,,,,46,,,,,,,,,,,,,,,,,,,,,,,,,,,,46,,,,46,,46,48,46,,48,48,48,48',
'48,48,48,48,48,48,,,48,48,48,48,48,,,48,48,48,48,,,,48,48,,48,,48,48',
',,48,48,,,,,,48,48,48,48,48,48,48,,,,48,,,,,,,,,,,,,,,,,,,,,,,,,,,,48',
',,,48,,48,230,48,,230,230,230,230,230,230,230,230,230,230,,,230,230',
'230,230,230,,,230,230,230,230,,,,230,230,,230,,230,230,,,230,230,,,',
',,230,230,230,230,230,230,230,,,,230,,,,,,,,,,,,,,,,,,,,,,,,,,,,230',
',,,230,,230,51,230,,51,51,51,51,51,51,51,51,51,51,,,51,51,51,51,51,',
',51,51,51,51,,,,51,51,,51,,51,51,,,51,51,,,,,,51,51,51,51,51,51,51,',
',,51,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,,,,51,,51,53,51,,53,53,53,53,53,53',
'53,53,53,53,,,53,53,53,53,53,,,53,53,53,53,,,,53,53,,53,,53,53,,,53',
'53,,,,,,53,53,53,53,53,53,53,,,,53,,,,,,,,,,,,,,,,,,,,,,,,,,,,53,,,',
'53,,53,55,53,,55,55,55,55,55,55,55,55,55,55,,,55,55,55,55,55,,,55,55',
'55,55,,,,55,55,,55,,55,55,,,55,55,55,,,,,55,55,55,55,55,55,55,,,,55',
',,,,,,,,,,,,,,,,,,,,,,,,,,,55,,,,55,,55,57,55,,57,57,57,57,57,57,57',
'57,57,57,,,57,57,57,57,57,,,57,57,57,57,,,,57,57,,57,,57,57,,,57,57',
',,,,,57,57,57,57,57,57,57,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,,,,57',
',57,119,57,,119,119,119,119,119,119,119,119,119,119,,,119,119,119,119',
'119,,,119,119,119,119,,,,119,119,,119,,119,119,,,119,119,,,,,,119,119',
'119,119,119,119,119,,,,119,,,,,,,,,,,,,,,,,,,,,,,,,,,,119,,,,119,,119',
'228,119,,228,228,228,228,228,228,228,228,228,228,,,228,228,228,228,228',
',,228,228,228,228,,,,228,228,,228,,228,228,,,228,228,,,,,,228,228,228',
'228,228,228,228,,,,228,,,,,,,,,,,,,,,,,,,,,,,,,,,,228,,,,228,,228,62',
'228,,62,62,62,62,62,62,62,62,62,62,,,62,62,62,62,62,,,62,62,62,62,,',
',62,62,,62,,62,62,,,62,62,,,,,,62,62,62,62,62,62,62,,,,62,,,,,,,,,,',
',,,,,,,,,,,,,,,,,62,,,,62,,62,66,62,,66,66,66,66,66,66,66,66,66,66,',
',66,66,66,66,66,,,66,66,66,66,,,,66,66,,66,,66,66,,,66,66,,,,,,66,66',
'66,66,66,66,66,,,,66,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,66,,66,67,66,',
'67,67,67,67,67,67,67,67,67,67,,,67,67,67,67,67,,,67,67,67,67,,,,67,67',
',67,,67,67,,,67,67,,,,,,67,67,67,67,67,67,67,,,,67,,,,,,,,,,,,,,,,,',
',,,,,,,,,,67,,,,67,,67,226,67,,226,226,226,226,226,226,226,226,226,226',
',,226,226,226,226,226,,,226,226,226,226,,,,226,226,,226,,226,226,,,226',
'226,226,,,,,226,226,226,226,226,226,226,,,,226,,,,,,,,,,,,,,,,,,,,,',
',,,,,,226,226,226,,226,,226,220,226,,220,220,220,220,220,220,220,220',
'220,220,,,220,220,220,220,220,,,220,220,220,220,,,,220,220,,220,,220',
'220,,,220,220,,,,,,220,220,220,220,220,220,220,,,,220,,,,,,,,,,,,,,',
',,,,,,,,,,,,,220,,,,220,,220,72,220,,72,72,72,72,72,72,72,72,72,72,',
',72,72,72,72,72,,,72,72,72,72,,,,72,72,,72,,72,72,,,72,72,72,,,,,72',
'72,72,72,72,72,72,,,,72,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,,,,72,,72,118',
'72,,118,118,118,118,118,118,118,118,118,118,,,118,118,118,118,118,,',
'118,118,118,118,,,,118,118,,118,,118,118,,,118,118,,,,,,118,118,118',
'118,118,118,118,,,,118,,,,,,,,,,,,,,,,,,,,,,,,,,,,118,,,,118,,118,164',
'118,,164,164,164,164,164,164,164,164,164,164,,,164,164,164,164,164,',
',164,164,164,164,,,,164,164,,164,,164,164,,,164,164,164,,,,,164,164',
'164,164,164,164,164,,,,164,,,,,,,,,,,,,,,,,,,,,,,,,,,,164,,,,164,,164',
'0,164,,0,0,0,0,0,0,0,0,0,0,,,0,0,0,0,0,,,0,0,0,0,,,,0,0,,0,,0,0,,,0',
'0,,,,,,0,0,0,0,0,0,0,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,0,0,,0,,0,122',
'0,,122,122,122,122,122,122,122,122,122,122,,,122,122,122,122,122,,,122',
'122,122,122,,,,122,122,,122,,122,122,,,122,122,,,,,,122,122,122,122',
'122,122,122,,,,122,,,,,,,,,,,,,,,,,,,,,,,,,,,,122,,,,122,,122,148,122',
',148,148,148,148,148,148,148,148,148,148,,,148,148,148,148,148,,,148',
'148,148,148,,,,148,148,,148,,148,148,,,148,148,,,,,,148,148,148,148',
'148,148,148,,,,148,,,,,,,,,,,,,,,,,,,,,,,,,,,,148,,,,148,,148,131,148',
',131,131,131,131,131,131,131,131,131,131,,,131,131,131,131,131,,,131',
'131,131,131,,,,131,131,,131,,131,131,,,131,131,,,,,,131,131,131,131',
'131,131,131,,,,131,,,,,,,,,,,,,,,,,,,,,,,,,,,,131,,,,131,,131,116,131',
',116,116,116,116,116,116,116,116,116,116,,,116,116,116,116,116,,,116',
'116,116,116,,,,116,116,,116,,116,116,,,116,116,,,,,,116,116,116,116',
'116,116,116,,,,116,,,,,,,,,,,,,,,,,,,,,,,,,,,,116,,,,116,,116,80,116',
',80,80,80,80,80,80,80,80,80,80,,,80,80,80,80,80,,,80,80,80,80,,,,80',
'80,,80,,80,80,,,80,80,,80,,,,80,80,80,80,80,80,80,,,,80,,,,,,,,,,,,',
',,,,,,,,,,,,,,,80,,,,80,,80,81,80,,81,81,81,81,81,81,81,81,81,81,,,81',
'81,81,81,81,,,81,81,81,81,,,,81,81,,81,,81,81,,,81,81,,,,,,81,81,81',
'81,81,81,81,,,,81,,,,,,,,,,,,,,,,,,,,,,,,,,,,81,,,,81,,81,128,81,,128',
'128,128,128,128,128,128,128,128,128,,,128,128,128,128,128,,,128,128',
'128,128,,,,128,128,,128,,128,128,,,128,128,128,,,,,128,128,128,128,128',
'128,128,,,,128,,,,,,,,,,,,,,,,,,,,,,,,,,,,128,,,,128,,128,125,128,,125',
'125,125,125,125,125,125,125,125,125,,,125,125,125,125,125,,,125,125',
'125,125,,,,125,125,,125,,125,125,,,125,125,,,,,,125,125,125,125,125',
'125,125,,,,125,,,,,,,,,,,,,,,,,,,,,,,,,,,,125,,,,125,,125,88,125,,88',
'88,88,88,88,88,88,88,88,88,,,88,88,88,88,88,,,88,88,88,88,,,,88,88,',
'88,,88,88,,,88,88,,,,,,88,88,88,88,88,88,88,,,,88,,,,,,,,,,,,,,,,,,',
',,,,,,,,,88,,,,88,,88,89,88,,89,89,89,89,89,89,89,89,89,89,,,89,89,89',
'89,89,,,89,89,89,89,,,,89,89,,89,,89,89,,,89,89,,,,,,89,89,89,89,89',
'89,89,,,,89,,,,,,,,,,,,,,,,,,,,,,,,,,,,89,,,,89,,89,90,89,,90,90,90',
'90,90,90,90,90,90,90,,,90,90,90,90,90,,,90,90,90,90,,,,90,90,,90,,90',
'90,,,90,90,,,,,,90,90,90,90,90,90,90,,,,90,,,,,,,,,,,,,,,,,,,,,,,,,',
',,90,,,,90,,90,91,90,,91,91,91,91,91,91,91,91,91,91,,,91,91,91,91,91',
',,91,91,91,91,,,,91,91,,91,,91,91,,,91,91,,,,,,91,91,91,91,91,91,91',
',,,91,,,,,,,,,,,,,,,,,,,,,,,,,,,,91,,,,91,,91,92,91,,92,92,92,92,92',
'92,92,92,92,92,,,92,92,92,92,92,,,92,92,92,92,,,,92,92,,92,,92,92,,',
'92,92,,,,,,92,92,92,92,92,92,92,,,,92,,,,,,,,,,,,,,,,,,,,,,,,,,,,92',
',,,92,,92,93,92,,93,93,93,93,93,93,93,93,93,93,,,93,93,93,93,93,,,93',
'93,93,93,,,,93,93,,93,,93,93,,,93,93,,,,,,93,93,93,93,93,93,93,,,,93',
',,,,,,,,,,,,,,,,,,,,,,,,,,,93,,,,93,,93,94,93,,94,94,94,94,94,94,94',
'94,94,94,,,94,94,94,94,94,,,94,94,94,94,,,,94,94,,94,,94,94,,,94,94',
',,,,,94,94,94,94,94,94,94,,,,94,,,,,,,,,,,,,,,,,,,,,,,,,,,,94,,,,94',
',94,95,94,,95,95,95,95,95,95,95,95,95,95,,,95,95,95,95,95,,,95,95,95',
'95,,,,95,95,,95,,95,95,,,95,95,,,,,,95,95,95,95,95,95,95,,,,95,,,,,',
',,,,,,,,,,,,,,,,,,,,,,95,,,,95,,95,121,95,,121,121,121,121,121,121,121',
'121,121,121,,,121,121,121,121,121,,,121,121,121,121,,,,121,121,,121',
',121,121,,,121,121,,,,,,121,121,121,121,121,121,121,,,,121,,,,,,,,,',
',,,,,,,,,,,,,,,,,,121,,,,121,,121,97,121,,97,97,97,97,97,97,97,97,97',
'97,,,97,97,97,97,97,,,97,97,97,97,,,,97,97,,97,,97,97,,,97,97,,,,,,97',
'97,97,97,97,97,97,,,,97,,,,,,,,,,,,,,,,,,,,,,,,,,,,97,,,,97,,97,98,97',
',98,98,98,98,98,98,98,98,98,98,,,98,98,98,98,98,,,98,98,98,98,,,,98',
'98,,98,,98,98,,,98,98,,,,,,98,98,98,98,98,98,98,,,,98,,,,,,,,,,,,,,',
',,,,,,,,,,,,,98,,,,98,,98,99,98,,99,99,99,99,99,99,99,99,99,99,,,99',
'99,99,99,99,,,99,99,99,99,,,,99,99,,99,,99,99,,,99,99,,,,,,99,99,99',
'99,99,99,99,,,,99,,,,,,,,,,,,,,,,,,,,,,,,,,,,99,,,,99,,99,100,99,,100',
'100,100,100,100,100,100,100,100,100,,,100,100,100,100,100,,,100,100',
'100,100,,,,100,100,,100,,100,100,,,100,100,,,,,,100,100,100,100,100',
'100,100,,,,100,,,,,,,,,,,,,,,,,,,,,,,,,,,,100,,,,100,,100,115,100,,115',
'115,115,115,115,115,115,115,115,115,,,115,115,115,115,115,,,115,115',
'115,115,,,,115,115,,115,,115,115,,,115,115,,,,,,115,115,115,115,115',
'115,115,,,,115,,,,,,,,,,,,,,,,,,,,,,,,,,,,115,,,,115,,115,102,115,,102',
'102,102,102,102,102,102,102,102,102,,,102,102,102,102,102,,,102,102',
'102,102,,,,102,102,,102,,102,102,,,102,102,,,,,,102,102,102,102,102',
'102,102,,,,102,,,,,,,,,,,,,,,,,,,,,,,,,,,,102,,,,102,,102,103,102,,103',
'103,103,103,103,103,103,103,103,103,,,103,103,103,103,103,,,103,103',
'103,103,,,,103,103,,103,,103,103,,,103,103,,,,,,103,103,103,103,103',
'103,103,,,,103,,,,,,,,,,,,,,,,,,,,,,,,,,,,103,,,,103,,103,104,103,,104',
'104,104,104,104,104,104,104,104,104,,,104,104,104,104,104,,,104,104',
'104,104,,,,104,104,,104,,104,104,,,104,104,,,,,,104,104,104,104,104',
'104,104,,,,104,,,,,,,,,,,,,,,,,,,,,,,,,,,,104,,,,104,,104,123,104,,123',
'123,123,123,123,123,123,123,123,123,,,123,123,123,123,123,,,123,123',
'123,123,,,,123,123,,123,,123,123,,,123,123,,,,,,123,123,123,123,123',
'123,123,,,,123,,,,,,,,,,,,,,,,,,,,,,,,,,,,123,,,,123,,123,106,123,,106',
'106,106,106,106,106,106,106,106,106,,,106,106,106,106,106,,,106,106',
'106,106,,,,106,106,,106,,106,106,,,106,106,,,,,,106,106,106,106,106',
'106,106,,,,106,,,,,,,,,,,,,,,,,,,,,,,,,,,,106,,,,106,,106,107,106,,107',
'107,107,107,107,107,107,107,107,107,,,107,107,107,107,107,,,107,107',
'107,107,,,,107,107,,107,,107,107,,,107,107,,,,,,107,107,107,107,107',
'107,107,,,,107,,,,,,,,,,,,,,,,,,,,,,,,,,,,107,,,,107,,107,108,107,,108',
'108,108,108,108,108,108,108,108,108,,,108,108,108,108,108,,,108,108',
'108,108,,,,108,108,,108,,108,108,,,108,108,,,,,,108,108,108,108,108',
'108,108,,,,108,,,,,,,,,,,,,,,,,,,,,,,,,,,,108,,,,108,,108,109,108,,109',
'109,109,109,109,109,109,109,109,109,,,109,109,109,109,109,,,109,109',
'109,109,,,,109,109,,109,,109,109,,,109,109,,,,,,109,109,109,109,109',
'109,109,,,,109,,,,,,,,,,,,,,,,,,,,,,,,,,,,109,,,,109,,109,110,109,,110',
'110,110,110,110,110,110,110,110,110,,,110,110,110,110,110,,,110,110',
'110,110,,,,110,110,,110,,110,110,,,110,110,,,,,,110,110,110,110,110',
'110,110,,,,110,,,,,,,,,,,,,,,,,,,,,,,,,,,,110,,,,110,,110,111,110,,111',
'111,111,111,111,111,111,111,111,111,,,111,111,111,111,111,,,111,111',
'111,111,,,,111,111,,111,,111,111,,,111,111,,,,,,111,111,111,111,111',
'111,111,,,,111,,,,,,,,,,,,,,,,,,,,,,,,,,,,111,,,,111,,111,112,111,,112',
'112,112,112,112,112,112,112,112,112,,,112,112,112,112,112,,,112,112',
'112,112,,,,112,112,,112,,112,112,,,112,112,,,,,,112,112,112,112,112',
'112,112,,,,112,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,,,,112,,112,113,112,,113',
'113,113,113,113,113,113,113,113,113,,,113,113,113,113,113,,,113,113',
'113,113,,,,113,113,,113,,113,113,,,113,113,,,,,,113,113,113,113,113',
'113,113,,,,113,,,,,,,,,,,,,,,,,,,,,,,,,,,,113,,,,113,,113,101,113,,101',
'101,101,101,101,101,101,101,101,101,,,101,101,101,101,101,,,101,101',
'101,101,,,,101,101,,101,,101,101,,,101,101,,,,,,101,101,101,101,101',
'101,101,212,,212,101,,,,59,59,59,59,59,59,59,59,59,59,,,,,,,,,212,,59',
'59,,,101,,212,,101,,101,,101,,,212,59,,,,,,212,212,212,212,212,212,212',
'212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212',
'212,212,212,212,212,212,212,,212,212,275,,275,,,212,,,59,,59,,59,,,',
',,,,,,,,,275,,,,,,,,275,,,,,,,,,275,,,,,,,275,275,275,275,275,275,275',
'275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275',
'275,275,275,275,275,275,,,275,275,,,,,,275,1,1,1,1,1,1,1,1,1,1,,,,,',
',,,,,1,1,,,,,,,,,,,,,,,1,,,,283,,283,,,,,,,,,,,,,,,,,,,,,,,283,,,,,',
',,283,,,,,,,,,283,,1,,1,,1,283,283,283,283,283,283,283,283,283,283,283',
'283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283',
'283,283,,,283,283,165,,165,,,283,,,,,,,,,,,,,,,,,,,,165,,,,,,,,165,',
',,,,,,,165,,,,,,,165,165,165,165,165,165,165,165,165,165,165,165,165',
'165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165',
',,165,165,173,,173,,,,,,,,,,,,,,,,,,,,,,,173,,,,,,,,173,,,,,,,,,173',
',,,,,,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173',
'173,173,173,173,173,173,173,173,173,173,173,173,173,173,,,173,173,278',
',278,,,,,,,,,,,,,,,,,,,,,,,278,,,,,,,,278,,,,,,,,,278,,,,,,,278,278',
'278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278',
'278,278,278,278,278,278,278,278,278,278,278,,,278,278,277,,277,,,,,',
',,,,,,,,,,,,,,,,,277,,,,,,,,277,,,,,,,,,277,,,,,,,277,277,277,277,277',
'277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277',
'277,277,277,277,277,277,277,277,,,277,277,224,,224,,,,,,,,,,,,,,,,,',
',,,,,224,,,,,,,,224,,,,,,,,,224,,,,,,,224,224,224,224,224,224,224,224',
'224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224',
'224,224,224,224,224,,,224,224,271,,271,,,,,,,,,,,,,,,,,,,,,,,271,,,',
',,,,271,,,,,,,271,,271,,,,,,,271,271,271,271,271,271,271,271,271,271',
'271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271',
'271,271,271,,,271,271,78,,78,,,,,,,,,,,,,,,,,,,,,,,78,,,,,,,,78,,,,',
',,78,,78,,,,,,,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78',
'78,78,78,78,78,78,78,78,78,78,78,78,,,78,78,192,,192,,,,,,,,,,,,,,,',
',,,,,,,192,,,,,,,,192,,,,,,,,,192,,,,,,,192,192,192,192,192,192,192',
'192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192',
'192,192,192,192,192,192,,,192,192,76,,76,,,,,,,,,,,,,,,,,,,,,,,76,,',
',,,,,76,,,,,,,,,76,,,,,,,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76',
'76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,,,76,76,149,,149,,,,,,',
',,,,,,,,,,,,,,,,149,,,,,,,,149,,,,,,,,,149,,,,,,,149,149,149,149,149',
'149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149',
'149,149,149,149,149,149,149,149,149,,149,149,260,,260,,,,,,,,,,,,,,',
',,,,,,,,260,,,,,,,,260,,,,,,,,,260,,,,,,,260,260,260,260,260,260,260',
'260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260',
'260,260,260,260,260,260,,,260,260,259,,259,,,,,,,,,,,,,,,,,,,,,,,259',
',,,,,,,259,,,,,,,,,259,,,,,,,259,259,259,259,259,259,259,259,259,259',
'259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259',
'259,259,259,,,259,259,258,,258,,,,,,,,,,,,,,,,,,,,,,,258,,,,,,,,258',
',,,,,,,,258,,,,,,,258,258,258,258,258,258,258,258,258,258,258,258,258',
'258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258',
',,258,258,257,,257,,,,,,,,,,,,,,,,,,,,,,,257,,,,,,,,257,,,,,,,,,257',
',,,,,,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,,,257,257,142',
',142,,,,,,,,,,,,,,,,,,,,,,,142,,,,,,,,142,,,,,,,142,,142,,,,,,,142,142',
'142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142,142',
'142,142,142,142,142,142,142,142,142,142,142,,,142,142,16,,16,,,,,,,',
',,,,,,,,,,,,,,,16,,,,,,,,16,,,,,,,,,16,,,,,,,16,16,16,16,16,16,16,16',
'16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,,',
'16,16,184,,184,,,,,,,,,,,,,,,,,,,,,,,184,,,,,,,,184,,,,,,,,,184,,,,',
',,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184',
'184,184,184,184,184,184,184,184,184,184,184,184,184,,,184,184,146,,146',
',,,,,,,,,,,,,,,,,,,,,,146,,,,,,,,146,,,,,,,146,,146,,,,,,,146,146,146',
'146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146',
'146,146,146,146,146,146,146,146,146,146,216,,146,146,,,,,216,,,,,,,',
',216,,,,,,,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216',
'216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,198,,,,',
',,,198,,,,,,,,,198,,,,,,,198,198,198,198,198,198,198,198,198,198,198',
'198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198',
'198,198,124,,,,,,,,124,,,,,,,,,124,,,,,,,124,124,124,124,124,124,124',
'124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124',
'124,124,124,124,124,124,201,,,,,,,,201,,,,,,,,,201,,,,,,,201,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,201,201,201,201,201,201,201,201,201,162,,,,,,,,,162,,,,,,,162,162',
'162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162',
'162,162,162,162,162,162,162,162,162,162,162,270,,,,,,,,,270,,,,,,,270',
'270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270',
'270,270,270,270,270,270,270,270,270,270,270,270,269,,,,,,,,,269,,,,',
',,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269',
'269,269,269,269,269,269,269,269,269,269,269,269,269,248,,,,,,,,,248',
',,,,,,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248',
'248,248,248,248,248,248,248,248,248,248,248,248,248,248,160,,,,,,,,',
'160,,,,,,,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160',
'160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,185,,,,',
',,,,185,,,,,,,185,185,185,185,185,185,185,185,185,185,185,185,185,185',
'185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,209',
',,,,,,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209',
'209,209,209,209,209,209,209,209,209,209,209,209,209,209,181,,,,,,,181',
'181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181',
'181,181,181,181,181,181,181,181,181,181,181,181,186,,,,,,,186,186,186',
'186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186',
'186,186,186,186,186,186,186,186,186,186,178,,,,,,,178,178,178,178,178',
'178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178',
'178,178,178,178,178,178,178,178,189,,,,,,,189,189,189,189,189,189,189',
'189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189',
'189,189,189,189,189,189' ]
        racc_action_check = arr = Array.new(8814, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  3148,  6519,   nil,   178,   268,   239,   nil,   448,   192,   nil,
   nil,   nil,   -51,   nil,   120,   nil,  7890,   nil,   898,    73,
   -71,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8,   nil,
   nil,   nil,   nil,    76,   nil,  1348,   nil,   nil,   nil,   nil,
  1438,   nil,   nil,   nil,  1528,   nil,  1618,   nil,  1708,   127,
   nil,  1888,   nil,  1978,   nil,  2068,   nil,  2158,   nil,  6354,
   nil,   284,  2428,   nil,   nil,   nil,  2518,  2608,   nil,   155,
   120,   nil,  2878,    64,    65,   204,  7309,    86,  7143,   110,
  3598,  3688,   108,   nil,   242,   nil,   nil,   nil,  3958,  4048,
  4138,  4228,  4318,  4408,  4498,  4588,    88,  4768,  4858,  4948,
  5038,  6298,  5218,  5308,  5398,   248,  5578,  5668,  5758,  5848,
  5938,  6028,  6118,  6208,   nil,  5128,  3508,   nil,  2968,  2248,
   538,  4678,  3238,  5488,  8218,  3868,   229,   nil,  3778,    -2,
   nil,  3418,   nil,   nil,    20,   158,   166,    88,   nil,   439,
   509,   442,  7807,   419,   nil,   nil,  8056,   329,  3328,  7392,
   -42,   100,    28,    70,   -62,   nil,   -64,   264,   218,   nil,
  8502,    -2,  8318,   nil,  3058,  6645,   nil,   nil,   102,   126,
   114,    84,   nil,  6728,   nil,   nil,   nil,   nil,  8696,  1268,
   117,  8622,  1088,   349,  7973,  8548,  8659,   908,   259,  8733,
   278,  1375,  7226,   728,  1465,   218,   548,   -25,  8164,   998,
  1538,  8272,   638,  1448,   458,  1358,   368,  1178,   189,  8585,
   818,   198,  6350,   nil,   150,    89,  8110,   nil,   nil,   101,
  2788,   197,   nil,     1,  6977,    93,  2698,   nil,  2338,   nil,
  1798,  1258,   120,   nil,   161,    60,   nil,   165,    -2,    42,
   nil,   nil,   192,   nil,    -2,  1168,   nil,  1078,  8456,   nil,
   988,   214,   nil,   nil,   808,   718,   628,  7724,  7641,  7558,
  7475,     7,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  8410,
  8364,  7060,   181,   nil,   nil,  6433,   358,  6894,  6811,   nil,
    78,   218,   nil,  6562,   nil,   nil,   nil ]

racc_action_default = [
    -1,  -166,   -21,  -166,  -166,  -166,   -22,  -166,  -166,    -2,
   -45,   -23,    -3,   -30,  -159,   -97,    -4,   -28,  -166,    -7,
  -166,   -29,   -32,    -8,   -31,   -33,    -9,   -91,  -166,   -34,
   -10,   -98,   -35,  -166,   -11,  -166,   -99,   -36,   -26,   -12,
  -166,  -100,   -27,   -13,  -166,   -37,  -166,   -14,  -166,  -114,
   -38,  -166,   -15,  -166,   -39,  -126,   -16,  -166,   -96,  -166,
  -116,  -108,  -166,   -17,   -18,   -93,  -166,  -166,   -19,  -166,
  -166,   -20,  -126,  -166,  -115,   -48,   -44,  -166,  -166,  -166,
  -166,    -6,  -166,  -157,  -159,  -161,  -163,   -88,  -166,  -166,
  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
  -166,  -166,  -166,  -166,   -56,  -166,  -166,   -55,  -166,  -166,
  -166,  -166,  -166,  -166,  -138,  -166,  -166,  -101,  -126,  -166,
  -105,  -166,  -104,  -118,  -166,  -166,  -166,  -143,   -90,   -49,
   -46,   -47,  -166,   -50,  -102,  -119,  -166,   -52,  -166,  -127,
  -166,   -51,   -95,  -166,  -166,   -43,  -166,  -166,  -108,  -109,
   -53,  -166,   -54,   -94,  -126,  -127,   287,  -155,  -166,  -134,
  -166,  -166,   -25,    -5,  -156,  -160,  -158,  -162,   -81,   -70,
   -59,   -82,   -71,   -60,  -164,   -87,   -83,   -72,   -61,   -84,
   -73,   -62,  -165,   -74,   -63,  -166,   -75,   -64,   -85,   -76,
   -65,   -86,   -77,   -66,   -78,   -67,   -79,   -68,   -57,   -80,
   -69,   -58,  -166,  -103,  -166,  -117,   -40,   -92,   -89,  -166,
  -166,  -166,  -140,  -166,  -128,  -166,  -166,  -125,  -166,  -133,
  -166,  -166,  -166,  -107,  -166,  -166,  -139,  -166,  -166,  -166,
  -135,   -24,  -141,  -106,  -120,  -166,  -142,  -166,  -145,  -144,
  -166,  -166,  -150,  -154,  -166,  -166,  -166,  -129,  -130,   -41,
   -42,  -166,  -110,  -111,  -113,  -122,  -137,  -136,  -121,  -147,
  -146,  -166,  -166,  -151,  -148,  -166,  -166,  -131,  -132,  -112,
  -152,  -166,  -123,  -166,  -153,  -149,  -124 ]

racc_goto_table = [
     9,    73,   136,    16,    74,    12,    75,    76,    79,   219,
    78,   155,    81,   262,     5,   263,   144,    83,    85,   214,
   130,   124,   251,   145,   252,   169,   174,   217,    84,   268,
    86,   nil,   nil,   138,   157,   nil,   nil,   nil,   139,   nil,
   nil,   144,   279,   140,   nil,   nil,   nil,   141,   145,   142,
   130,   143,   273,   nil,   146,   237,   147,   nil,   149,   152,
   151,   nil,   153,   nil,   nil,   160,   nil,   nil,   242,   161,
   162,   nil,   nil,   nil,   130,   130,   nil,   nil,   167,   195,
   nil,   nil,   175,    16,   173,   171,   nil,   176,   177,   nil,
   nil,   178,   179,   180,   181,   182,   183,   184,   185,   186,
   187,   188,   189,   190,   191,   192,   193,   194,   155,   196,
   197,   198,   199,   200,   201,   202,   203,   nil,   204,   205,
   144,   206,   207,   208,   209,   210,   211,   145,   212,   215,
   nil,   235,   153,   nil,   216,   218,   nil,   nil,   nil,   nil,
   nil,   nil,   222,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   224,   nil,   130,   130,   nil,   nil,   234,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   240,    81,   nil,   253,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   155,   nil,   155,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   253,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   155,   nil,   nil,   nil,   nil,   130,   nil,   nil,   246,
   nil,   nil,   nil,   248,   nil,   nil,   255,   nil,   nil,   257,
   nil,   258,   261,   259,   260,   234,   nil,   nil,   266,   267,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   269,   nil,
   270,   nil,   nil,   271,   nil,   nil,   nil,   275,   277,   278,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   280,   281,   nil,   nil,   nil,   nil,   nil,   nil,   283,
   284 ]

racc_goto_check = [
     2,     5,    38,     4,    31,     3,     4,     4,    22,    39,
     4,    21,     2,    24,     1,    24,    30,    43,    45,    36,
     9,     4,    40,    35,    41,    37,    42,    26,    44,     7,
    46,   nil,   nil,    22,    33,   nil,   nil,   nil,     4,   nil,
   nil,    30,    24,     4,   nil,   nil,   nil,     4,    35,     4,
     9,     4,    41,   nil,     4,    36,     4,   nil,     4,     5,
     4,   nil,    31,   nil,   nil,     4,   nil,   nil,    39,     4,
     4,   nil,   nil,   nil,     9,     9,   nil,   nil,    22,    38,
   nil,   nil,    22,     4,     4,     3,   nil,    43,    45,   nil,
   nil,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,    21,     4,
     4,     4,     4,     4,     4,     4,     4,   nil,     4,     4,
    30,     4,     4,     4,     4,     4,     4,    35,     4,     5,
   nil,    33,    31,   nil,     4,    22,   nil,   nil,   nil,   nil,
   nil,   nil,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     4,   nil,     9,     9,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    22,     2,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    21,   nil,    21,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,   nil,     9,   nil,   nil,    22,
   nil,   nil,   nil,     4,   nil,   nil,     2,   nil,   nil,     4,
   nil,     4,     2,     4,     4,     2,   nil,   nil,    22,    22,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,
     4,   nil,   nil,     4,   nil,   nil,   nil,     4,     4,     4,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    22,    22,   nil,   nil,   nil,   nil,   nil,   nil,     4,
     2 ]

racc_goto_pointer = [
   nil,    14,     0,     5,     3,     0,   nil,  -215,   nil,     1,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -50,     0,   nil,  -219,   nil,  -107,   nil,   nil,   nil,
   -33,     3,   nil,   -27,   nil,   -26,  -109,   -54,   -26,  -127,
  -201,  -199,   -56,     3,    14,     4,    16 ]

racc_goto_default = [
   nil,   nil,   228,   nil,   165,    19,    23,    26,    30,    34,
    39,    43,    47,    52,    56,    63,    64,    68,    71,     2,
     6,    11,   nil,    15,   159,    20,    27,    31,    36,    41,
   127,    49,   132,   nil,    60,   133,   150,   nil,   nil,   nil,
   nil,   nil,    14,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 96, :_reduce_1,
  1, 96, :_reduce_2,
  1, 96, :_reduce_3,
  1, 98, :_reduce_4,
  3, 98, :_reduce_5,
  2, 98, :_reduce_6,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  3, 117, :_reduce_24,
  2, 117, :_reduce_25,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 118, :_reduce_28,
  1, 118, :_reduce_29,
  1, 118, :_reduce_30,
  1, 118, :_reduce_31,
  1, 118, :_reduce_32,
  1, 118, :_reduce_33,
  1, 118, :_reduce_34,
  1, 118, :_reduce_35,
  1, 118, :_reduce_36,
  1, 118, :_reduce_37,
  1, 118, :_reduce_38,
  1, 118, :_reduce_39,
  3, 105, :_reduce_40,
  3, 119, :_reduce_41,
  3, 119, :_reduce_42,
  1, 119, :_reduce_43,
  2, 109, :_reduce_44,
  1, 116, :_reduce_45,
  2, 103, :_reduce_46,
  2, 103, :_reduce_47,
  2, 103, :_reduce_48,
  2, 103, :_reduce_49,
  2, 103, :_reduce_50,
  2, 103, :_reduce_51,
  2, 103, :_reduce_52,
  2, 103, :_reduce_53,
  2, 103, :_reduce_54,
  2, 103, :_reduce_55,
  2, 103, :_reduce_56,
  3, 103, :_reduce_57,
  3, 103, :_reduce_58,
  3, 103, :_reduce_59,
  3, 103, :_reduce_60,
  3, 103, :_reduce_61,
  3, 103, :_reduce_62,
  3, 103, :_reduce_63,
  3, 103, :_reduce_64,
  3, 103, :_reduce_65,
  3, 103, :_reduce_66,
  3, 103, :_reduce_67,
  3, 103, :_reduce_68,
  3, 103, :_reduce_69,
  3, 103, :_reduce_70,
  3, 103, :_reduce_71,
  3, 103, :_reduce_72,
  3, 103, :_reduce_73,
  3, 103, :_reduce_74,
  3, 103, :_reduce_75,
  3, 103, :_reduce_76,
  3, 103, :_reduce_77,
  3, 103, :_reduce_78,
  3, 103, :_reduce_79,
  3, 103, :_reduce_80,
  3, 103, :_reduce_81,
  3, 103, :_reduce_82,
  3, 103, :_reduce_83,
  3, 103, :_reduce_84,
  3, 103, :_reduce_85,
  3, 103, :_reduce_86,
  3, 103, :_reduce_87,
  2, 115, :_reduce_88,
  3, 102, :_reduce_89,
  2, 102, :_reduce_90,
  1, 120, :_reduce_91,
  3, 120, :_reduce_92,
  1, 121, :_reduce_none,
  2, 121, :_reduce_94,
  2, 114, :_reduce_95,
  1, 100, :_reduce_96,
  1, 100, :_reduce_97,
  1, 100, :_reduce_98,
  1, 100, :_reduce_99,
  1, 100, :_reduce_100,
  2, 100, :_reduce_101,
  2, 100, :_reduce_102,
  2, 125, :_reduce_103,
  1, 125, :_reduce_104,
  1, 125, :_reduce_105,
  3, 127, :_reduce_106,
  3, 123, :_reduce_107,
  0, 128, :_reduce_108,
  1, 128, :_reduce_109,
  3, 128, :_reduce_110,
  3, 128, :_reduce_111,
  4, 128, :_reduce_112,
  3, 128, :_reduce_113,
  1, 101, :_reduce_114,
  2, 101, :_reduce_115,
  1, 101, :_reduce_116,
  3, 113, :_reduce_117,
  2, 126, :_reduce_118,
  2, 126, :_reduce_119,
  3, 130, :_reduce_120,
  4, 130, :_reduce_121,
  4, 129, :_reduce_122,
  6, 104, :_reduce_123,
  7, 104, :_reduce_124,
  3, 122, :_reduce_125,
  0, 131, :_reduce_126,
  1, 131, :_reduce_127,
  2, 131, :_reduce_128,
  3, 131, :_reduce_129,
  3, 131, :_reduce_130,
  4, 131, :_reduce_131,
  4, 131, :_reduce_132,
  2, 131, :_reduce_133,
  3, 107, :_reduce_134,
  4, 107, :_reduce_135,
  5, 107, :_reduce_136,
  3, 132, :_reduce_137,
  2, 108, :_reduce_138,
  3, 124, :_reduce_139,
  3, 110, :_reduce_140,
  4, 111, :_reduce_141,
  4, 111, :_reduce_142,
  1, 133, :_reduce_143,
  3, 133, :_reduce_144,
  2, 134, :_reduce_145,
  3, 134, :_reduce_146,
  3, 134, :_reduce_147,
  5, 112, :_reduce_148,
  7, 112, :_reduce_149,
  1, 135, :_reduce_150,
  2, 135, :_reduce_151,
  3, 136, :_reduce_152,
  4, 136, :_reduce_153,
  1, 136, :_reduce_none,
  3, 137, :_reduce_155,
  2, 138, :_reduce_156,
  1, 139, :_reduce_157,
  2, 139, :_reduce_158,
  0, 140, :_reduce_159,
  2, 140, :_reduce_160,
  1, 141, :_reduce_161,
  2, 141, :_reduce_162,
  2, 106, :_reduce_163,
  3, 106, :_reduce_164,
  3, 106, :_reduce_165 ]

racc_reduce_n = 166

racc_shift_n = 287

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :UNLESS => 4,
  :NUMBER => 5,
  :STRING => 6,
  :REGEX => 7,
  :TRUE => 8,
  :FALSE => 9,
  :YES => 10,
  :NO => 11,
  :ON => 12,
  :OFF => 13,
  :IDENTIFIER => 14,
  :PROPERTY_ACCESS => 15,
  :CODE => 16,
  :PARAM => 17,
  :PARAM_SPLAT => 18,
  :NEW => 19,
  :RETURN => 20,
  :TRY => 21,
  :CATCH => 22,
  :FINALLY => 23,
  :THROW => 24,
  :BREAK => 25,
  :CONTINUE => 26,
  :FOR => 27,
  :IN => 28,
  :BY => 29,
  :WHEN => 30,
  :WHILE => 31,
  :SWITCH => 32,
  :LEADING_WHEN => 33,
  :DELETE => 34,
  :INSTANCEOF => 35,
  :TYPEOF => 36,
  :SUPER => 37,
  :EXTENDS => 38,
  :NEWLINE => 39,
  :COMMENT => 40,
  :JS => 41,
  :INDENT => 42,
  :OUTDENT => 43,
  "?" => 44,
  :UMINUS => 45,
  :SPLAT => 46,
  :NOT => 47,
  "!" => 48,
  "!!" => 49,
  "~" => 50,
  "++" => 51,
  "--" => 52,
  "*" => 53,
  "/" => 54,
  "%" => 55,
  "+" => 56,
  "-" => 57,
  "<<" => 58,
  ">>" => 59,
  ">>>" => 60,
  "&" => 61,
  "|" => 62,
  "^" => 63,
  "<=" => 64,
  "<" => 65,
  ">" => 66,
  ">=" => 67,
  "==" => 68,
  "!=" => 69,
  :IS => 70,
  :ISNT => 71,
  "&&" => 72,
  "||" => 73,
  :AND => 74,
  :OR => 75,
  "-=" => 76,
  "+=" => 77,
  "/=" => 78,
  "*=" => 79,
  "%=" => 80,
  "." => 81,
  :ASSIGN => 82,
  "||=" => 83,
  "&&=" => 84,
  "=>" => 85,
  "\n" => 86,
  ";" => 87,
  "," => 88,
  "[" => 89,
  "]" => 90,
  "{" => 91,
  "}" => 92,
  "(" => 93,
  ")" => 94 }

racc_nt_base = 95

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "UNLESS",
  "NUMBER",
  "STRING",
  "REGEX",
  "TRUE",
  "FALSE",
  "YES",
  "NO",
  "ON",
  "OFF",
  "IDENTIFIER",
  "PROPERTY_ACCESS",
  "CODE",
  "PARAM",
  "PARAM_SPLAT",
  "NEW",
  "RETURN",
  "TRY",
  "CATCH",
  "FINALLY",
  "THROW",
  "BREAK",
  "CONTINUE",
  "FOR",
  "IN",
  "BY",
  "WHEN",
  "WHILE",
  "SWITCH",
  "LEADING_WHEN",
  "DELETE",
  "INSTANCEOF",
  "TYPEOF",
  "SUPER",
  "EXTENDS",
  "NEWLINE",
  "COMMENT",
  "JS",
  "INDENT",
  "OUTDENT",
  "\"?\"",
  "UMINUS",
  "SPLAT",
  "NOT",
  "\"!\"",
  "\"!!\"",
  "\"~\"",
  "\"++\"",
  "\"--\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\">>>\"",
  "\"&\"",
  "\"|\"",
  "\"^\"",
  "\"<=\"",
  "\"<\"",
  "\">\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "IS",
  "ISNT",
  "\"&&\"",
  "\"||\"",
  "AND",
  "OR",
  "\"-=\"",
  "\"+=\"",
  "\"/=\"",
  "\"*=\"",
  "\"%=\"",
  "\".\"",
  "ASSIGN",
  "\"||=\"",
  "\"&&=\"",
  "\"=>\"",
  "\"\\n\"",
  "\";\"",
  "\",\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Root",
  "Terminator",
  "Expressions",
  "Expression",
  "Value",
  "Call",
  "Code",
  "Operation",
  "Range",
  "Assign",
  "If",
  "Try",
  "Throw",
  "Return",
  "While",
  "For",
  "Switch",
  "Extends",
  "Splat",
  "Existence",
  "Comment",
  "Block",
  "Literal",
  "AssignObj",
  "ParamList",
  "Param",
  "Array",
  "Object",
  "Parenthetical",
  "Accessor",
  "Invocation",
  "Index",
  "AssignList",
  "Super",
  "Arguments",
  "ArgList",
  "Catch",
  "ForVariables",
  "ForSource",
  "Whens",
  "When",
  "IfBlock",
  "ElsIf",
  "ElsIfs",
  "ElseBody",
  "IfEnd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_1(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_2(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_4(val, _values, result)
     result = Expressions.wrap(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_5(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_24(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_25(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_28(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_29(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_30(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_31(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_32(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_33(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_34(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_35(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_36(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_37(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_38(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_39(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_40(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_41(val, _values, result)
     result = AssignNode.new(ValueNode.new(val[0]), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_42(val, _values, result)
     result = AssignNode.new(ValueNode.new(LiteralNode.new(val[0])), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_43(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 120)
  def _reduce_44(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 125)
  def _reduce_45(val, _values, result)
     result = CommentNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_46(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_47(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 134)
  def _reduce_48(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_49(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 136)
  def _reduce_50(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_51(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_52(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_53(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 140)
  def _reduce_54(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_55(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_56(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_57(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_58(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 146)
  def _reduce_59(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_60(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_61(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_62(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_63(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 153)
  def _reduce_64(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_65(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_66(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 157)
  def _reduce_67(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_68(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_69(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 161)
  def _reduce_70(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_71(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_72(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 165)
  def _reduce_73(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_74(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_75(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_76(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 170)
  def _reduce_77(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_78(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_79(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_80(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_81(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_82(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_83(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_84(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_85(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_86(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_87(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_88(val, _values, result)
     result = ExistenceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_89(val, _values, result)
     result = CodeNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 192)
  def _reduce_90(val, _values, result)
     result = CodeNode.new([], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 197)
  def _reduce_91(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 198)
  def _reduce_92(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

# reduce 93 omitted

module_eval(<<'.,.,', 'grammar.y', 203)
  def _reduce_94(val, _values, result)
     result = ParamSplatNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 207)
  def _reduce_95(val, _values, result)
     result = ArgSplatNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 212)
  def _reduce_96(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 213)
  def _reduce_97(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 214)
  def _reduce_98(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 215)
  def _reduce_99(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 216)
  def _reduce_100(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 217)
  def _reduce_101(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 218)
  def _reduce_102(val, _values, result)
     result = ValueNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 223)
  def _reduce_103(val, _values, result)
     result = AccessorNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 224)
  def _reduce_104(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 225)
  def _reduce_105(val, _values, result)
     result = SliceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 230)
  def _reduce_106(val, _values, result)
     result = IndexNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 235)
  def _reduce_107(val, _values, result)
     result = ObjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 240)
  def _reduce_108(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 241)
  def _reduce_109(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 242)
  def _reduce_110(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 243)
  def _reduce_111(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_112(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_113(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 251)
  def _reduce_114(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_115(val, _values, result)
     result = val[1].new_instance 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 253)
  def _reduce_116(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 258)
  def _reduce_117(val, _values, result)
     result = ExtendsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_118(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 264)
  def _reduce_119(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 269)
  def _reduce_120(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 270)
  def _reduce_121(val, _values, result)
     result = val[1] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 275)
  def _reduce_122(val, _values, result)
     result = CallNode.new(:super, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 281)
  def _reduce_123(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 283)
  def _reduce_124(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 288)
  def _reduce_125(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_126(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 294)
  def _reduce_127(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 295)
  def _reduce_128(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 296)
  def _reduce_129(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 297)
  def _reduce_130(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 298)
  def _reduce_131(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 299)
  def _reduce_132(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 300)
  def _reduce_133(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 305)
  def _reduce_134(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_135(val, _values, result)
     result = TryNode.new(val[1], nil, nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 308)
  def _reduce_136(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 313)
  def _reduce_137(val, _values, result)
     result = [val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 318)
  def _reduce_138(val, _values, result)
     result = ThrowNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 323)
  def _reduce_139(val, _values, result)
     result = ParentheticalNode.new(val[1], val[0].line) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 328)
  def _reduce_140(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 335)
  def _reduce_141(val, _values, result)
     result = ForNode.new(val[0], val[3], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 336)
  def _reduce_142(val, _values, result)
     result = ForNode.new(val[3], val[2], val[1][0], val[1][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 341)
  def _reduce_143(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 342)
  def _reduce_144(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 347)
  def _reduce_145(val, _values, result)
     result = {:source => val[1]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 349)
  def _reduce_146(val, _values, result)
     result = val[0].merge(:filter => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 351)
  def _reduce_147(val, _values, result)
     result = val[0].merge(:step => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 357)
  def _reduce_148(val, _values, result)
     result = val[3].rewrite_condition(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 359)
  def _reduce_149(val, _values, result)
     result = val[3].rewrite_condition(val[1]).add_else(val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 364)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 365)
  def _reduce_151(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 370)
  def _reduce_152(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 372)
  def _reduce_153(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

# reduce 154 omitted

module_eval(<<'.,.,', 'grammar.y', 380)
  def _reduce_155(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 385)
  def _reduce_156(val, _values, result)
     result = val[1].force_statement 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 390)
  def _reduce_157(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 391)
  def _reduce_158(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 396)
  def _reduce_159(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 397)
  def _reduce_160(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 402)
  def _reduce_161(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 403)
  def _reduce_162(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 408)
  def _reduce_163(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 409)
  def _reduce_164(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 410)
  def _reduce_165(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true, :invert => true}) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
