#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

module CoffeeScript

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 402)
  # Lex and parse a CoffeeScript.
  def parse(code)
    # Uncomment the following line to enable grammar debugging, in combination
    # with the -g flag in the Rake build task.
    # @yydebug = true
    @tokens = Lexer.new.tokenize(code)
    do_parse
  end

  # Retrieve the next token from the list.
  def next_token
    @tokens.shift
  end

  # Raise a custom error class that knows about line numbers.
  def on_error(error_token_id, error_value, value_stack)
    raise ParseError.new(token_to_str(error_token_id), error_value, value_stack)
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'75,239,83,17,21,26,32,35,41,48,51,53,56,22,27,215,144,22,27,215,108',
'245,19,23,84,261,22,27,215,238,103,250,252,210,240,108,3,117,7,68,118',
'-159,-159,22,27,82,87,90,93,96,99,102,106,72,74,78,81,86,89,92,95,98',
'101,105,71,73,77,80,85,88,91,94,97,100,104,108,114,76,79,114,108,114',
'114,145,114,45,7,54,227,17,21,26,32,35,41,48,51,53,56,113,114,64,66',
'1,4,82,87,13,19,23,28,269,37,40,237,49,142,57,59,249,108,68,3,204,139',
'211,142,15,25,30,34,39,43,47,139,142,114,58,252,22,27,124,112,139,108',
'68,115,68,270,115,127,115,115,109,115,109,109,68,109,141,64,22,27,215',
'211,18,68,-159,-159,36,115,45,7,54,127,17,21,26,32,35,41,48,51,53,56',
'259,224,64,66,1,4,157,207,13,19,23,28,152,37,40,151,49,226,57,59,124',
'115,68,3,108,127,22,27,15,25,30,34,39,43,47,22,27,223,58,157,142,221',
'22,27,223,22,27,108,139,82,87,90,93,96,99,102,106,72,74,78,81,86,-159',
'-159,197,195,18,22,27,229,36,68,45,7,54,108,17,21,26,32,35,41,48,51',
'53,56,-159,-159,64,66,1,4,-159,-159,13,19,23,28,142,37,40,242,49,280',
'57,59,139,,68,3,131,82,87,,15,25,30,34,39,43,47,22,27,215,58,216,82',
'87,,68,,141,82,87,90,93,96,99,102,106,72,74,78,81,86,82,87,90,93,96',
'99,102,18,-159,-159,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,-159',
'-159,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,131,,,,15,25,30',
'34,39,43,47,,,,58,82,87,90,93,96,99,102,106,72,74,78,81,86,89,92,95',
'98,101,105,71,73,82,87,90,93,96,,18,,,,36,,45,7,54,,17,21,26,32,35,41',
'48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15',
'25,30,34,39,43,47,,,,58,82,87,90,93,96,99,102,106,72,74,78,81,86,89',
'92,95,98,101,105,71,73,82,87,90,93,96,,18,,,,36,,45,7,54,,17,21,26,32',
'35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3',
',,,,15,25,30,34,39,43,47,,,,58,82,87,90,93,96,99,102,106,72,74,78,81',
'86,89,92,95,98,101,105,71,73,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35',
'41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,',
',,15,25,30,34,39,43,47,,,,58,82,87,90,93,96,99,102,106,72,74,78,81,86',
'89,92,95,98,101,105,71,73,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41',
'48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15',
'25,30,34,39,43,47,,,,58,82,87,90,93,96,99,102,106,72,74,78,81,86,89',
'92,95,98,101,105,71,73,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48',
'51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,131,,,,15',
'25,30,34,39,43,47,,,,58,82,87,90,93,96,99,102,106,72,74,78,81,86,89',
'92,95,98,101,105,71,73,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48',
'51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25',
'30,34,39,43,47,,,,58,82,87,90,93,96,99,102,106,72,74,78,81,86,89,92',
'95,98,101,105,71,73,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51',
'53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30',
'34,39,43,47,,,,58,82,87,90,93,96,99,102,106,72,74,78,81,86,89,92,95',
'98,101,105,71,73,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53',
'56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34',
'39,43,47,,,,58,82,87,90,93,96,99,102,106,72,74,78,81,86,82,87,90,93',
'96,99,102,106,72,74,78,81,86,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48',
'51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,131,,,,15',
'25,30,34,39,43,47,,,,58,82,87,90,93,96,99,102,106,72,74,82,87,90,93',
'96,99,102,106,72,74,82,87,90,93,96,99,102,18,,,,36,,45,7,54,,17,21,26',
'32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68',
'3,,,,,15,25,30,34,39,43,47,,,,58,82,87,90,93,96,99,102,106,72,74,82',
'87,90,93,96,99,102,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48',
'51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,131,,,,15',
'25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54',
',17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49',
',57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,',
',,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13',
'19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,',
',,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53',
'56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34',
'39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26',
'32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68',
'3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36',
',45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37',
'40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,',
',,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66',
'1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47',
',,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41',
'48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15',
'25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54',
',17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49',
',57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,',
',,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13',
'19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,',
',,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53',
'56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34',
'39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26',
'32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68',
'3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36',
',45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37',
'40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,',
',,,,,,,,,,,18,22,27,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64',
'66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43',
'47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35',
'41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,',
',,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45',
'7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40',
',49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,',
',,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66,1,4',
',,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58',
',,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51',
'53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30',
'34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21',
'26,32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59',
',,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18',
',,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23',
'28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,',
',,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,',
',64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34,39',
'43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32',
'35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3',
',,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,',
'45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37',
'40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,',
',,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66',
'1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47',
',,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41',
'48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15',
'25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54',
',17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49',
',57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,',
',,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13',
'19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,',
',,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53',
'56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34',
'39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26',
'32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68',
'3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36',
',45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37',
'40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,',
',,,,,,,266,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64',
'66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43',
'47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35',
'41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,',
',,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45',
'7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40',
',49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,',
',,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66,1,4',
',,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58',
',,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51',
'53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30',
'34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21',
'26,32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59',
',,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18',
',,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23',
'28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,',
',,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,',
',64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34,39',
'43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32',
'35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3',
',,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,',
'45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37',
'40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,',
',,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66',
'1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47',
',,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41',
'48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15',
'25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54',
',17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49',
',57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,',
',,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13',
'19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,',
',,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53',
'56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34',
'39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26',
'32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68',
'3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36',
',45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37',
'40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,',
',,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66',
'1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47',
',,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41',
'48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15',
'25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54',
',17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49',
',57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,',
',,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13',
'19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34,39,43,47,,,,58,,,',
',,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53',
'56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34',
'39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26',
'32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68',
'3,,199,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,18,,',
',36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,,,64,66,1,4,,,13,19,23,28',
',37,40,,49,,57,59,,,68,3,131,,,,15,25,30,34,39,43,47,,,,58,,,,,,,,,',
',,,,,,,,,,,,,,,,,,18,,,,36,,45,7,54,,17,21,26,32,35,41,48,51,53,56,',
',64,66,1,4,,,13,19,23,28,,37,40,,49,,57,59,,,68,3,,,,,15,25,30,34,39',
'43,47,75,,83,58,,,,17,21,26,32,35,41,48,51,53,56,,,,,,,,84,,19,23,,',
'103,18,,,,36,,45,,54,3,,,,,82,87,90,93,96,99,102,106,72,74,78,81,86',
'89,92,95,98,101,105,71,73,77,80,85,88,91,94,97,100,104,,,76,79,75,,83',
',,278,,,145,,45,,54,,,,,,,,,,,,84,,,,,,103,,,,,,,,,,,,,,,82,87,90,93',
'96,99,102,106,72,74,78,81,86,89,92,95,98,101,105,71,73,77,80,85,88,91',
'94,97,100,104,218,,76,79,75,,83,,,241,17,21,26,32,35,41,48,51,53,56',
',,144,,,,,,84,19,23,,,,103,,,,,,,,,3,,,,,,82,87,90,93,96,99,102,106',
'72,74,78,81,86,89,92,95,98,101,105,71,73,77,80,85,88,91,94,97,100,104',
',,76,79,75,,83,,,275,,145,,45,,54,,,,,,,,,,,,,84,,,,,,103,,,,,,,108',
',,,,,,,82,87,90,93,96,99,102,106,72,74,78,81,86,89,92,95,98,101,105',
'71,73,77,80,85,88,91,94,97,100,104,,,76,79,75,,83,,,,,,,,,,,,,,,,,,',
',,,84,,,,,,103,,,,,,,,,,,,,,,82,87,90,93,96,99,102,106,72,74,78,81,86',
'89,92,95,98,101,105,71,73,77,80,85,88,91,94,97,100,104,,,76,79,75,,83',
',,,,,,,,,,,,,,,,,,,,,84,,,,,,103,,,,,,,,,,,,,,,82,87,90,93,96,99,102',
'106,72,74,78,81,86,89,92,95,98,101,105,71,73,77,80,85,88,91,94,97,100',
'104,,,76,79,75,,83,,,,,,,,,,,,,,,,,,,,,,84,,,,,,103,,,,,,,,,,,,,,,82',
'87,90,93,96,99,102,106,72,74,78,81,86,89,92,95,98,101,105,71,73,77,80',
'85,88,91,94,97,100,104,,,76,79,75,,83,,,,,,,,,,,,,,,,,,,,,,84,,,,,,103',
',,,,,,,,,,,,,,82,87,90,93,96,99,102,106,72,74,78,81,86,89,92,95,98,101',
'105,71,73,77,80,85,88,91,94,97,100,104,,,76,79,75,,83,,,,,,,,,,,,,,',
',,,,,,,84,,,,,,103,,,,,,,,,,,,,,,82,87,90,93,96,99,102,106,72,74,78',
'81,86,89,92,95,98,101,105,71,73,77,80,85,88,91,94,97,100,104,,,76,79',
'75,,83,,,,,,,,,,,,,,,,,,,,,,84,,,,,,103,,,,,,,108,,,,,,,,82,87,90,93',
'96,99,102,106,72,74,78,81,86,89,92,95,98,101,105,71,73,77,80,85,88,91',
'94,97,100,104,,,76,79,75,,83,,,,,,,,,,,,,,,,,,,,,,84,,,,,,103,,,,,,',
',,,,,,,,82,87,90,93,96,99,102,106,72,74,78,81,86,89,92,95,98,101,105',
'71,73,77,80,85,88,91,94,97,100,104,,,76,79,75,,83,,,,,,,,,,,,,,,,,,',
',,,84,,,,,,103,,,,,,,,,,,,,,,82,87,90,93,96,99,102,106,72,74,78,81,86',
'89,92,95,98,101,105,71,73,77,80,85,88,91,94,97,100,104,,,76,79,75,,83',
',,,,,,,,,,,,,,,,,,,,,84,,,,,,103,,,,,,,,,,,,,,,82,87,90,93,96,99,102',
'106,72,74,78,81,86,89,92,95,98,101,105,71,73,77,80,85,88,91,94,97,100',
'104,,,76,79,75,,83,,,,,,,,,,,,,,,,,,,,,,84,,,,,,103,,,,,,,,,,,,,,,82',
'87,90,93,96,99,102,106,72,74,78,81,86,89,92,95,98,101,105,71,73,77,80',
'85,88,91,94,97,100,104,218,,76,79,75,,83,,,,,,,,,,,,,,,,,,,,,,84,,,',
',,103,,,,,,,108,,,,,,,,82,87,90,93,96,99,102,106,72,74,78,81,86,89,92',
'95,98,101,105,71,73,77,80,85,88,91,94,97,100,104,,,76,79,75,,83,,,,',
',,,,,,,,,,,,,,,,,84,,,,,,103,,,,,,,220,,,,,,,,82,87,90,93,96,99,102',
'106,72,74,78,81,86,89,92,95,98,101,105,71,73,77,80,85,88,91,94,97,100',
'104,,,76,79,75,,83,,,,,,,,,,,,,,,,,,,,,,84,,,,,,103,,,,,,,,,,,,,,,82',
'87,90,93,96,99,102,106,72,74,78,81,86,89,92,95,98,101,105,71,73,77,80',
'85,88,91,94,97,100,104,,,76,79,75,,83,,,,,,,,,,,,,,,,,,,,,,84,,,,,,103',
',,,,,,,,,,,,,,82,87,90,93,96,99,102,106,72,74,78,81,86,89,92,95,98,101',
'105,71,73,77,80,85,88,91,94,97,100,104,75,,83,,,,,,,,,,,,,,,,,,,,,,84',
',,,,,103,,,,,,,,,,,,,,,82,87,90,93,96,99,102,106,72,74,78,81,86,89,92',
'95,98,101,105,71,73,77,80,85,88,91,94,97,100,104,75,,83,,,,,,,,,,,,',
',,,,,,,,,84,,,,,,103,,,,,,,,,,,,,,,82,87,90,93,96,99,102,106,72,74,78',
'81,86,89,92,95,98,101,105,71,73,77,80,85,88,91,94,97,100,104,84,,,,264',
',103,,,,,,,,,,,,,,,82,87,90,93,96,99,102,106,72,74,78,81,86,89,92,95',
'98,101,105,71,73,77,80,85,88,91,94,97,100,104,84,,,,,,103,,,,,,,,,,',
',,,,82,87,90,93,96,99,102,106,72,74,78,81,86,89,92,95,98,101,105,71',
'73,77,80,85,88,91,94,97,100,104,84,,,,,,103,,,,,,,,,,,,,,,82,87,90,93',
'96,99,102,106,72,74,78,81,86,89,92,95,98,101,105,71,73,77,80,85,88,91',
'94,97,100,104,84,,,,,,103,,,,,,,,,,,,,,,82,87,90,93,96,99,102,106,72',
'74,78,81,86,89,92,95,98,101,105,71,73,77,80,85,88,91,94,97,100,104,84',
',,,,,103,,,,,,,,,,,,,,,82,87,90,93,96,99,102,106,72,74,78,81,86,89,92',
'95,98,101,105,71,73,77,80,85,88,91,94,97,100,104,103,,,,,,,,,,,,,,,82',
'87,90,93,96,99,102,106,72,74,78,81,86,89,92,95,98,101,105,71,73,77,80',
'85,88,91,94,97,100,104,103,,,,,,,,,,,,,,,82,87,90,93,96,99,102,106,72',
'74,78,81,86,89,92,95,98,101,105,71,73,77,80,85,88,91,94,97,100,104,103',
',,,,,,,,,,,,,,82,87,90,93,96,99,102,106,72,74,78,81,86,89,92,95,98,101',
'105,71,73,77,80,85,88,91,94,97,100,104,82,87,90,93,96,99,102,106,72',
'74,78,81,86,89,92,95,98,101,105,71,73,77,80,85,88,91,94,97,100,104,82',
'87,90,93,96,99,102,106,72,74,78,81,86,89,92,95,98,101,105,71,73,77,80',
'85,88,91,94,97,100,104,82,87,90,93,96,99,102,106,72,74,78,81,86,89,92',
'95,98,101,105,71,73,77,80,85,88,91,94,97,100,104,82,87,90,93,96,99,102',
'106,72,74,78,81,86,89,92,95,98,101,105,71,73,77,80,85,88,91,94,97,100',
'104,82,87,90,93,96,99,102,106,72,74,78,81,86,89,92,95,98,101,105,71',
'73,77,80,85,88,91,94,97,100,104' ]
        racc_action_table = arr = Array.new(8090, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'148,198,148,113,113,113,113,113,113,113,113,113,113,213,213,213,207',
'228,228,228,195,213,113,113,148,228,200,200,200,197,148,218,220,124',
'200,237,113,6,157,220,6,150,150,198,198,148,148,148,148,148,148,148',
'148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148',
'148,148,148,148,148,148,157,31,148,148,5,238,159,203,113,146,113,58',
'113,148,58,58,58,58,58,58,58,58,58,58,5,158,58,58,58,58,178,178,58,58',
'58,58,253,58,58,196,58,222,58,58,217,117,58,58,114,222,125,45,58,58',
'58,58,58,58,58,45,223,143,58,253,276,276,84,5,223,212,253,31,222,253',
'5,31,159,203,5,146,159,203,45,146,45,118,217,217,217,173,58,223,126',
'126,58,158,58,0,58,158,0,0,0,0,0,0,0,0,0,0,225,139,0,0,0,0,63,118,0',
'0,0,0,61,0,0,59,0,142,0,0,28,143,0,0,18,143,223,223,0,0,0,0,0,0,0,138',
'138,138,0,154,257,138,225,225,225,67,67,269,257,186,186,186,186,186',
'186,186,186,186,186,186,186,186,134,134,107,107,0,0,0,152,0,257,0,145',
'0,4,145,145,145,145,145,145,145,145,145,145,129,129,145,145,145,145',
'136,136,145,145,145,145,141,145,145,210,145,277,145,145,141,,145,145',
'145,181,181,,145,145,145,145,145,145,145,130,130,130,145,130,184,184',
',141,,141,183,183,183,183,183,183,183,183,183,183,183,183,183,194,194',
'194,194,194,194,194,145,121,121,,145,,145,151,145,,151,151,151,151,151',
'151,151,151,151,151,123,123,151,151,151,151,,,151,151,151,151,,151,151',
',151,,151,151,,,151,151,151,,,,151,151,151,151,151,151,151,,,,151,176',
'176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176',
'176,176,176,187,187,187,187,187,,151,,,,151,,151,160,151,,160,160,160',
'160,160,160,160,160,160,160,,,160,160,160,160,,,160,160,160,160,,160',
'160,,160,,160,160,,,160,160,,,,,160,160,160,160,160,160,160,,,,160,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,190,190,190,190,190,,160,,,,160,,160,7,160,,7,7,7,7,7,7',
'7,7,7,7,,,7,7,7,7,,,7,7,7,7,,7,7,,7,,7,7,,,7,7,,,,,7,7,7,7,7,7,7,,,',
'7,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170',
'170,170,170,170,,,,,,,7,,,,7,,7,13,7,,13,13,13,13,13,13,13,13,13,13',
',,13,13,13,13,,,13,13,13,13,,13,13,,13,,13,13,,,13,13,,,,,13,13,13,13',
'13,13,13,,,,13,163,163,163,163,163,163,163,163,163,163,163,163,163,163',
'163,163,163,163,163,163,163,,,,,,,13,,,,13,,13,15,13,,15,15,15,15,15',
'15,15,15,15,15,,,15,15,15,15,,,15,15,15,15,,15,15,,15,,15,15,,,15,15',
',,,,15,15,15,15,15,15,15,,,,15,189,189,189,189,189,189,189,189,189,189',
'189,189,189,189,189,189,189,189,189,189,189,,,,,,,15,,,,15,,15,131,15',
',131,131,131,131,131,131,131,131,131,131,,,131,131,131,131,,,131,131',
'131,131,,131,131,,131,,131,131,,,131,131,131,,,,131,131,131,131,131',
'131,131,,,,131,161,161,161,161,161,161,161,161,161,161,161,161,161,161',
'161,161,161,161,161,161,161,,,,,,,131,,,,131,,131,25,131,,25,25,25,25',
'25,25,25,25,25,25,,,25,25,25,25,,,25,25,25,25,,25,25,,25,,25,25,,,25',
'25,,,,,25,25,25,25,25,25,25,,,,25,174,174,174,174,174,174,174,174,174',
'174,174,174,174,174,174,174,174,174,174,174,174,,,,,,,25,,,,25,,25,266',
'25,,266,266,266,266,266,266,266,266,266,266,,,266,266,266,266,,,266',
'266,266,266,,266,266,,266,,266,266,,,266,266,,,,,266,266,266,266,266',
'266,266,,,,266,167,167,167,167,167,167,167,167,167,167,167,167,167,167',
'167,167,167,167,167,167,167,,,,,,,266,,,,266,,266,30,266,,30,30,30,30',
'30,30,30,30,30,30,,,30,30,30,30,,,30,30,30,30,,30,30,,30,,30,30,,,30',
'30,,,,,30,30,30,30,30,30,30,,,,30,177,177,177,177,177,177,177,177,177',
'177,177,177,177,180,180,180,180,180,180,180,180,180,180,180,180,180',
',30,,,,30,,30,127,30,,127,127,127,127,127,127,127,127,127,127,,,127',
'127,127,127,,,127,127,127,127,,127,127,,127,,127,127,,,127,127,127,',
',,127,127,127,127,127,127,127,,,,127,171,171,171,171,171,171,171,171',
'171,171,168,168,168,168,168,168,168,168,168,168,164,164,164,164,164',
'164,164,127,,,,127,,127,34,127,,34,34,34,34,34,34,34,34,34,34,,,34,34',
'34,34,,,34,34,34,34,,34,34,,34,,34,34,,,34,34,,,,,34,34,34,34,34,34',
'34,,,,34,175,175,175,175,175,175,175,175,175,175,162,162,162,162,162',
'162,162,,,,,,,,,,,34,,,,34,,34,36,34,,36,36,36,36,36,36,36,36,36,36',
',,36,36,36,36,,,36,36,36,36,,36,36,,36,,36,36,,,36,36,36,,,,36,36,36',
'36,36,36,36,,,,36,,,,,,,,,,,,,,,,,,,,,,,,,,,,36,,,,36,,36,37,36,,37',
'37,37,37,37,37,37,37,37,37,,,37,37,37,37,,,37,37,37,37,,37,37,,37,,37',
'37,,,37,37,,,,,37,37,37,37,37,37,37,,,,37,,,,,,,,,,,,,,,,,,,,,,,,,,',
',37,,,,37,,37,39,37,,39,39,39,39,39,39,39,39,39,39,,,39,39,39,39,,,39',
'39,39,39,,39,39,,39,,39,39,,,39,39,,,,,39,39,39,39,39,39,39,,,,39,,',
',,,,,,,,,,,,,,,,,,,,,,,,,39,,,,39,,39,40,39,,40,40,40,40,40,40,40,40',
'40,40,,,40,40,40,40,,,40,40,40,40,,40,40,,40,,40,40,,,40,40,,,,,40,40',
'40,40,40,40,40,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,,,,40,,,,40,,40,43,40,',
'43,43,43,43,43,43,43,43,43,43,,,43,43,43,43,,,43,43,43,43,,43,43,,43',
',43,43,,,43,43,,,,,43,43,43,43,43,43,43,,,,43,,,,,,,,,,,,,,,,,,,,,,',
',,,,,43,,,,43,,43,211,43,,211,211,211,211,211,211,211,211,211,211,,',
'211,211,211,211,,,211,211,211,211,,211,211,,211,,211,211,,,211,211,',
',,,211,211,211,211,211,211,211,,,,211,,,,,,,,,,,,,,,,,,,,,,,,,,,,211',
',,,211,,211,214,211,,214,214,214,214,214,214,214,214,214,214,,,214,214',
'214,214,,,214,214,214,214,,214,214,,214,,214,214,,,214,214,,,,,214,214',
'214,214,214,214,214,,,,214,,,,,,,,,,,,,,,,,,,,,,,,,,,,214,,,,214,,214',
'49,214,,49,49,49,49,49,49,49,49,49,49,,,49,49,49,49,,,49,49,49,49,,49',
'49,,49,,49,49,,,49,49,,,,,49,49,49,49,49,49,49,,,,49,,,,,,,,,,,,,,,',
',,,,,,,,,,,,49,,,,49,,49,54,49,,54,54,54,54,54,54,54,54,54,54,,,54,54',
'54,54,,,54,54,54,54,,54,54,,54,,54,54,,,54,54,,,,,54,54,54,54,54,54',
'54,,,,54,,,,,,,,,,,,,,,,,,,,,,,,,,,,54,,,,54,,54,57,54,,57,57,57,57',
'57,57,57,57,57,57,,,57,57,57,57,,,57,57,57,57,,57,57,,57,,57,57,,,57',
'57,,,,,57,57,57,57,57,57,57,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,,,,57',
',57,1,57,,1,1,1,1,1,1,1,1,1,1,,,1,1,1,1,,,1,1,1,1,,1,1,,1,,1,1,,,1,1',
',,,,1,1,1,1,1,1,1,,,,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,1,,,,1,,1,112,1,,112',
'112,112,112,112,112,112,112,112,112,,,112,112,112,112,,,112,112,112',
'112,,112,112,,112,,112,112,,,112,112,,,,,112,112,112,112,112,112,112',
',,,112,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,,,,112,,112,215,112,,215,215,215',
'215,215,215,215,215,215,215,,,215,215,215,215,,,215,215,215,215,,215',
'215,,215,,215,215,,,215,215,,,,,215,215,215,215,215,215,215,,,,215,',
',,,,,,,,,,,,,,,,,,,,,,,,,,215,215,215,,215,,215,224,215,,224,224,224',
'224,224,224,224,224,224,224,,,224,224,224,224,,,224,224,224,224,,224',
'224,,224,,224,224,,,224,224,,,,,224,224,224,224,224,224,224,,,,224,',
',,,,,,,,,,,,,,,,,,,,,,,,,,224,,,,224,,224,226,224,,226,226,226,226,226',
'226,226,226,226,226,,,226,226,226,226,,,226,226,226,226,,226,226,,226',
',226,226,,,226,226,,,,,226,226,226,226,226,226,226,,,,226,,,,,,,,,,',
',,,,,,,,,,,,,,,,,226,,,,226,,226,252,226,,252,252,252,252,252,252,252',
'252,252,252,,,252,252,252,252,,,252,252,252,252,,252,252,,252,,252,252',
',,252,252,,,,,252,252,252,252,252,252,252,,,,252,,,,,,,,,,,,,,,,,,,',
',,,,,,,,252,,,,252,,252,115,252,,115,115,115,115,115,115,115,115,115',
'115,,,115,115,115,115,,,115,115,115,115,,115,115,,115,,115,115,,,115',
'115,,,,,115,115,115,115,115,115,115,,,,115,,,,,,,,,,,,,,,,,,,,,,,,,',
',,115,,,,115,,115,71,115,,71,71,71,71,71,71,71,71,71,71,,,71,71,71,71',
',,71,71,71,71,,71,71,,71,,71,71,,,71,71,,,,,71,71,71,71,71,71,71,,,',
'71,,,,,,,,,,,,,,,,,,,,,,,,,,,,71,,,,71,,71,72,71,,72,72,72,72,72,72',
'72,72,72,72,,,72,72,72,72,,,72,72,72,72,,72,72,,72,,72,72,,,72,72,,',
',,72,72,72,72,72,72,72,,,,72,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,,,,72,,72',
'73,72,,73,73,73,73,73,73,73,73,73,73,,,73,73,73,73,,,73,73,73,73,,73',
'73,,73,,73,73,,,73,73,,,,,73,73,73,73,73,73,73,,,,73,,,,,,,,,,,,,,,',
',,,,,,,,,,,,73,,,,73,,73,74,73,,74,74,74,74,74,74,74,74,74,74,,,74,74',
'74,74,,,74,74,74,74,,74,74,,74,,74,74,,,74,74,,,,,74,74,74,74,74,74',
'74,,,,74,,,,,,,,,,,,,,,,,,,,,,,,,,,,74,,,,74,,74,75,74,,75,75,75,75',
'75,75,75,75,75,75,,,75,75,75,75,,,75,75,75,75,,75,75,,75,,75,75,,,75',
'75,,,,,75,75,75,75,75,75,75,,,,75,,,,,,,,,,,,,,,,,,,,,,,,,,,,75,,,,75',
',75,76,75,,76,76,76,76,76,76,76,76,76,76,,,76,76,76,76,,,76,76,76,76',
',76,76,,76,,76,76,,,76,76,,,,,76,76,76,76,76,76,76,,,,76,,,,,,,,,,,',
',,,,,,,,,,,,,,,,76,,,,76,,76,77,76,,77,77,77,77,77,77,77,77,77,77,,',
'77,77,77,77,,,77,77,77,77,,77,77,,77,,77,77,,,77,77,,,,,77,77,77,77',
'77,77,77,,,,77,,,,,,,,,,,,,,,,,,,,,,,,,,,,77,,,,77,,77,78,77,,78,78',
'78,78,78,78,78,78,78,78,,,78,78,78,78,,,78,78,78,78,,78,78,,78,,78,78',
',,78,78,,,,,78,78,78,78,78,78,78,,,,78,,,,,,,,,,,,,,,,,,,,,,,,,,,,78',
',,,78,,78,79,78,,79,79,79,79,79,79,79,79,79,79,,,79,79,79,79,,,79,79',
'79,79,,79,79,,79,,79,79,,,79,79,,,,,79,79,79,79,79,79,79,,,,79,,,,,',
',,,,,,,,,,,,,,,,,,,,,,79,,,,79,,79,80,79,,80,80,80,80,80,80,80,80,80',
'80,,,80,80,80,80,,,80,80,80,80,,80,80,,80,,80,80,,,80,80,,,,,80,80,80',
'80,80,80,80,,,,80,,,,,,,,,,,,,,,,,,,,,,,,,,,,80,,,,80,,80,81,80,,81',
'81,81,81,81,81,81,81,81,81,,,81,81,81,81,,,81,81,81,81,,81,81,,81,,81',
'81,,,81,81,,,,,81,81,81,81,81,81,81,,,,81,,,,,,,,,,,,,,,,,,,,,,,,,,',
',81,,,,81,,81,83,81,,83,83,83,83,83,83,83,83,83,83,,,83,83,83,83,,,83',
'83,83,83,,83,83,,83,,83,83,,,83,83,,,,,83,83,83,83,83,83,83,,,,83,,',
',,,,,,,,,,,,,,,,,,,,,,,,,83,,,,83,,83,250,83,,250,250,250,250,250,250',
'250,250,250,250,,,250,250,250,250,,,250,250,250,250,,250,250,,250,,250',
'250,,,250,250,,,,,250,250,250,250,250,250,250,,,,250,,,,,,,,,,,,,,,',
',,,,,,,,250,,,,250,,,,250,,250,85,250,,85,85,85,85,85,85,85,85,85,85',
',,85,85,85,85,,,85,85,85,85,,85,85,,85,,85,85,,,85,85,,,,,85,85,85,85',
'85,85,85,,,,85,,,,,,,,,,,,,,,,,,,,,,,,,,,,85,,,,85,,85,86,85,,86,86',
'86,86,86,86,86,86,86,86,,,86,86,86,86,,,86,86,86,86,,86,86,,86,,86,86',
',,86,86,,,,,86,86,86,86,86,86,86,,,,86,,,,,,,,,,,,,,,,,,,,,,,,,,,,86',
',,,86,,86,88,86,,88,88,88,88,88,88,88,88,88,88,,,88,88,88,88,,,88,88',
'88,88,,88,88,,88,,88,88,,,88,88,,,,,88,88,88,88,88,88,88,,,,88,,,,,',
',,,,,,,,,,,,,,,,,,,,,,88,,,,88,,88,89,88,,89,89,89,89,89,89,89,89,89',
'89,,,89,89,89,89,,,89,89,89,89,,89,89,,89,,89,89,,,89,89,,,,,89,89,89',
'89,89,89,89,,,,89,,,,,,,,,,,,,,,,,,,,,,,,,,,,89,,,,89,,89,90,89,,90',
'90,90,90,90,90,90,90,90,90,,,90,90,90,90,,,90,90,90,90,,90,90,,90,,90',
'90,,,90,90,,,,,90,90,90,90,90,90,90,,,,90,,,,,,,,,,,,,,,,,,,,,,,,,,',
',90,,,,90,,90,91,90,,91,91,91,91,91,91,91,91,91,91,,,91,91,91,91,,,91',
'91,91,91,,91,91,,91,,91,91,,,91,91,,,,,91,91,91,91,91,91,91,,,,91,,',
',,,,,,,,,,,,,,,,,,,,,,,,,91,,,,91,,91,92,91,,92,92,92,92,92,92,92,92',
'92,92,,,92,92,92,92,,,92,92,92,92,,92,92,,92,,92,92,,,92,92,,,,,92,92',
'92,92,92,92,92,,,,92,,,,,,,,,,,,,,,,,,,,,,,,,,,,92,,,,92,,92,93,92,',
'93,93,93,93,93,93,93,93,93,93,,,93,93,93,93,,,93,93,93,93,,93,93,,93',
',93,93,,,93,93,,,,,93,93,93,93,93,93,93,,,,93,,,,,,,,,,,,,,,,,,,,,,',
',,,,,93,,,,93,,93,94,93,,94,94,94,94,94,94,94,94,94,94,,,94,94,94,94',
',,94,94,94,94,,94,94,,94,,94,94,,,94,94,,,,,94,94,94,94,94,94,94,,,',
'94,,,,,,,,,,,,,,,,,,,,,,,,,,,,94,,,,94,,94,95,94,,95,95,95,95,95,95',
'95,95,95,95,,,95,95,95,95,,,95,95,95,95,,95,95,,95,,95,95,,,95,95,,',
',,95,95,95,95,95,95,95,,,,95,,,,,,,,,,,,,,,,,,,,,,,,,,,,95,,,,95,,95',
'96,95,,96,96,96,96,96,96,96,96,96,96,,,96,96,96,96,,,96,96,96,96,,96',
'96,,96,,96,96,,,96,96,,,,,96,96,96,96,96,96,96,,,,96,,,,,,,,,,,,,,,',
',,,,,,,,,,,,96,,,,96,,96,97,96,,97,97,97,97,97,97,97,97,97,97,,,97,97',
'97,97,,,97,97,97,97,,97,97,,97,,97,97,,,97,97,,,,,97,97,97,97,97,97',
'97,,,,97,,,,,,,,,,,,,,,,,,,,,,,,,,,,97,,,,97,,97,98,97,,98,98,98,98',
'98,98,98,98,98,98,,,98,98,98,98,,,98,98,98,98,,98,98,,98,,98,98,,,98',
'98,,,,,98,98,98,98,98,98,98,,,,98,,,,,,,,,,,,,,,,,,,,,,,,,,,,98,,,,98',
',98,99,98,,99,99,99,99,99,99,99,99,99,99,,,99,99,99,99,,,99,99,99,99',
',99,99,,99,,99,99,,,99,99,,,,,99,99,99,99,99,99,99,,,,99,,,,,,,,,,,',
',,,,,,,,,,,,,,,,99,,,,99,,99,100,99,,100,100,100,100,100,100,100,100',
'100,100,,,100,100,100,100,,,100,100,100,100,,100,100,,100,,100,100,',
',100,100,,,,,100,100,100,100,100,100,100,,,,100,,,,,,,,,,,,,,,,,,,,',
',,,,,,,100,,,,100,,100,101,100,,101,101,101,101,101,101,101,101,101',
'101,,,101,101,101,101,,,101,101,101,101,,101,101,,101,,101,101,,,101',
'101,,,,,101,101,101,101,101,101,101,,,,101,,,,,,,,,,,,,,,,,,,,,,,,,',
',,101,,,,101,,101,102,101,,102,102,102,102,102,102,102,102,102,102,',
',102,102,102,102,,,102,102,102,102,,102,102,,102,,102,102,,,102,102',
',,,,102,102,102,102,102,102,102,,,,102,,,,,,,,,,,,,,,,,,,,,,,,,,,,102',
',,,102,,102,103,102,,103,103,103,103,103,103,103,103,103,103,,,103,103',
'103,103,,,103,103,103,103,,103,103,,103,,103,103,,,103,103,,,,,103,103',
'103,103,103,103,103,,,,103,,,,,,,,,,,,,,,,,,,,,,,,,,,,103,,,,103,,103',
'104,103,,104,104,104,104,104,104,104,104,104,104,,,104,104,104,104,',
',104,104,104,104,,104,104,,104,,104,104,,,104,104,,,,,104,104,104,104',
'104,104,104,,,,104,,,,,,,,,,,,,,,,,,,,,,,,,,,,104,,,,104,,104,105,104',
',105,105,105,105,105,105,105,105,105,105,,,105,105,105,105,,,105,105',
'105,105,,105,105,,105,,105,105,,,105,105,,,,,105,105,105,105,105,105',
'105,,,,105,,,,,,,,,,,,,,,,,,,,,,,,,,,,105,,,,105,,105,106,105,,106,106',
'106,106,106,106,106,106,106,106,,,106,106,106,106,,,106,106,106,106',
',106,106,,106,,106,106,,,106,106,,,,,106,106,106,106,106,106,106,,,',
'106,,,,,,,,,,,,,,,,,,,,,,,,,,,,106,,,,106,,106,248,106,,248,248,248',
'248,248,248,248,248,248,248,,,248,248,248,248,,,248,248,248,248,,248',
'248,,248,,248,248,,,248,248,,,,,248,248,248,248,248,248,248,,,,248,',
',,,,,,,,,,,,,,,,,,,,,,,,,,248,,,,248,,248,108,248,,108,108,108,108,108',
'108,108,108,108,108,,,108,108,108,108,,,108,108,108,108,,108,108,,108',
',108,108,,,108,108,,108,,,108,108,108,108,108,108,108,,,,108,,,,,,,',
',,,,,,,,,,,,,,,,,,,,108,,,,108,,108,109,108,,109,109,109,109,109,109',
'109,109,109,109,,,109,109,109,109,,,109,109,109,109,,109,109,,109,,109',
'109,,,109,109,109,,,,109,109,109,109,109,109,109,,,,109,,,,,,,,,,,,',
',,,,,,,,,,,,,,,109,,,,109,,109,264,109,,264,264,264,264,264,264,264',
'264,264,264,,,264,264,264,264,,,264,264,264,264,,264,264,,264,,264,264',
',,264,264,,,,,264,264,264,264,264,264,264,274,,274,264,,,,66,66,66,66',
'66,66,66,66,66,66,,,,,,,,274,,66,66,,,274,264,,,,264,,264,,264,66,,',
',,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274,274',
'274,274,274,274,274,274,274,274,274,274,274,274,274,,,274,274,205,,205',
',,274,,,66,,66,,66,,,,,,,,,,,,205,,,,,,205,,,,,,,,,,,,,,,205,205,205',
'205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205,205',
'205,205,205,205,205,205,205,205,205,205,205,,205,205,267,,267,,,205',
'47,47,47,47,47,47,47,47,47,47,,,47,,,,,,267,47,47,,,,267,,,,,,,,,47',
',,,,,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267',
'267,267,267,267,267,267,267,267,267,267,267,267,267,267,,,267,267,119',
',119,,,267,,47,,47,,47,,,,,,,,,,,,,119,,,,,,119,,,,,,,119,,,,,,,,119',
'119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119',
'119,119,119,119,119,119,119,119,119,119,119,119,,,119,119,258,,258,',
',,,,,,,,,,,,,,,,,,,,258,,,,,,258,,,,,,,,,,,,,,,258,258,258,258,258,258',
'258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258',
'258,258,258,258,258,258,258,,,258,258,247,,247,,,,,,,,,,,,,,,,,,,,,',
'247,,,,,,247,,,,,,,,,,,,,,,247,247,247,247,247,247,247,247,247,247,247',
'247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247,247',
'247,247,,,247,247,260,,260,,,,,,,,,,,,,,,,,,,,,,260,,,,,,260,,,,,,,',
',,,,,,,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260',
'260,260,260,260,260,260,260,260,260,260,260,260,260,260,,,260,260,234',
',234,,,,,,,,,,,,,,,,,,,,,,234,,,,,,234,,,,,,,,,,,,,,,234,234,234,234',
'234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234',
'234,234,234,234,234,234,234,234,234,,,234,234,265,,265,,,,,,,,,,,,,',
',,,,,,,,265,,,,,,265,,,,,,,,,,,,,,,265,265,265,265,265,265,265,265,265',
'265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265,265',
'265,265,265,265,,,265,265,268,,268,,,,,,,,,,,,,,,,,,,,,,268,,,,,,268',
',,,,,,268,,,,,,,,268,268,268,268,268,268,268,268,268,268,268,268,268',
'268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268',
',,268,268,246,,246,,,,,,,,,,,,,,,,,,,,,,246,,,,,,246,,,,,,,,,,,,,,,246',
'246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246,246',
'246,246,246,246,246,246,246,246,246,246,246,246,,,246,246,201,,201,',
',,,,,,,,,,,,,,,,,,,,201,,,,,,201,,,,,,,,,,,,,,,201,201,201,201,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,201,201,201,201,201,201,,,201,201,70,,70,,,,,,,,,,,,,,,,,,,,,,70',
',,,,,70,,,,,,,,,,,,,,,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70',
'70,70,70,70,70,70,70,70,70,70,70,70,70,70,,,70,70,132,,132,,,,,,,,,',
',,,,,,,,,,,,132,,,,,,132,,,,,,,,,,,,,,,132,132,132,132,132,132,132,132',
'132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132',
'132,132,132,132,132,132,,132,132,133,,133,,,,,,,,,,,,,,,,,,,,,,133,',
',,,,133,,,,,,,133,,,,,,,,133,133,133,133,133,133,133,133,133,133,133',
'133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133',
'133,133,,,133,133,135,,135,,,,,,,,,,,,,,,,,,,,,,135,,,,,,135,,,,,,,135',
',,,,,,,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135',
'135,135,135,135,135,135,135,135,135,135,135,135,135,135,,,135,135,2',
',2,,,,,,,,,,,,,,,,,,,,,,2,,,,,,2,,,,,,,,,,,,,,,2,2,2,2,2,2,2,2,2,2,2',
'2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,,,2,2,166,,166,,,,,,,,,,,,,,,',
',,,,,,166,,,,,,166,,,,,,,,,,,,,,,166,166,166,166,166,166,166,166,166',
'166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166',
'166,166,166,166,169,,169,,,,,,,,,,,,,,,,,,,,,,169,,,,,,169,,,,,,,,,',
',,,,,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169,169',
'169,169,169,169,169,169,169,169,169,169,169,169,169,169,202,,202,,,',
',,,,,,,,,,,,,,,,,,202,,,,,,202,,,,,,,,,,,,,,,202,202,202,202,202,202',
'202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,202,202,202,202,243,,,,243,,243,,,,,,,,,,,,,,,243,243,243',
'243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243',
'243,243,243,243,243,243,243,243,243,243,165,,,,,,165,,,,,,,,,,,,,,,165',
'165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165',
'165,165,165,165,165,165,165,165,165,165,165,165,273,,,,,,273,,,,,,,',
',,,,,,,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273',
'273,273,273,273,273,273,273,273,273,273,273,273,273,273,120,,,,,,120',
',,,,,,,,,,,,,,120,120,120,120,120,120,120,120,120,120,120,120,120,120',
'120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,172',
',,,,,172,,,,,,,,,,,,,,,172,172,172,172,172,172,172,172,172,172,172,172',
'172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172',
'172,147,,,,,,,,,,,,,,,147,147,147,147,147,147,147,147,147,147,147,147',
'147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147',
'147,149,,,,,,,,,,,,,,,149,149,149,149,149,149,149,149,149,149,149,149',
'149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149',
'149,191,,,,,,,,,,,,,,,191,191,191,191,191,191,191,191,191,191,191,191',
'191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191,191',
'191,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185',
'185,185,185,185,185,185,185,185,185,185,185,185,185,185,188,188,188',
'188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188,188',
'188,188,188,188,188,188,188,188,188,188,192,192,192,192,192,192,192',
'192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192',
'192,192,192,192,192,192,179,179,179,179,179,179,179,179,179,179,179',
'179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179',
'179,179,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182',
'182,182,182,182,182,182,182,182,182,182,182,182,182,182,182' ]
        racc_action_check = arr = Array.new(8090, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   170,  2148,  7244,   nil,   221,    64,   -44,   514,   nil,   nil,
   nil,   nil,   nil,   600,   nil,   686,   nil,   nil,   170,   nil,
   nil,   nil,   nil,   nil,   nil,   858,   nil,   nil,   191,   nil,
  1030,    61,   nil,   nil,  1202,   nil,  1288,  1374,   nil,  1460,
  1546,   nil,   nil,  1632,   nil,   120,   nil,  6141,   nil,  1890,
   nil,   nil,   nil,   nil,  1976,   nil,   nil,  2062,    84,   111,
   nil,   197,   nil,   188,   nil,   nil,  5984,   148,   nil,   nil,
  6928,  2750,  2836,  2922,  3008,  3094,  3180,  3266,  3352,  3438,
  3524,  3610,   nil,  3696,   127,  3868,  3954,   nil,  4040,  4126,
  4212,  4298,  4384,  4470,  4556,  4642,  4728,  4814,  4900,  4986,
  5072,  5158,  5244,  5330,  5416,  5502,  5588,   228,  5760,  5846,
   nil,   nil,  2234,    -2,   109,  2664,   nil,    81,   143,  6217,
  7677,   291,   nil,   310,   -51,    98,   120,  1116,   nil,   224,
   224,   772,  7007,  7086,   200,  7165,   230,   nil,   138,   108,
   nil,   277,   124,   121,   nil,   256,    69,  7773,    -2,  7818,
    -6,   342,   254,   nil,   221,   nil,   nil,    36,    85,    66,
   428,   779,  1219,   607,  1143,  7575,  7323,   951,  1133,  7398,
   521,  1123,  7728,   137,   865,  1209,   349,  1037,    58,  7983,
  1050,   249,  8013,   270,   264,  7893,   187,   370,  7923,   693,
   456,  7863,  7953,   435,   283,   -19,    92,    15,   -39,   nil,
   -56,  6849,  7473,    67,   nil,  6059,   nil,    -1,   nil,   nil,
   272,  1718,   105,   -69,  1804,  2320,   nil,    79,   -46,   nil,
     2,   nil,   110,   129,  2406,   145,  2492,   nil,   -65,   nil,
   nil,   nil,   nil,   nil,  6533,   nil,   nil,    -4,    41,   nil,
   nil,   nil,   nil,  7524,   nil,   nil,  6770,  6375,  5674,   nil,
  3782,   nil,  2578,   108,   nil,   nil,   nil,   219,  6296,   nil,
  6454,   nil,   nil,   nil,  5932,  6612,   944,  6138,  6691,   193,
   nil,   nil,   nil,  7626,  5980,   nil,    57,   248,   nil,   nil,
   nil ]

racc_action_default = [
    -1,  -159,    -4,   -29,  -159,    -7,  -159,  -159,    -8,   -89,
    -9,   -96,   -97,  -159,   -10,  -159,   -98,   -27,  -159,   -31,
   -11,   -28,   -25,   -32,   -12,  -159,   -30,   -26,  -159,   -13,
  -159,  -112,   -33,   -14,  -159,   -34,  -122,  -159,   -15,  -159,
  -159,   -35,   -16,  -159,  -114,  -106,   -17,  -159,   -36,  -159,
   -18,   -37,   -19,   -38,  -159,   -20,   -94,  -159,  -159,  -159,
   -21,  -159,   -22,  -152,   -91,    -2,  -159,    -3,   -44,   -95,
   -43,  -159,  -159,  -159,  -159,  -159,  -159,  -159,  -159,  -159,
  -159,  -159,   -55,  -159,  -159,  -159,  -159,   -54,  -159,  -159,
  -159,  -159,  -159,  -159,  -159,  -159,  -159,  -159,  -159,  -159,
  -159,  -159,  -159,  -159,  -159,  -159,  -159,  -159,  -159,  -122,
  -103,  -102,  -159,  -159,  -159,  -159,   -99,  -159,  -159,  -159,
  -132,   -48,   -88,   -45,  -137,  -159,   -46,  -122,  -100,   -49,
  -159,  -122,  -123,  -159,   -51,  -159,   -50,   -42,  -159,  -159,
  -107,  -106,  -159,  -159,   -92,  -122,   -93,   -52,  -159,   -53,
   -47,  -122,  -159,  -150,  -152,  -154,  -156,  -159,  -113,  -159,
    -6,   -73,   -62,   -74,   -63,  -157,   -84,   -75,   -64,   -85,
   -76,   -65,  -158,  -159,   -77,   -66,   -78,   -67,   -56,   -79,
   -68,   -57,   -80,   -69,   -58,   -81,   -70,   -59,   -82,   -71,
   -60,   -86,   -83,   -72,   -61,  -159,  -128,  -159,  -159,   -24,
  -159,  -123,   -39,  -115,  -101,  -159,   -87,  -159,   -90,  -148,
  -159,  -159,  -159,  -159,  -159,  -159,  -121,  -159,  -159,  -134,
  -159,  -105,  -159,  -159,  -159,  -159,  -159,  -133,  -159,   281,
  -151,  -155,  -153,  -149,    -5,  -135,  -129,  -159,  -159,   -23,
  -116,  -104,  -138,  -139,  -136,  -117,  -125,  -124,  -159,  -127,
  -159,  -147,  -159,  -159,  -143,  -109,  -108,  -159,   -40,  -111,
   -41,  -118,  -130,  -131,  -159,  -126,  -159,  -159,  -159,  -159,
  -141,  -144,  -110,  -140,  -159,  -119,  -145,  -159,  -120,  -146,
  -142 ]

racc_goto_table = [
    65,   128,     2,    70,    67,   125,   107,   110,   200,   119,
   212,   255,   256,   138,   254,   120,    61,   121,   143,   196,
   122,   233,   253,   154,   137,   153,   213,   123,   208,   156,
   217,   155,   126,   110,   nil,   nil,   129,   158,   132,   133,
   nil,   134,   135,   nil,   nil,   136,   272,   271,   nil,   146,
   228,   147,   nil,   nil,   nil,   nil,   148,   nil,   235,   149,
   150,   173,   nil,   nil,   nil,   nil,   nil,   160,   159,   nil,
   nil,   nil,   nil,   161,   162,   163,   164,   165,   166,   167,
   168,   169,   170,   171,   143,   172,   nil,   174,   175,   nil,
   176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
   186,   187,   188,   189,   190,   191,   192,   193,   194,   225,
     2,   nil,   198,   128,   202,   203,   230,   205,   nil,   206,
   137,   209,   231,   nil,   nil,   nil,   nil,   nil,   128,   nil,
   nil,   nil,   nil,   nil,   nil,   219,   nil,   nil,   222,   nil,
   nil,   nil,   nil,   nil,   nil,   110,   nil,   nil,   110,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   232,
   110,   110,   234,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   236,   160,   251,
   nil,   137,   137,   nil,   nil,   110,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   243,   244,   248,   246,   247,   nil,   nil,
   nil,   nil,   nil,   257,   nil,   222,   258,   nil,   260,   nil,
   nil,   nil,   251,   nil,   nil,   nil,   137,   nil,   nil,   262,
   263,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   265,   nil,   267,   nil,   268,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   273,   nil,   274,   nil,
   276,   277,   nil,   nil,   nil,   nil,   279 ]

racc_goto_check = [
     2,    29,     4,     4,     3,    36,    21,     9,    34,     4,
    37,    23,    23,    32,    39,     4,     1,     4,    30,    35,
    21,    40,    38,    42,    20,    41,    34,     4,    25,    44,
    34,    43,     4,     9,   nil,   nil,     4,    30,     4,     4,
   nil,     4,     4,   nil,   nil,     4,    23,    39,   nil,     5,
    34,     4,   nil,   nil,   nil,   nil,     4,   nil,    37,     4,
     4,    36,   nil,   nil,   nil,   nil,   nil,     2,     5,   nil,
   nil,   nil,   nil,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,    30,     4,   nil,     4,     4,   nil,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,    32,
     4,   nil,     3,    29,     4,     5,    41,     4,   nil,    21,
    20,    21,    43,   nil,   nil,   nil,   nil,   nil,    29,   nil,
   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,     9,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,
     9,     9,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,     2,    20,
   nil,    20,    20,   nil,   nil,     9,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     4,    21,     2,     4,     4,   nil,   nil,
   nil,   nil,   nil,     2,   nil,     2,     4,   nil,     4,   nil,
   nil,   nil,    20,   nil,   nil,   nil,    20,   nil,   nil,    21,
    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     4,   nil,     4,   nil,     4,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,     4,   nil,
    21,    21,   nil,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,    16,     0,     4,     2,     2,   nil,   nil,   nil,     2,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -21,     2,   nil,  -211,   nil,   -90,   nil,   nil,   nil,   -30,
   -29,   nil,   -32,   nil,  -101,   -88,   -23,  -115,  -198,  -206,
  -136,   -38,   -40,   -32,   -34 ]

racc_goto_default = [
   nil,   nil,   214,   nil,   201,     5,     8,    10,    14,    20,
    24,    29,    33,    38,    42,    46,    50,    52,    55,    60,
    62,   nil,    69,   140,     6,     9,    11,    12,    16,   116,
    31,   111,   nil,    44,   130,   nil,   nil,   nil,   nil,   nil,
    63,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 92, :_reduce_1,
  1, 92, :_reduce_2,
  1, 92, :_reduce_3,
  1, 94, :_reduce_4,
  3, 94, :_reduce_5,
  2, 94, :_reduce_6,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  3, 112, :_reduce_23,
  2, 112, :_reduce_24,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 113, :_reduce_27,
  1, 113, :_reduce_28,
  1, 113, :_reduce_29,
  1, 113, :_reduce_30,
  1, 113, :_reduce_31,
  1, 113, :_reduce_32,
  1, 113, :_reduce_33,
  1, 113, :_reduce_34,
  1, 113, :_reduce_35,
  1, 113, :_reduce_36,
  1, 113, :_reduce_37,
  1, 113, :_reduce_38,
  3, 101, :_reduce_39,
  3, 114, :_reduce_40,
  3, 114, :_reduce_41,
  1, 114, :_reduce_42,
  2, 105, :_reduce_43,
  1, 111, :_reduce_44,
  2, 99, :_reduce_45,
  2, 99, :_reduce_46,
  2, 99, :_reduce_47,
  2, 99, :_reduce_48,
  2, 99, :_reduce_49,
  2, 99, :_reduce_50,
  2, 99, :_reduce_51,
  2, 99, :_reduce_52,
  2, 99, :_reduce_53,
  2, 99, :_reduce_54,
  2, 99, :_reduce_55,
  3, 99, :_reduce_56,
  3, 99, :_reduce_57,
  3, 99, :_reduce_58,
  3, 99, :_reduce_59,
  3, 99, :_reduce_60,
  3, 99, :_reduce_61,
  3, 99, :_reduce_62,
  3, 99, :_reduce_63,
  3, 99, :_reduce_64,
  3, 99, :_reduce_65,
  3, 99, :_reduce_66,
  3, 99, :_reduce_67,
  3, 99, :_reduce_68,
  3, 99, :_reduce_69,
  3, 99, :_reduce_70,
  3, 99, :_reduce_71,
  3, 99, :_reduce_72,
  3, 99, :_reduce_73,
  3, 99, :_reduce_74,
  3, 99, :_reduce_75,
  3, 99, :_reduce_76,
  3, 99, :_reduce_77,
  3, 99, :_reduce_78,
  3, 99, :_reduce_79,
  3, 99, :_reduce_80,
  3, 99, :_reduce_81,
  3, 99, :_reduce_82,
  3, 99, :_reduce_83,
  3, 99, :_reduce_84,
  3, 99, :_reduce_85,
  3, 99, :_reduce_86,
  3, 98, :_reduce_87,
  2, 98, :_reduce_88,
  1, 115, :_reduce_89,
  3, 115, :_reduce_90,
  1, 116, :_reduce_none,
  2, 116, :_reduce_92,
  2, 110, :_reduce_93,
  1, 96, :_reduce_94,
  1, 96, :_reduce_95,
  1, 96, :_reduce_96,
  1, 96, :_reduce_97,
  1, 96, :_reduce_98,
  2, 96, :_reduce_99,
  2, 96, :_reduce_100,
  2, 120, :_reduce_101,
  1, 120, :_reduce_102,
  1, 120, :_reduce_103,
  3, 122, :_reduce_104,
  3, 118, :_reduce_105,
  0, 123, :_reduce_106,
  1, 123, :_reduce_107,
  3, 123, :_reduce_108,
  3, 123, :_reduce_109,
  4, 123, :_reduce_110,
  3, 123, :_reduce_111,
  1, 97, :_reduce_112,
  2, 97, :_reduce_113,
  1, 97, :_reduce_114,
  3, 109, :_reduce_115,
  4, 121, :_reduce_116,
  4, 121, :_reduce_117,
  4, 124, :_reduce_118,
  6, 100, :_reduce_119,
  7, 100, :_reduce_120,
  3, 117, :_reduce_121,
  0, 125, :_reduce_122,
  1, 125, :_reduce_123,
  3, 125, :_reduce_124,
  3, 125, :_reduce_125,
  4, 125, :_reduce_126,
  3, 125, :_reduce_127,
  3, 103, :_reduce_128,
  4, 103, :_reduce_129,
  5, 103, :_reduce_130,
  3, 126, :_reduce_131,
  2, 104, :_reduce_132,
  3, 119, :_reduce_133,
  3, 106, :_reduce_134,
  4, 107, :_reduce_135,
  4, 107, :_reduce_136,
  1, 127, :_reduce_137,
  3, 127, :_reduce_138,
  2, 128, :_reduce_139,
  4, 128, :_reduce_140,
  5, 108, :_reduce_141,
  7, 108, :_reduce_142,
  1, 129, :_reduce_143,
  2, 129, :_reduce_144,
  3, 130, :_reduce_145,
  4, 130, :_reduce_146,
  1, 130, :_reduce_none,
  3, 131, :_reduce_148,
  2, 132, :_reduce_149,
  1, 133, :_reduce_150,
  2, 133, :_reduce_151,
  0, 134, :_reduce_152,
  2, 134, :_reduce_153,
  1, 135, :_reduce_154,
  2, 135, :_reduce_155,
  2, 102, :_reduce_156,
  3, 102, :_reduce_157,
  3, 102, :_reduce_158 ]

racc_reduce_n = 159

racc_shift_n = 281

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :UNLESS => 4,
  :NUMBER => 5,
  :STRING => 6,
  :REGEX => 7,
  :TRUE => 8,
  :FALSE => 9,
  :YES => 10,
  :NO => 11,
  :ON => 12,
  :OFF => 13,
  :IDENTIFIER => 14,
  :PROPERTY_ACCESS => 15,
  :CODE => 16,
  :PARAM => 17,
  :NEW => 18,
  :RETURN => 19,
  :TRY => 20,
  :CATCH => 21,
  :FINALLY => 22,
  :THROW => 23,
  :BREAK => 24,
  :CONTINUE => 25,
  :FOR => 26,
  :IN => 27,
  :WHILE => 28,
  :SWITCH => 29,
  :WHEN => 30,
  :DELETE => 31,
  :INSTANCEOF => 32,
  :TYPEOF => 33,
  :SUPER => 34,
  :EXTENDS => 35,
  :NEWLINE => 36,
  :COMMENT => 37,
  :JS => 38,
  :INDENT => 39,
  :OUTDENT => 40,
  :UMINUS => 41,
  :SPLAT => 42,
  :NOT => 43,
  "!" => 44,
  "!!" => 45,
  "~" => 46,
  "++" => 47,
  "--" => 48,
  "*" => 49,
  "/" => 50,
  "%" => 51,
  "+" => 52,
  "-" => 53,
  "<<" => 54,
  ">>" => 55,
  ">>>" => 56,
  "&" => 57,
  "|" => 58,
  "^" => 59,
  "<=" => 60,
  "<" => 61,
  ">" => 62,
  ">=" => 63,
  "==" => 64,
  "!=" => 65,
  :IS => 66,
  :ISNT => 67,
  "&&" => 68,
  "||" => 69,
  :AND => 70,
  :OR => 71,
  "-=" => 72,
  "+=" => 73,
  "/=" => 74,
  "*=" => 75,
  "%=" => 76,
  "." => 77,
  :ASSIGN => 78,
  "||=" => 79,
  "&&=" => 80,
  "=>" => 81,
  "\n" => 82,
  ";" => 83,
  "," => 84,
  "[" => 85,
  "]" => 86,
  "{" => 87,
  "}" => 88,
  "(" => 89,
  ")" => 90 }

racc_nt_base = 91

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "UNLESS",
  "NUMBER",
  "STRING",
  "REGEX",
  "TRUE",
  "FALSE",
  "YES",
  "NO",
  "ON",
  "OFF",
  "IDENTIFIER",
  "PROPERTY_ACCESS",
  "CODE",
  "PARAM",
  "NEW",
  "RETURN",
  "TRY",
  "CATCH",
  "FINALLY",
  "THROW",
  "BREAK",
  "CONTINUE",
  "FOR",
  "IN",
  "WHILE",
  "SWITCH",
  "WHEN",
  "DELETE",
  "INSTANCEOF",
  "TYPEOF",
  "SUPER",
  "EXTENDS",
  "NEWLINE",
  "COMMENT",
  "JS",
  "INDENT",
  "OUTDENT",
  "UMINUS",
  "SPLAT",
  "NOT",
  "\"!\"",
  "\"!!\"",
  "\"~\"",
  "\"++\"",
  "\"--\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\">>>\"",
  "\"&\"",
  "\"|\"",
  "\"^\"",
  "\"<=\"",
  "\"<\"",
  "\">\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "IS",
  "ISNT",
  "\"&&\"",
  "\"||\"",
  "AND",
  "OR",
  "\"-=\"",
  "\"+=\"",
  "\"/=\"",
  "\"*=\"",
  "\"%=\"",
  "\".\"",
  "ASSIGN",
  "\"||=\"",
  "\"&&=\"",
  "\"=>\"",
  "\"\\n\"",
  "\";\"",
  "\",\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Root",
  "Terminator",
  "Expressions",
  "Expression",
  "Value",
  "Call",
  "Code",
  "Operation",
  "Range",
  "Assign",
  "If",
  "Try",
  "Throw",
  "Return",
  "While",
  "For",
  "Switch",
  "Extends",
  "Splat",
  "Comment",
  "Block",
  "Literal",
  "AssignObj",
  "ParamList",
  "Param",
  "Array",
  "Object",
  "Parenthetical",
  "Accessor",
  "Invocation",
  "Index",
  "AssignList",
  "Super",
  "ArgList",
  "Catch",
  "ForVariables",
  "ForSource",
  "Whens",
  "When",
  "IfBlock",
  "ElsIf",
  "ElsIfs",
  "ElseBody",
  "IfEnd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 44)
  def _reduce_1(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_2(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 51)
  def _reduce_4(val, _values, result)
     result = Expressions.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_5(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_23(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_24(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_27(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_28(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_29(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_30(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_31(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_32(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_33(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_34(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_35(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_36(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_37(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_38(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_39(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_40(val, _values, result)
     result = AssignNode.new(ValueNode.new(val[0]), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_41(val, _values, result)
     result = AssignNode.new(ValueNode.new(LiteralNode.new(val[0])), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_42(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_43(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 122)
  def _reduce_44(val, _values, result)
     result = CommentNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_45(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 130)
  def _reduce_46(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 131)
  def _reduce_47(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_48(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_49(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 134)
  def _reduce_50(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_51(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 136)
  def _reduce_52(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_53(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_54(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_55(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_56(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_57(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_58(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_59(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 146)
  def _reduce_60(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_61(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_62(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 150)
  def _reduce_63(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_64(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 153)
  def _reduce_65(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 154)
  def _reduce_66(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_67(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 157)
  def _reduce_68(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_69(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_70(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 161)
  def _reduce_71(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_72(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_73(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_74(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_75(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_76(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_77(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_78(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_79(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_80(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_81(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_82(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_83(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_84(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_85(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_86(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_87(val, _values, result)
     result = CodeNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_88(val, _values, result)
     result = CodeNode.new([], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 190)
  def _reduce_89(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_90(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'grammar.y', 196)
  def _reduce_92(val, _values, result)
     result = ParamSplatNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 200)
  def _reduce_93(val, _values, result)
     result = ArgSplatNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 205)
  def _reduce_94(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 206)
  def _reduce_95(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 207)
  def _reduce_96(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_97(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 209)
  def _reduce_98(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 210)
  def _reduce_99(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 211)
  def _reduce_100(val, _values, result)
     result = ValueNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 216)
  def _reduce_101(val, _values, result)
     result = AccessorNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 217)
  def _reduce_102(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 218)
  def _reduce_103(val, _values, result)
     result = SliceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 223)
  def _reduce_104(val, _values, result)
     result = IndexNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 228)
  def _reduce_105(val, _values, result)
     result = ObjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_106(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_107(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 235)
  def _reduce_108(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_109(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 238)
  def _reduce_110(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 239)
  def _reduce_111(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_112(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_113(val, _values, result)
     result = val[1].new_instance 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_114(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 251)
  def _reduce_115(val, _values, result)
     result = ExtendsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 256)
  def _reduce_116(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_117(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_118(val, _values, result)
     result = CallNode.new(:super, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 268)
  def _reduce_119(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 270)
  def _reduce_120(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 275)
  def _reduce_121(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 280)
  def _reduce_122(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 281)
  def _reduce_123(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 282)
  def _reduce_124(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 283)
  def _reduce_125(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 284)
  def _reduce_126(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 285)
  def _reduce_127(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 290)
  def _reduce_128(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 291)
  def _reduce_129(val, _values, result)
     result = TryNode.new(val[1], nil, nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_130(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 298)
  def _reduce_131(val, _values, result)
     result = [val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 303)
  def _reduce_132(val, _values, result)
     result = ThrowNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 308)
  def _reduce_133(val, _values, result)
     result = ParentheticalNode.new(val[1], val[0].line) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 313)
  def _reduce_134(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 320)
  def _reduce_135(val, _values, result)
     result = ForNode.new(val[0], val[3][0], val[2][0], val[3][1], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 321)
  def _reduce_136(val, _values, result)
     result = ForNode.new(val[3], val[2][0], val[1][0], val[2][1], val[1][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 326)
  def _reduce_137(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 327)
  def _reduce_138(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 332)
  def _reduce_139(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_140(val, _values, result)
     result = [val[1], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 340)
  def _reduce_141(val, _values, result)
     result = val[3].rewrite_condition(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 342)
  def _reduce_142(val, _values, result)
     result = val[3].rewrite_condition(val[1]).add_else(val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 347)
  def _reduce_143(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 348)
  def _reduce_144(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 353)
  def _reduce_145(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 354)
  def _reduce_146(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

# reduce 147 omitted

module_eval(<<'.,.,', 'grammar.y', 362)
  def _reduce_148(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 367)
  def _reduce_149(val, _values, result)
     result = val[1].force_statement 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 372)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 373)
  def _reduce_151(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 378)
  def _reduce_152(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 379)
  def _reduce_153(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 384)
  def _reduce_154(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 385)
  def _reduce_155(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 390)
  def _reduce_156(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 391)
  def _reduce_157(val, _values, result)
     result = IfNode.new(val[2], Expressions.new([val[0]]), nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 392)
  def _reduce_158(val, _values, result)
     result = IfNode.new(val[2], Expressions.new([val[0]]), nil, {:statement => true, :invert => true}) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
