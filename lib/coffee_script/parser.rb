#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

module CoffeeScript

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 419)
  # Lex and parse a CoffeeScript.
  def parse(code)
    # Uncomment the following line to enable grammar debugging, in combination
    # with the -g flag in the Rake build task.
    # @yydebug = true
    @tokens = Lexer.new.tokenize(code)
    do_parse
  end

  # Retrieve the next token from the list.
  def next_token
    @tokens.shift
  end

  # Raise a custom error class that knows about line numbers.
  def on_error(error_token_id, error_value, value_stack)
    raise ParseError.new(token_to_str(error_token_id), error_value, value_stack)
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'93,264,101,17,21,24,29,33,38,46,51,55,58,245,247,250,135,39,43,134,65',
'69,10,22,25,104,80,231,39,43,232,39,43,94,233,230,241,65,69,13,110,114',
'115,126,39,43,232,137,110,114,115,120,123,89,92,97,100,103,106,109,113',
'117,119,122,88,91,96,99,102,105,108,112,116,118,121,87,90,95,98,39,43',
'107,111,126,126,126,126,72,34,61,7,66,236,17,21,24,29,33,38,46,51,55',
'58,7,80,65,69,1,4,8,156,166,18,22,25,28,80,125,154,47,52,128,62,238',
'67,70,80,229,10,13,-166,-166,-166,126,31,36,41,45,49,54,82,59,126,80',
'10,3,17,21,24,29,33,38,46,51,55,58,129,125,125,125,125,128,128,128,128',
'239,22,25,168,170,39,43,226,34,110,114,115,56,265,61,7,66,13,17,21,24',
'29,33,38,46,51,55,58,245,247,65,69,1,4,8,131,80,18,22,25,28,163,125',
'229,47,52,128,62,156,67,70,125,229,10,13,128,154,254,221,31,36,41,45',
'49,54,72,59,61,220,66,3,17,21,24,29,33,38,46,51,55,58,80,10,249,158',
'156,39,43,226,164,80,22,25,154,244,39,43,226,34,227,80,272,56,77,61',
'7,66,13,17,21,24,29,33,38,46,51,55,58,213,10,65,69,1,4,8,82,220,18,22',
'25,28,250,285,137,47,52,,62,10,67,70,274,,10,13,110,114,115,,31,36,41',
'45,49,54,72,59,61,,66,3,,,156,,39,43,-166,-166,-166,,154,110,114,115',
'120,123,89,92,97,100,103,106,109,113,117,,,34,-166,-166,-166,56,,61',
'7,66,10,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,156,,18,22,25,28',
',,154,47,52,,62,,67,70,,,10,13,-166,-166,-166,,31,36,41,45,49,54,,59',
',,10,3,158,110,114,115,120,123,89,92,97,100,103,106,109,113,117,119',
'122,88,91,96,99,102,105,-166,-166,-166,,34,-166,-166,-166,56,,61,7,66',
',17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,-166,-166',
'-166,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,110,114',
'115,120,123,89,92,97,100,103,106,109,113,117,119,122,88,91,96,99,102',
'105,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1',
'4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54',
',59,,,,3,110,114,115,120,123,89,92,97,100,103,106,109,113,117,119,122',
'88,91,96,99,102,105,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51',
'55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31',
'36,41,45,49,54,,59,,,,3,110,114,115,120,123,89,92,97,100,103,106,109',
'113,117,119,122,88,91,96,99,102,105,,,,,,34,,,,56,,61,7,66,,17,21,24',
'29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70',
',,10,13,,,,,31,36,41,45,49,54,,59,,,,3,110,114,115,120,123,89,92,97',
'100,103,106,109,113,117,119,122,88,91,96,99,102,105,,,,,,34,,,,56,,61',
'7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47',
'52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,110,114,115,120',
'123,89,92,97,100,103,106,109,113,117,119,122,88,91,96,99,102,105,,276',
',,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,',
'18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,',
',3,110,114,115,120,123,89,92,97,100,103,106,109,113,117,119,122,88,91',
'96,99,102,105,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58',
',,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41',
'45,49,54,,59,,,,3,110,114,115,120,123,89,92,97,100,103,106,109,113,117',
'119,122,88,91,96,99,102,105,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38',
'46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13',
',,,,31,36,41,45,49,54,,59,,,,3,110,114,115,120,123,89,92,97,100,103',
'106,109,113,117,110,114,115,120,123,89,92,97,100,103,106,,,34,,,,56',
',61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28',
',,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,110,114,115',
'120,123,89,92,97,100,103,106,109,113,117,110,114,115,120,123,89,92,97',
'100,103,106,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65',
'69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49',
'54,,59,,,,3,110,114,115,120,123,89,92,97,100,103,106,109,113,117,110',
'114,115,120,123,89,92,97,100,103,106,,,34,,,,56,,61,7,66,,17,21,24,29',
'33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,',
'10,13,,,,,31,36,41,45,49,54,,59,,,,3,110,114,115,120,123,89,92,97,110',
'114,115,120,123,89,92,97,110,114,115,120,123,89,92,97,,,,34,,,,56,,61',
'7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47',
'52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,110,114,115,120',
'123,89,110,114,115,120,123,89,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21',
'24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67',
'70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,',
',34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18',
'22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3',
',,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51',
'55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31',
'36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66',
',17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52',
',62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,',
',,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1',
'4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54',
',59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33',
'38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10',
'13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56',
',61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28',
',,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,',
',,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,',
',65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,149,,,,31,36',
'41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17',
'21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62',
',67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,',
',,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8',
',,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59',
',,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38',
'46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13',
',,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,',
'61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,',
',,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,',
',,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,,',
'65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45',
'49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24',
'29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70',
',,10,13,256,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,',
',34,39,43,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8',
',,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59',
',,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38',
'46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13',
'149,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56',
',61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28',
',,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,',
',,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,',
',65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,149,,,,31,36',
'41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17',
'21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62',
',67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,',
',,,,,34,39,43,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1',
'4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54',
',59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33',
'38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10',
'13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56',
',61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28',
',,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,',
',,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,',
',65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41',
'45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21',
'24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67',
'70,,,10,13,,172,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,',
',,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,',
',18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,',
',,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38',
'46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13',
'149,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56',
',61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28',
',,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,',
',,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,',
',65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41',
'45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21',
'24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67',
'70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,',
',34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18',
'22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3',
',,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51',
'55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31',
'36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66',
',17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52',
',62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,',
',,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1',
'4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54',
',59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33',
'38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10',
'13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56',
',61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28',
',,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,',
',,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,',
',65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41',
'45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21',
'24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67',
'70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,',
',34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18',
'22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3',
',,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51',
'55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31',
'36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66',
',17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52',
',62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,',
',,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1',
'4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54',
',59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33',
'38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10',
'13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56',
',61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28',
',,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,',
',,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,',
',65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41',
'45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21',
'24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67',
'70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,',
',34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18',
'22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3',
',,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51',
'55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31',
'36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66',
',17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52',
',62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,',
',,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1',
'4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54',
',59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33',
'38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10',
'13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56',
',61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28',
',,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,',
',,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,',
',65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41',
'45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,,,34,,,,56,,61,7,66,,17,21',
'24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18,22,25,28,,,,47,52,,62,,67',
'70,,,10,13,,,,,31,36,41,45,49,54,,59,,,,3,,,,,,,,,,,,,,,,,,,,,,,,,,',
',34,,,,56,,61,7,66,,17,21,24,29,33,38,46,51,55,58,,,65,69,1,4,8,,,18',
'22,25,28,,,,47,52,,62,,67,70,,,10,13,,,,,31,36,41,45,49,54,,59,93,,101',
'3,,,,,,,,,,,,,,,,,,,,,,104,,,,,,34,,94,,56,,61,,66,,,,,,,,,110,114,115',
'120,123,89,92,97,100,103,106,109,113,117,119,122,88,91,96,99,102,105',
'108,112,116,118,121,87,90,95,98,225,,107,111,93,,101,,,243,,,,,,,,,',
',,,,,,,,,,104,,,,,,,,94,,,,,,,,,,,,,,,110,114,115,120,123,89,92,97,100',
'103,106,109,113,117,119,122,88,91,96,99,102,105,108,112,116,118,121',
'87,90,95,98,,,107,111,93,,101,,,282,,,,,,,,,,,,,,,,,,,,104,,,,,,,,94',
',,,,,,,,,,,,,,110,114,115,120,123,89,92,97,100,103,106,109,113,117,119',
'122,88,91,96,99,102,105,108,112,116,118,121,87,90,95,98,,,107,111,93',
',101,,,286,,,,,,,,,,,,,,,,,,,,104,,,,,,,,94,,,,,,,,,,,,,,,110,114,115',
'120,123,89,92,97,100,103,106,109,113,117,119,122,88,91,96,99,102,105',
'108,112,116,118,121,87,90,95,98,225,,107,111,93,,101,,,,,,,,,,,,,,,',
',,,,,,,104,,,,,,,,94,,,,,,,,,,,,,,,110,114,115,120,123,89,92,97,100',
'103,106,109,113,117,119,122,88,91,96,99,102,105,108,112,116,118,121',
'87,90,95,98,,,107,111,93,,101,,,,,,,,,,,,,,,,,,,,,,,104,,,,,,,,94,,',
',,,,,,,,,,,,110,114,115,120,123,89,92,97,100,103,106,109,113,117,119',
'122,88,91,96,99,102,105,108,112,116,118,121,87,90,95,98,,,107,111,93',
',101,,,,,,,,,,,,,,,,,,,,,,,104,,,,,,,,94,,,,,,,,,,,,,,,110,114,115,120',
'123,89,92,97,100,103,106,109,113,117,119,122,88,91,96,99,102,105,108',
'112,116,118,121,87,90,95,98,,,107,111,93,,101,,,,,,,,,,,,,,,,,,,,,,',
'104,,,,,,,,94,,,,,,,,,,,,,,,110,114,115,120,123,89,92,97,100,103,106',
'109,113,117,119,122,88,91,96,99,102,105,108,112,116,118,121,87,90,95',
'98,,,107,111,93,,101,,,,,,,,,,,,,,,,,,,,,,,104,,,,,,,,94,,,,,,,80,,',
',,,,,110,114,115,120,123,89,92,97,100,103,106,109,113,117,119,122,88',
'91,96,99,102,105,108,112,116,118,121,87,90,95,98,,,107,111,93,,101,',
',,,,,,,,,,,,,,,,,,,,,104,,,,,,,,94,,,,,,,80,,,,,,,,110,114,115,120,123',
'89,92,97,100,103,106,109,113,117,119,122,88,91,96,99,102,105,108,112',
'116,118,121,87,90,95,98,,,107,111,93,,101,,,,,,,,,,,,,,,,,,,,,,,104',
',,,,,,,94,,,,,,,,,,,,,,,110,114,115,120,123,89,92,97,100,103,106,109',
'113,117,119,122,88,91,96,99,102,105,108,112,116,118,121,87,90,95,98',
',,107,111,93,,101,,,,,,,,,,,,,,,,,,,,,,,104,,,,,,,,94,,,,,,,,,,,,,,',
'110,114,115,120,123,89,92,97,100,103,106,109,113,117,119,122,88,91,96',
'99,102,105,108,112,116,118,121,87,90,95,98,,,107,111,93,,101,,,,,,,',
',,,,,,,,,,,,,,,104,,,,,,,,94,,,,,,,,,,,,,,,110,114,115,120,123,89,92',
'97,100,103,106,109,113,117,119,122,88,91,96,99,102,105,108,112,116,118',
'121,87,90,95,98,,,107,111,93,,101,,,,,,,,,,,,,,,,,,,,,,,104,,,,,,,,94',
',,,,,,,,,,,,,,110,114,115,120,123,89,92,97,100,103,106,109,113,117,119',
'122,88,91,96,99,102,105,108,112,116,118,121,87,90,95,98,,,107,111,93',
',101,,,,,,,,,,,,,,,,,,,,,,,104,,,,,,,,94,,,,,,,,,,,,,,,110,114,115,120',
'123,89,92,97,100,103,106,109,113,117,119,122,88,91,96,99,102,105,108',
'112,116,118,121,87,90,95,98,,,107,111,93,,101,,,,,,,,,,,,,,,,,,,,,,',
'104,,,,,,,,94,,,,,,,,,,,,,,,110,114,115,120,123,89,92,97,100,103,106',
'109,113,117,119,122,88,91,96,99,102,105,108,112,116,118,121,87,90,95',
'98,,,107,111,93,,101,,,,,,,,,,,,,,,,,,,,,,,104,,,,,,,,94,,,,,,,,,,,',
',,,110,114,115,120,123,89,92,97,100,103,106,109,113,117,119,122,88,91',
'96,99,102,105,108,112,116,118,121,87,90,95,98,,,107,111,93,,101,,,,',
',,,,,,,,,,,,,,,,,,104,,,,,,,,94,,,,,,,,,,,,,,,110,114,115,120,123,89',
'92,97,100,103,106,109,113,117,119,122,88,91,96,99,102,105,108,112,116',
'118,121,87,90,95,98,,,107,111,93,,101,,,,,,,,,,,,,,,,,,,,,,,104,,,,',
',,,94,,,,,,,223,,,,,,,,110,114,115,120,123,89,92,97,100,103,106,109',
'113,117,119,122,88,91,96,99,102,105,108,112,116,118,121,87,90,95,98',
',,107,111,93,,101,,,,,,,,,,,,,,,,,,,,,,,104,,,,,,,,94,,,,,,,,,,,,,,',
'110,114,115,120,123,89,92,97,100,103,106,109,113,117,119,122,88,91,96',
'99,102,105,108,112,116,118,121,87,90,95,98,,,107,111,93,,101,,,,,,,',
',,,,,,,,,,,,,,,104,,,,,,,,94,,,,,,,80,,,,,,,,110,114,115,120,123,89',
'92,97,100,103,106,109,113,117,119,122,88,91,96,99,102,105,108,112,116',
'118,121,87,90,95,98,104,,107,111,,,,,94,,,,,,,,,,,,,,,110,114,115,120',
'123,89,92,97,100,103,106,109,113,117,119,122,88,91,96,99,102,105,108',
'112,116,118,121,87,90,95,98,104,,,,,,,,94,,,,,,,,,,,,,,,110,114,115',
'120,123,89,92,97,100,103,106,109,113,117,119,122,88,91,96,99,102,105',
'108,112,116,118,121,87,90,95,98,104,,,,,,,,94,,,,,,,,,,,,,,,110,114',
'115,120,123,89,92,97,100,103,106,109,113,117,119,122,88,91,96,99,102',
'105,108,112,116,118,121,87,90,95,98,104,,,,,,,,94,,,,,,,,,,,,,,,110',
'114,115,120,123,89,92,97,100,103,106,109,113,117,119,122,88,91,96,99',
'102,105,108,112,116,118,121,87,90,95,98,94,,,,,,,,,,,,,,,110,114,115',
'120,123,89,92,97,100,103,106,109,113,117,119,122,88,91,96,99,102,105',
'108,112,116,118,121,87,90,95,98,94,,,,,,,,,,,,,,,110,114,115,120,123',
'89,92,97,100,103,106,109,113,117,119,122,88,91,96,99,102,105,108,112',
'116,118,121,87,90,95,98,94,,,,,,,,,,,,,,,110,114,115,120,123,89,92,97',
'100,103,106,109,113,117,119,122,88,91,96,99,102,105,108,112,116,118',
'121,87,90,95,98,94,,,,,,,,,,,,,,,110,114,115,120,123,89,92,97,100,103',
'106,109,113,117,119,122,88,91,96,99,102,105,108,112,116,118,121,87,90',
'95,98,94,,,,,,,,,,,,,,,110,114,115,120,123,89,92,97,100,103,106,109',
'113,117,119,122,88,91,96,99,102,105,108,112,116,118,121,87,90,95,98',
'94,,,,,,,,,,,,,,,110,114,115,120,123,89,92,97,100,103,106,109,113,117',
'119,122,88,91,96,99,102,105,108,112,116,118,121,87,90,95,98,110,114',
'115,120,123,89,92,97,100,103,106,109,113,117,119,122,88,91,96,99,102',
'105,108,112,116,118,121,87,90,95,98,110,114,115,120,123,89,92,97,100',
'103,106,109,113,117,119,122,88,91,96,99,102,105,108,112,116,118,121',
'87,90,95,98,110,114,115,120,123,89,92,97,100,103,106,109,113,117,119',
'122,88,91,96,99,102,105,108,112,116,118,121,87,90,95,98,110,114,115',
'120,123,89,92,97,100,103,106,109,113,117,119,122,88,91,96,99,102,105',
'108,112,116,118,121,87,90,95,98,110,114,115,120,123,89,92,97,100,103',
'106,109,113,117,119,122,88,91,96,99,102,105,108,112,116,118,121,87,90',
'95,98' ]
        racc_action_table = arr = Array.new(8738, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'161,235,161,129,129,129,129,129,129,129,129,129,129,219,219,223,20,12',
'12,20,244,244,223,129,129,161,219,156,157,157,157,280,280,161,157,154',
'171,134,134,129,208,208,208,152,235,235,235,28,161,161,161,161,161,161',
'161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161',
'161,161,161,161,161,161,161,161,171,171,161,161,74,215,153,50,129,244',
'129,95,129,161,95,95,95,95,95,95,95,95,95,95,82,238,95,95,95,95,95,234',
'77,95,95,95,95,239,152,234,95,95,152,95,168,95,95,34,237,95,95,148,148',
'148,19,95,95,95,95,95,95,14,95,73,82,234,95,59,59,59,59,59,59,59,59',
'59,59,19,74,215,153,50,74,215,153,50,169,59,59,79,79,237,237,237,95',
'211,211,211,95,237,95,3,95,59,3,3,3,3,3,3,3,3,3,3,242,242,3,3,3,3,3',
'19,170,3,3,3,3,69,19,214,3,3,19,3,158,3,3,73,151,3,3,73,158,225,137',
'3,3,3,3,3,3,59,3,59,136,59,3,1,1,1,1,1,1,1,1,1,1,135,158,221,158,232',
'214,214,214,70,272,1,1,232,214,151,151,151,3,151,8,251,3,5,3,4,3,1,4',
'4,4,4,4,4,4,4,4,4,126,232,4,4,4,4,4,84,195,4,4,4,4,251,281,104,4,4,',
'4,251,4,4,251,,4,4,180,180,180,,4,4,4,4,4,4,1,4,1,,1,4,,,261,,232,232',
'138,138,138,,261,179,179,179,179,179,179,179,179,179,179,179,179,179',
'179,,,4,144,144,144,4,,4,276,4,261,276,276,276,276,276,276,276,276,276',
'276,,,276,276,276,276,276,61,,276,276,276,276,,,61,276,276,,276,,276',
'276,,,276,276,141,141,141,,276,276,276,276,276,276,,276,,,61,276,61',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,75,75,75,,276,142,142,142,276,,276,7,276,,7,7,7',
'7,7,7,7,7,7,7,,,7,7,7,7,7,,,7,7,7,7,140,140,140,7,7,,7,,7,7,,,7,7,,',
',,7,7,7,7,7,7,,7,,,,7,206,206,206,206,206,206,206,206,206,206,206,206',
'206,206,206,206,206,206,206,206,206,206,,,,,,7,,,,7,,7,120,7,,120,120',
'120,120,120,120,120,120,120,120,,,120,120,120,120,120,,,120,120,120',
'120,,,,120,120,,120,,120,120,,,120,120,,,,,120,120,120,120,120,120,',
'120,,,,120,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204',
'204,204,204,204,204,204,204,,,,,,120,,,,120,,120,256,120,,256,256,256',
'256,256,256,256,256,256,256,,,256,256,256,256,256,,,256,256,256,256',
',,,256,256,,256,,256,256,,,256,256,,,,,256,256,256,256,256,256,,256',
',,,256,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196',
'196,196,196,196,196,196,,,,,,256,,,,256,,256,255,256,,255,255,255,255',
'255,255,255,255,255,255,,,255,255,255,255,255,,,255,255,255,255,,,,255',
'255,,255,,255,255,,,255,255,,,,,255,255,255,255,255,255,,255,,,,255',
'202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202,202',
'202,202,202,202,202,,,,,,255,,,,255,,255,254,255,,254,254,254,254,254',
'254,254,254,254,254,,,254,254,254,254,254,,,254,254,254,254,,,,254,254',
',254,,254,254,,,254,254,,,,,254,254,254,254,254,254,,254,,,,254,187',
'187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187',
'187,187,187,187,,254,,,,254,,,,254,,254,18,254,,18,18,18,18,18,18,18',
'18,18,18,,,18,18,18,18,18,,,18,18,18,18,,,,18,18,,18,,18,18,,,18,18',
',,,,18,18,18,18,18,18,,18,,,,18,190,190,190,190,190,190,190,190,190',
'190,190,190,190,190,190,190,190,190,190,190,190,190,,,,,,18,,,,18,,18',
'250,18,,250,250,250,250,250,250,250,250,250,250,,,250,250,250,250,250',
',,250,250,250,250,,,,250,250,,250,,250,250,,,250,250,,,,,250,250,250',
'250,250,250,,250,,,,250,199,199,199,199,199,199,199,199,199,199,199',
'199,199,199,199,199,199,199,199,199,199,199,,,,,,250,,,,250,,250,247',
'250,,247,247,247,247,247,247,247,247,247,247,,,247,247,247,247,247,',
',247,247,247,247,,,,247,247,,247,,247,247,,,247,247,,,,,247,247,247',
'247,247,247,,247,,,,247,182,182,182,182,182,182,182,182,182,182,182',
'182,182,182,200,200,200,200,200,200,200,200,200,200,200,,,247,,,,247',
',247,245,247,,245,245,245,245,245,245,245,245,245,245,,,245,245,245',
'245,245,,,245,245,245,245,,,,245,245,,245,,245,245,,,245,245,,,,,245',
'245,245,245,245,245,,245,,,,245,210,210,210,210,210,210,210,210,210',
'210,210,210,210,210,205,205,205,205,205,205,205,205,205,205,205,,,245',
',,,245,,245,31,245,,31,31,31,31,31,31,31,31,31,31,,,31,31,31,31,31,',
',31,31,31,31,,,,31,31,,31,,31,31,,,31,31,,,,,31,31,31,31,31,31,,31,',
',,31,207,207,207,207,207,207,207,207,207,207,207,207,207,207,203,203',
'203,203,203,203,203,203,203,203,203,,,31,,,,31,,31,231,31,,231,231,231',
'231,231,231,231,231,231,231,,,231,231,231,231,231,,,231,231,231,231',
',,,231,231,,231,,231,231,,,231,231,,,,,231,231,231,231,231,231,,231',
',,,231,191,191,191,191,191,191,191,191,197,197,197,197,197,197,197,197',
'194,194,194,194,194,194,194,194,,,,231,,,,231,,231,36,231,,36,36,36',
'36,36,36,36,36,36,36,,,36,36,36,36,36,,,36,36,36,36,,,,36,36,,36,,36',
'36,,,36,36,,,,,36,36,36,36,36,36,,36,,,,36,183,183,183,183,183,183,188',
'188,188,188,188,188,,,,,,,,,,,,,,,,36,,,,36,,36,41,36,,41,41,41,41,41',
'41,41,41,41,41,,,41,41,41,41,41,,,41,41,41,41,,,,41,41,,41,,41,41,,',
'41,41,,,,,41,41,41,41,41,41,,41,,,,41,,,,,,,,,,,,,,,,,,,,,,,,,,,,41',
',,,41,,41,45,41,,45,45,45,45,45,45,45,45,45,45,,,45,45,45,45,45,,,45',
'45,45,45,,,,45,45,,45,,45,45,,,45,45,,,,,45,45,45,45,45,45,,45,,,,45',
',,,,,,,,,,,,,,,,,,,,,,,,,,,45,,,,45,,45,47,45,,47,47,47,47,47,47,47',
'47,47,47,,,47,47,47,47,47,,,47,47,47,47,,,,47,47,,47,,47,47,,,47,47',
',,,,47,47,47,47,47,47,,47,,,,47,,,,,,,,,,,,,,,,,,,,,,,,,,,,47,,,,47',
',47,49,47,,49,49,49,49,49,49,49,49,49,49,,,49,49,49,49,49,,,49,49,49',
'49,,,,49,49,,49,,49,49,,,49,49,,,,,49,49,49,49,49,49,,49,,,,49,,,,,',
',,,,,,,,,,,,,,,,,,,,,,49,,,,49,,49,230,49,,230,230,230,230,230,230,230',
'230,230,230,,,230,230,230,230,230,,,230,230,230,230,,,,230,230,,230',
',230,230,,,230,230,,,,,230,230,230,230,230,230,,230,,,,230,,,,,,,,,',
',,,,,,,,,,,,,,,,,,230,,,,230,,230,52,230,,52,52,52,52,52,52,52,52,52',
'52,,,52,52,52,52,52,,,52,52,52,52,,,,52,52,,52,,52,52,,,52,52,,,,,52',
'52,52,52,52,52,,52,,,,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,52,,,,52,,52,54',
'52,,54,54,54,54,54,54,54,54,54,54,,,54,54,54,54,54,,,54,54,54,54,,,',
'54,54,,54,,54,54,,,54,54,,,,,54,54,54,54,54,54,,54,,,,54,,,,,,,,,,,',
',,,,,,,,,,,,,,,,54,,,,54,,54,56,54,,56,56,56,56,56,56,56,56,56,56,,',
'56,56,56,56,56,,,56,56,56,56,,,,56,56,,56,,56,56,,,56,56,56,,,,56,56',
'56,56,56,56,,56,,,,56,,,,,,,,,,,,,,,,,,,,,,,,,,,,56,,,,56,,56,119,56',
',119,119,119,119,119,119,119,119,119,119,,,119,119,119,119,119,,,119',
'119,119,119,,,,119,119,,119,,119,119,,,119,119,,,,,119,119,119,119,119',
'119,,119,,,,119,,,,,,,,,,,,,,,,,,,,,,,,,,,,119,,,,119,,119,228,119,',
'228,228,228,228,228,228,228,228,228,228,,,228,228,228,228,228,,,228',
'228,228,228,,,,228,228,,228,,228,228,,,228,228,,,,,228,228,228,228,228',
'228,,228,,,,228,,,,,,,,,,,,,,,,,,,,,,,,,,,,228,,,,228,,228,62,228,,62',
'62,62,62,62,62,62,62,62,62,,,62,62,62,62,62,,,62,62,62,62,,,,62,62,',
'62,,62,62,,,62,62,,,,,62,62,62,62,62,62,,62,,,,62,,,,,,,,,,,,,,,,,,',
',,,,,,,,,62,,,,62,,62,66,62,,66,66,66,66,66,66,66,66,66,66,,,66,66,66',
'66,66,,,66,66,66,66,,,,66,66,,66,,66,66,,,66,66,,,,,66,66,66,66,66,66',
',66,,,,66,,,,,,,,,,,,,,,,,,,,,,,,,,,,66,,,,66,,66,67,66,,67,67,67,67',
'67,67,67,67,67,67,,,67,67,67,67,67,,,67,67,67,67,,,,67,67,,67,,67,67',
',,67,67,,,,,67,67,67,67,67,67,,67,,,,67,,,,,,,,,,,,,,,,,,,,,,,,,,,,67',
',,,67,,67,226,67,,226,226,226,226,226,226,226,226,226,226,,,226,226',
'226,226,226,,,226,226,226,226,,,,226,226,,226,,226,226,,,226,226,226',
',,,226,226,226,226,226,226,,226,,,,226,,,,,,,,,,,,,,,,,,,,,,,,,,,,226',
'226,226,,226,,226,220,226,,220,220,220,220,220,220,220,220,220,220,',
',220,220,220,220,220,,,220,220,220,220,,,,220,220,,220,,220,220,,,220',
'220,,,,,220,220,220,220,220,220,,220,,,,220,,,,,,,,,,,,,,,,,,,,,,,,',
',,,220,,,,220,,220,72,220,,72,72,72,72,72,72,72,72,72,72,,,72,72,72',
'72,72,,,72,72,72,72,,,,72,72,,72,,72,72,,,72,72,72,,,,72,72,72,72,72',
'72,,72,,,,72,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,,,,72,,72,118,72,,118,118',
'118,118,118,118,118,118,118,118,,,118,118,118,118,118,,,118,118,118',
'118,,,,118,118,,118,,118,118,,,118,118,,,,,118,118,118,118,118,118,',
'118,,,,118,,,,,,,,,,,,,,,,,,,,,,,,,,,,118,,,,118,,118,164,118,,164,164',
'164,164,164,164,164,164,164,164,,,164,164,164,164,164,,,164,164,164',
'164,,,,164,164,,164,,164,164,,,164,164,164,,,,164,164,164,164,164,164',
',164,,,,164,,,,,,,,,,,,,,,,,,,,,,,,,,,,164,,,,164,,164,0,164,,0,0,0',
'0,0,0,0,0,0,0,,,0,0,0,0,0,,,0,0,0,0,,,,0,0,,0,,0,0,,,0,0,,,,,0,0,0,0',
'0,0,,0,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,0,0,,0,,0,122,0,,122,122,122',
'122,122,122,122,122,122,122,,,122,122,122,122,122,,,122,122,122,122',
',,,122,122,,122,,122,122,,,122,122,,,,,122,122,122,122,122,122,,122',
',,,122,,,,,,,,,,,,,,,,,,,,,,,,,,,,122,,,,122,,122,149,122,,149,149,149',
'149,149,149,149,149,149,149,,,149,149,149,149,149,,,149,149,149,149',
',,,149,149,,149,,149,149,,,149,149,,,,,149,149,149,149,149,149,,149',
',,,149,,,,,,,,,,,,,,,,,,,,,,,,,,,,149,,,,149,,149,131,149,,131,131,131',
'131,131,131,131,131,131,131,,,131,131,131,131,131,,,131,131,131,131',
',,,131,131,,131,,131,131,,,131,131,,,,,131,131,131,131,131,131,,131',
',,,131,,,,,,,,,,,,,,,,,,,,,,,,,,,,131,,,,131,,131,117,131,,117,117,117',
'117,117,117,117,117,117,117,,,117,117,117,117,117,,,117,117,117,117',
',,,117,117,,117,,117,117,,,117,117,,,,,117,117,117,117,117,117,,117',
',,,117,,,,,,,,,,,,,,,,,,,,,,,,,,,,117,,,,117,,117,80,117,,80,80,80,80',
'80,80,80,80,80,80,,,80,80,80,80,80,,,80,80,80,80,,,,80,80,,80,,80,80',
',,80,80,,80,,,80,80,80,80,80,80,,80,,,,80,,,,,,,,,,,,,,,,,,,,,,,,,,',
',80,,,,80,,80,81,80,,81,81,81,81,81,81,81,81,81,81,,,81,81,81,81,81',
',,81,81,81,81,,,,81,81,,81,,81,81,,,81,81,,,,,81,81,81,81,81,81,,81',
',,,81,,,,,,,,,,,,,,,,,,,,,,,,,,,,81,,,,81,,81,128,81,,128,128,128,128',
'128,128,128,128,128,128,,,128,128,128,128,128,,,128,128,128,128,,,,128',
'128,,128,,128,128,,,128,128,128,,,,128,128,128,128,128,128,,128,,,,128',
',,,,,,,,,,,,,,,,,,,,,,,,,,,128,,,,128,,128,125,128,,125,125,125,125',
'125,125,125,125,125,125,,,125,125,125,125,125,,,125,125,125,125,,,,125',
'125,,125,,125,125,,,125,125,,,,,125,125,125,125,125,125,,125,,,,125',
',,,,,,,,,,,,,,,,,,,,,,,,,,,125,,,,125,,125,87,125,,87,87,87,87,87,87',
'87,87,87,87,,,87,87,87,87,87,,,87,87,87,87,,,,87,87,,87,,87,87,,,87',
'87,,,,,87,87,87,87,87,87,,87,,,,87,,,,,,,,,,,,,,,,,,,,,,,,,,,,87,,,',
'87,,87,88,87,,88,88,88,88,88,88,88,88,88,88,,,88,88,88,88,88,,,88,88',
'88,88,,,,88,88,,88,,88,88,,,88,88,,,,,88,88,88,88,88,88,,88,,,,88,,',
',,,,,,,,,,,,,,,,,,,,,,,,,88,,,,88,,88,89,88,,89,89,89,89,89,89,89,89',
'89,89,,,89,89,89,89,89,,,89,89,89,89,,,,89,89,,89,,89,89,,,89,89,,,',
',89,89,89,89,89,89,,89,,,,89,,,,,,,,,,,,,,,,,,,,,,,,,,,,89,,,,89,,89',
'90,89,,90,90,90,90,90,90,90,90,90,90,,,90,90,90,90,90,,,90,90,90,90',
',,,90,90,,90,,90,90,,,90,90,,,,,90,90,90,90,90,90,,90,,,,90,,,,,,,,',
',,,,,,,,,,,,,,,,,,,90,,,,90,,90,91,90,,91,91,91,91,91,91,91,91,91,91',
',,91,91,91,91,91,,,91,91,91,91,,,,91,91,,91,,91,91,,,91,91,,,,,91,91',
'91,91,91,91,,91,,,,91,,,,,,,,,,,,,,,,,,,,,,,,,,,,91,,,,91,,91,92,91',
',92,92,92,92,92,92,92,92,92,92,,,92,92,92,92,92,,,92,92,92,92,,,,92',
'92,,92,,92,92,,,92,92,,,,,92,92,92,92,92,92,,92,,,,92,,,,,,,,,,,,,,',
',,,,,,,,,,,,,92,,,,92,,92,93,92,,93,93,93,93,93,93,93,93,93,93,,,93',
'93,93,93,93,,,93,93,93,93,,,,93,93,,93,,93,93,,,93,93,,,,,93,93,93,93',
'93,93,,93,,,,93,,,,,,,,,,,,,,,,,,,,,,,,,,,,93,,,,93,,93,94,93,,94,94',
'94,94,94,94,94,94,94,94,,,94,94,94,94,94,,,94,94,94,94,,,,94,94,,94',
',94,94,,,94,94,,,,,94,94,94,94,94,94,,94,,,,94,,,,,,,,,,,,,,,,,,,,,',
',,,,,,94,,,,94,,94,121,94,,121,121,121,121,121,121,121,121,121,121,',
',121,121,121,121,121,,,121,121,121,121,,,,121,121,,121,,121,121,,,121',
'121,,,,,121,121,121,121,121,121,,121,,,,121,,,,,,,,,,,,,,,,,,,,,,,,',
',,,121,,,,121,,121,96,121,,96,96,96,96,96,96,96,96,96,96,,,96,96,96',
'96,96,,,96,96,96,96,,,,96,96,,96,,96,96,,,96,96,,,,,96,96,96,96,96,96',
',96,,,,96,,,,,,,,,,,,,,,,,,,,,,,,,,,,96,,,,96,,96,97,96,,97,97,97,97',
'97,97,97,97,97,97,,,97,97,97,97,97,,,97,97,97,97,,,,97,97,,97,,97,97',
',,97,97,,,,,97,97,97,97,97,97,,97,,,,97,,,,,,,,,,,,,,,,,,,,,,,,,,,,97',
',,,97,,97,98,97,,98,98,98,98,98,98,98,98,98,98,,,98,98,98,98,98,,,98',
'98,98,98,,,,98,98,,98,,98,98,,,98,98,,,,,98,98,98,98,98,98,,98,,,,98',
',,,,,,,,,,,,,,,,,,,,,,,,,,,98,,,,98,,98,99,98,,99,99,99,99,99,99,99',
'99,99,99,,,99,99,99,99,99,,,99,99,99,99,,,,99,99,,99,,99,99,,,99,99',
',,,,99,99,99,99,99,99,,99,,,,99,,,,,,,,,,,,,,,,,,,,,,,,,,,,99,,,,99',
',99,116,99,,116,116,116,116,116,116,116,116,116,116,,,116,116,116,116',
'116,,,116,116,116,116,,,,116,116,,116,,116,116,,,116,116,,,,,116,116',
'116,116,116,116,,116,,,,116,,,,,,,,,,,,,,,,,,,,,,,,,,,,116,,,,116,,116',
'101,116,,101,101,101,101,101,101,101,101,101,101,,,101,101,101,101,101',
',,101,101,101,101,,,,101,101,,101,,101,101,,,101,101,,,,,101,101,101',
'101,101,101,,101,,,,101,,,,,,,,,,,,,,,,,,,,,,,,,,,,101,,,,101,,101,102',
'101,,102,102,102,102,102,102,102,102,102,102,,,102,102,102,102,102,',
',102,102,102,102,,,,102,102,,102,,102,102,,,102,102,,,,,102,102,102',
'102,102,102,,102,,,,102,,,,,,,,,,,,,,,,,,,,,,,,,,,,102,,,,102,,102,103',
'102,,103,103,103,103,103,103,103,103,103,103,,,103,103,103,103,103,',
',103,103,103,103,,,,103,103,,103,,103,103,,,103,103,,,,,103,103,103',
'103,103,103,,103,,,,103,,,,,,,,,,,,,,,,,,,,,,,,,,,,103,,,,103,,103,123',
'103,,123,123,123,123,123,123,123,123,123,123,,,123,123,123,123,123,',
',123,123,123,123,,,,123,123,,123,,123,123,,,123,123,,,,,123,123,123',
'123,123,123,,123,,,,123,,,,,,,,,,,,,,,,,,,,,,,,,,,,123,,,,123,,123,105',
'123,,105,105,105,105,105,105,105,105,105,105,,,105,105,105,105,105,',
',105,105,105,105,,,,105,105,,105,,105,105,,,105,105,,,,,105,105,105',
'105,105,105,,105,,,,105,,,,,,,,,,,,,,,,,,,,,,,,,,,,105,,,,105,,105,106',
'105,,106,106,106,106,106,106,106,106,106,106,,,106,106,106,106,106,',
',106,106,106,106,,,,106,106,,106,,106,106,,,106,106,,,,,106,106,106',
'106,106,106,,106,,,,106,,,,,,,,,,,,,,,,,,,,,,,,,,,,106,,,,106,,106,107',
'106,,107,107,107,107,107,107,107,107,107,107,,,107,107,107,107,107,',
',107,107,107,107,,,,107,107,,107,,107,107,,,107,107,,,,,107,107,107',
'107,107,107,,107,,,,107,,,,,,,,,,,,,,,,,,,,,,,,,,,,107,,,,107,,107,108',
'107,,108,108,108,108,108,108,108,108,108,108,,,108,108,108,108,108,',
',108,108,108,108,,,,108,108,,108,,108,108,,,108,108,,,,,108,108,108',
'108,108,108,,108,,,,108,,,,,,,,,,,,,,,,,,,,,,,,,,,,108,,,,108,,108,109',
'108,,109,109,109,109,109,109,109,109,109,109,,,109,109,109,109,109,',
',109,109,109,109,,,,109,109,,109,,109,109,,,109,109,,,,,109,109,109',
'109,109,109,,109,,,,109,,,,,,,,,,,,,,,,,,,,,,,,,,,,109,,,,109,,109,111',
'109,,111,111,111,111,111,111,111,111,111,111,,,111,111,111,111,111,',
',111,111,111,111,,,,111,111,,111,,111,111,,,111,111,,,,,111,111,111',
'111,111,111,,111,,,,111,,,,,,,,,,,,,,,,,,,,,,,,,,,,111,,,,111,,111,112',
'111,,112,112,112,112,112,112,112,112,112,112,,,112,112,112,112,112,',
',112,112,112,112,,,,112,112,,112,,112,112,,,112,112,,,,,112,112,112',
'112,112,112,,112,,,,112,,,,,,,,,,,,,,,,,,,,,,,,,,,,112,,,,112,,112,113',
'112,,113,113,113,113,113,113,113,113,113,113,,,113,113,113,113,113,',
',113,113,113,113,,,,113,113,,113,,113,113,,,113,113,,,,,113,113,113',
'113,113,113,,113,,,,113,,,,,,,,,,,,,,,,,,,,,,,,,,,,113,,,,113,,113,100',
'113,,100,100,100,100,100,100,100,100,100,100,,,100,100,100,100,100,',
',100,100,100,100,,,,100,100,,100,,100,100,,,100,100,,,,,100,100,100',
'100,100,100,,100,212,,212,100,,,,,,,,,,,,,,,,,,,,,,212,,,,,,100,,212',
',100,,100,,100,,,,,,,,,212,212,212,212,212,212,212,212,212,212,212,212',
'212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212',
'212,212,212,,212,212,275,,275,,,212,,,,,,,,,,,,,,,,,,,,275,,,,,,,,275',
',,,,,,,,,,,,,,275,275,275,275,275,275,275,275,275,275,275,275,275,275',
'275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275,275',
',,275,275,283,,283,,,275,,,,,,,,,,,,,,,,,,,,283,,,,,,,,283,,,,,,,,,',
',,,,,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,283',
'283,283,283,283,283,283,283,283,283,283,283,283,283,283,283,,,283,283',
'150,,150,,,283,,,,,,,,,,,,,,,,,,,,150,,,,,,,,150,,,,,,,,,,,,,,,150,150',
'150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150',
'150,150,150,150,150,150,150,150,150,150,150,150,150,,150,150,165,,165',
',,,,,,,,,,,,,,,,,,,,,,165,,,,,,,,165,,,,,,,,,,,,,,,165,165,165,165,165',
'165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165',
'165,165,165,165,165,165,165,165,165,,,165,165,278,,278,,,,,,,,,,,,,',
',,,,,,,,,278,,,,,,,,278,,,,,,,,,,,,,,,278,278,278,278,278,278,278,278',
'278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278',
'278,278,278,278,278,278,,,278,278,277,,277,,,,,,,,,,,,,,,,,,,,,,,277',
',,,,,,,277,,,,,,,,,,,,,,,277,277,277,277,277,277,277,277,277,277,277',
'277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277,277',
'277,277,277,,,277,277,173,,173,,,,,,,,,,,,,,,,,,,,,,,173,,,,,,,,173',
',,,,,,,,,,,,,,173,173,173,173,173,173,173,173,173,173,173,173,173,173',
'173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173',
',,173,173,271,,271,,,,,,,,,,,,,,,,,,,,,,,271,,,,,,,,271,,,,,,,271,,',
',,,,,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,271',
'271,271,271,271,271,271,271,271,271,271,271,271,271,271,271,,,271,271',
'78,,78,,,,,,,,,,,,,,,,,,,,,,,78,,,,,,,,78,,,,,,,78,,,,,,,,78,78,78,78',
'78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78',
'78,78,78,78,,,78,78,192,,192,,,,,,,,,,,,,,,,,,,,,,,192,,,,,,,,192,,',
',,,,,,,,,,,,192,192,192,192,192,192,192,192,192,192,192,192,192,192',
'192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192',
',,192,192,224,,224,,,,,,,,,,,,,,,,,,,,,,,224,,,,,,,,224,,,,,,,,,,,,',
',,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224',
'224,224,224,224,224,224,224,224,224,224,224,224,224,224,,,224,224,76',
',76,,,,,,,,,,,,,,,,,,,,,,,76,,,,,,,,76,,,,,,,,,,,,,,,76,76,76,76,76',
'76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76',
'76,76,76,,,76,76,260,,260,,,,,,,,,,,,,,,,,,,,,,,260,,,,,,,,260,,,,,',
',,,,,,,,,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260',
'260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,,,260',
'260,259,,259,,,,,,,,,,,,,,,,,,,,,,,259,,,,,,,,259,,,,,,,,,,,,,,,259',
'259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259,259',
'259,259,259,259,259,259,259,259,259,259,259,259,259,,,259,259,258,,258',
',,,,,,,,,,,,,,,,,,,,,,258,,,,,,,,258,,,,,,,,,,,,,,,258,258,258,258,258',
'258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258',
'258,258,258,258,258,258,258,258,258,,,258,258,257,,257,,,,,,,,,,,,,',
',,,,,,,,,257,,,,,,,,257,,,,,,,,,,,,,,,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,,,257,257,16,,16,,,,,,,,,,,,,,,,,,,,,,,16,,',
',,,,,16,,,,,,,,,,,,,,,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16',
'16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,,,16,16,147,,147,,,,,,',
',,,,,,,,,,,,,,,,147,,,,,,,,147,,,,,,,147,,,,,,,,147,147,147,147,147',
'147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147',
'147,147,147,147,147,147,147,147,147,,,147,147,184,,184,,,,,,,,,,,,,',
',,,,,,,,,184,,,,,,,,184,,,,,,,,,,,,,,,184,184,184,184,184,184,184,184',
'184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184',
'184,184,184,184,184,184,,,184,184,143,,143,,,,,,,,,,,,,,,,,,,,,,,143',
',,,,,,,143,,,,,,,143,,,,,,,,143,143,143,143,143,143,143,143,143,143',
'143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143,143',
'143,143,143,143,198,,143,143,,,,,198,,,,,,,,,,,,,,,198,198,198,198,198',
'198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198',
'198,198,198,198,198,198,198,198,198,216,,,,,,,,216,,,,,,,,,,,,,,,216',
'216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216,216',
'216,216,216,216,216,216,216,216,216,216,216,216,216,124,,,,,,,,124,',
',,,,,,,,,,,,,124,124,124,124,124,124,124,124,124,124,124,124,124,124',
'124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124',
'201,,,,,,,,201,,,,,,,,,,,,,,,201,201,201,201,201,201,201,201,201,201',
'201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201,201',
'201,201,201,201,269,,,,,,,,,,,,,,,269,269,269,269,269,269,269,269,269',
'269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269',
'269,269,269,269,269,160,,,,,,,,,,,,,,,160,160,160,160,160,160,160,160',
'160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160,160',
'160,160,160,160,160,160,270,,,,,,,,,,,,,,,270,270,270,270,270,270,270',
'270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270',
'270,270,270,270,270,270,270,248,,,,,,,,,,,,,,,248,248,248,248,248,248',
'248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248',
'248,248,248,248,248,248,248,248,162,,,,,,,,,,,,,,,162,162,162,162,162',
'162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162',
'162,162,162,162,162,162,162,162,162,185,,,,,,,,,,,,,,,185,185,185,185',
'185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,185',
'185,185,185,185,185,185,185,185,185,185,186,186,186,186,186,186,186',
'186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186',
'186,186,186,186,186,186,186,189,189,189,189,189,189,189,189,189,189',
'189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189',
'189,189,189,189,178,178,178,178,178,178,178,178,178,178,178,178,178',
'178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178',
'178,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,209',
'209,209,209,209,209,209,209,209,209,209,209,209,209,209,209,181,181',
'181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181',
'181,181,181,181,181,181,181,181,181,181,181,181' ]
        racc_action_check = arr = Array.new(8738, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  3148,   231,   nil,   178,   268,   268,   nil,   448,   223,   nil,
   nil,   nil,   -69,   nil,   137,   nil,  7761,   nil,   898,   118,
   -69,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    33,   nil,
   nil,  1258,   nil,   nil,    84,   nil,  1438,   nil,   nil,   nil,
   nil,  1528,   nil,   nil,   nil,  1618,   nil,  1708,   nil,  1798,
    71,   nil,  1978,   nil,  2068,   nil,  2158,   nil,   nil,   141,
   nil,   374,  2428,   nil,   nil,   nil,  2518,  2608,   nil,   189,
   161,   nil,  2878,   127,    68,   389,  7346,   111,  7097,   146,
  3598,  3688,   101,   nil,   287,   nil,   nil,  3958,  4048,  4138,
  4228,  4318,  4408,  4498,  4588,    88,  4768,  4858,  4948,  5038,
  6298,  5218,  5308,  5398,   284,  5578,  5668,  5758,  5848,  5938,
   nil,  6028,  6118,  6208,   nil,   nil,  5128,  3508,  2968,  2248,
   538,  4678,  3238,  5488,  8172,  3868,   269,   nil,  3778,    -2,
   nil,  3418,   nil,   nil,    20,   204,   205,   135,   282,   nil,
   426,   350,   394,  8010,   304,   nil,   nil,  7844,    80,  3328,
  6599,   174,    28,    70,   -47,   nil,   -55,   -58,   207,   nil,
  8318,    -2,  8456,   nil,  3058,  6682,   nil,   nil,   109,   142,
   159,    -7,   nil,  6931,   nil,   nil,   nil,   nil,  8595,   287,
   260,  8657,  1086,  1446,  7927,  8502,  8533,   816,  1452,  8564,
   906,  1356,  7180,   367,  1372,   263,   636,  1364,  8064,   996,
  1100,  8226,   726,  1280,   546,  1190,   456,  1266,   -10,  8626,
  1176,   124,  6350,   nil,   165,    69,  8118,   nil,   nil,   -16,
  2788,   234,   nil,   -18,  7263,   141,  2698,   nil,  2338,   nil,
  1888,  1348,   244,   nil,   104,   -42,   nil,    84,    62,    74,
   nil,   nil,   164,   nil,     3,  1168,   nil,  1078,  8410,   nil,
   988,   263,   nil,   nil,   808,   718,   628,  7678,  7595,  7512,
  7429,   322,   nil,   nil,   nil,   nil,   nil,   nil,   nil,  8272,
  8364,  7014,   213,   nil,   nil,  6433,   358,  6848,  6765,   nil,
   -55,   254,   nil,  6516,   nil,   nil,   nil ]

racc_action_default = [
    -1,  -166,   -21,  -166,  -166,  -166,   -22,  -166,  -166,    -2,
   -45,   -23,    -3,   -30,  -159,   -97,    -4,   -28,  -166,    -7,
  -166,   -29,   -32,    -8,   -31,   -33,    -9,   -91,  -166,   -34,
   -10,  -166,   -98,   -35,  -166,   -11,  -166,   -99,   -36,   -26,
   -12,  -166,  -100,   -27,   -13,  -166,   -37,  -166,   -14,  -166,
  -114,   -38,  -166,   -15,  -166,   -39,  -126,   -16,   -96,  -166,
  -116,  -108,  -166,   -17,   -18,   -93,  -166,  -166,   -19,  -166,
  -166,   -20,  -126,  -166,  -115,   -48,   -44,  -166,  -166,  -166,
  -166,    -6,  -166,  -157,  -159,  -161,  -163,  -166,  -166,  -166,
  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,  -166,
   -56,  -166,  -166,  -166,   -55,   -88,  -166,  -166,  -166,  -166,
  -166,  -166,  -166,  -166,  -138,  -166,  -166,  -101,  -126,  -166,
  -105,  -166,  -104,  -118,  -166,  -166,  -166,  -143,   -49,   -90,
   -46,   -47,   -50,  -166,   -52,  -102,  -119,  -166,   -51,  -166,
  -127,  -166,   -95,  -166,  -166,   -43,  -166,  -166,  -108,  -109,
   -53,  -166,   -54,   -94,  -126,  -127,   287,  -155,  -166,  -134,
  -166,  -166,   -25,    -5,  -156,  -160,  -158,  -162,   -81,   -70,
   -59,   -82,   -71,   -60,  -164,   -87,   -83,   -72,   -61,   -84,
   -73,   -62,  -165,   -74,   -63,  -166,   -75,   -64,   -85,   -76,
   -65,   -86,   -77,   -66,   -78,   -67,   -79,   -68,   -57,   -80,
   -69,   -58,  -166,  -103,  -166,  -117,   -40,   -92,   -89,  -166,
  -166,  -166,  -140,  -166,  -128,  -166,  -166,  -125,  -166,  -133,
  -166,  -166,  -166,  -107,  -166,  -166,  -139,  -166,  -166,  -166,
  -135,   -24,  -141,  -106,  -120,  -166,  -142,  -166,  -145,  -144,
  -166,  -166,  -150,  -154,  -166,  -166,  -166,  -129,  -130,   -41,
   -42,  -166,  -110,  -111,  -113,  -122,  -137,  -136,  -121,  -147,
  -146,  -166,  -166,  -151,  -148,  -166,  -166,  -131,  -132,  -112,
  -152,  -166,  -123,  -166,  -153,  -149,  -124 ]

racc_goto_table = [
     9,   136,    73,    16,    74,    83,    75,    76,    12,   130,
    78,    79,    81,   219,   145,   214,   155,    85,   262,     5,
   263,   124,   251,   169,   174,   252,   217,    84,   268,    86,
   146,   nil,   157,   nil,   138,   nil,   nil,   139,   145,   140,
   130,   nil,   nil,   nil,   141,   nil,   nil,   279,   142,   nil,
   143,   237,   144,   273,   146,   147,   nil,   148,   nil,   150,
   152,   nil,   153,   130,   130,   160,   nil,   nil,   nil,   161,
   162,   nil,   242,   nil,   nil,   176,   nil,   195,   nil,   nil,
   nil,   167,   nil,    16,   173,   175,   nil,   177,   171,   nil,
   178,   179,   180,   181,   182,   183,   184,   185,   186,   187,
   188,   189,   190,   191,   192,   193,   194,   nil,   196,   197,
   198,   199,   200,   155,   201,   202,   203,   145,   nil,   204,
   205,   206,   207,   208,   209,   210,   211,   nil,   212,   235,
   215,   nil,   153,   146,   216,   nil,   nil,   nil,   218,   nil,
   nil,   nil,   130,   130,   nil,   nil,   222,   nil,   nil,   nil,
   nil,   nil,   224,   nil,   nil,   nil,   nil,   234,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    81,   nil,   240,   nil,   nil,   nil,   nil,   253,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   155,   nil,   155,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   130,   253,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   155,   nil,   nil,   nil,
   nil,   nil,   246,   248,   nil,   nil,   255,   nil,   nil,   257,
   nil,   258,   261,   259,   260,   234,   nil,   nil,   nil,   nil,
   nil,   266,   267,   nil,   nil,   nil,   nil,   nil,   269,   nil,
   270,   nil,   nil,   271,   nil,   nil,   nil,   275,   277,   278,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   280,   281,   nil,   nil,   nil,   283,
   284 ]

racc_goto_check = [
     2,    38,     5,     4,    31,    43,     4,     4,     3,     9,
     4,    22,     2,    39,    30,    36,    21,    45,    24,     1,
    24,     4,    40,    37,    42,    41,    26,    44,     7,    46,
    35,   nil,    33,   nil,     4,   nil,   nil,    22,    30,     4,
     9,   nil,   nil,   nil,     4,   nil,   nil,    24,     4,   nil,
     4,    36,     4,    41,    35,     4,   nil,     4,   nil,     4,
     5,   nil,    31,     9,     9,     4,   nil,   nil,   nil,     4,
     4,   nil,    39,   nil,   nil,    43,   nil,    38,   nil,   nil,
   nil,    22,   nil,     4,     4,    22,   nil,    45,     3,   nil,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,   nil,     4,     4,
     4,     4,     4,    21,     4,     4,     4,    30,   nil,     4,
     4,     4,     4,     4,     4,     4,     4,   nil,     4,    33,
     5,   nil,    31,    35,     4,   nil,   nil,   nil,    22,   nil,
   nil,   nil,     9,     9,   nil,   nil,    22,   nil,   nil,   nil,
   nil,   nil,     4,   nil,   nil,   nil,   nil,     2,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,    22,   nil,   nil,   nil,   nil,    21,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,    21,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     9,    21,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,   nil,   nil,
   nil,   nil,    22,     4,   nil,   nil,     2,   nil,   nil,     4,
   nil,     4,     2,     4,     4,     2,   nil,   nil,   nil,   nil,
   nil,    22,    22,   nil,   nil,   nil,   nil,   nil,     4,   nil,
     4,   nil,   nil,     4,   nil,   nil,   nil,     4,     4,     4,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    22,    22,   nil,   nil,   nil,     4,
     2 ]

racc_goto_pointer = [
   nil,    19,     0,     8,     3,     1,   nil,  -216,   nil,   -10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -45,     3,   nil,  -214,   nil,  -108,   nil,   nil,   nil,
   -36,     3,   nil,   -29,   nil,   -20,  -113,   -56,   -27,  -123,
  -201,  -198,   -58,    -9,    13,     3,    15 ]

racc_goto_default = [
   nil,   nil,   228,   nil,   165,    19,    23,    26,    30,    35,
    40,    44,    48,    53,    57,    63,    64,    68,    71,     2,
     6,    11,   nil,    15,   159,    20,    27,    32,    37,    42,
   127,    50,   132,   nil,    60,   133,   151,   nil,   nil,   nil,
   nil,   nil,    14,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 96, :_reduce_1,
  1, 96, :_reduce_2,
  1, 96, :_reduce_3,
  1, 98, :_reduce_4,
  3, 98, :_reduce_5,
  2, 98, :_reduce_6,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  1, 99, :_reduce_none,
  3, 117, :_reduce_24,
  2, 117, :_reduce_25,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 118, :_reduce_28,
  1, 118, :_reduce_29,
  1, 118, :_reduce_30,
  1, 118, :_reduce_31,
  1, 118, :_reduce_32,
  1, 118, :_reduce_33,
  1, 118, :_reduce_34,
  1, 118, :_reduce_35,
  1, 118, :_reduce_36,
  1, 118, :_reduce_37,
  1, 118, :_reduce_38,
  1, 118, :_reduce_39,
  3, 105, :_reduce_40,
  3, 119, :_reduce_41,
  3, 119, :_reduce_42,
  1, 119, :_reduce_43,
  2, 109, :_reduce_44,
  1, 116, :_reduce_45,
  2, 103, :_reduce_46,
  2, 103, :_reduce_47,
  2, 103, :_reduce_48,
  2, 103, :_reduce_49,
  2, 103, :_reduce_50,
  2, 103, :_reduce_51,
  2, 103, :_reduce_52,
  2, 103, :_reduce_53,
  2, 103, :_reduce_54,
  2, 103, :_reduce_55,
  2, 103, :_reduce_56,
  3, 103, :_reduce_57,
  3, 103, :_reduce_58,
  3, 103, :_reduce_59,
  3, 103, :_reduce_60,
  3, 103, :_reduce_61,
  3, 103, :_reduce_62,
  3, 103, :_reduce_63,
  3, 103, :_reduce_64,
  3, 103, :_reduce_65,
  3, 103, :_reduce_66,
  3, 103, :_reduce_67,
  3, 103, :_reduce_68,
  3, 103, :_reduce_69,
  3, 103, :_reduce_70,
  3, 103, :_reduce_71,
  3, 103, :_reduce_72,
  3, 103, :_reduce_73,
  3, 103, :_reduce_74,
  3, 103, :_reduce_75,
  3, 103, :_reduce_76,
  3, 103, :_reduce_77,
  3, 103, :_reduce_78,
  3, 103, :_reduce_79,
  3, 103, :_reduce_80,
  3, 103, :_reduce_81,
  3, 103, :_reduce_82,
  3, 103, :_reduce_83,
  3, 103, :_reduce_84,
  3, 103, :_reduce_85,
  3, 103, :_reduce_86,
  3, 103, :_reduce_87,
  2, 115, :_reduce_88,
  3, 102, :_reduce_89,
  2, 102, :_reduce_90,
  1, 120, :_reduce_91,
  3, 120, :_reduce_92,
  1, 121, :_reduce_none,
  2, 121, :_reduce_94,
  2, 114, :_reduce_95,
  1, 100, :_reduce_96,
  1, 100, :_reduce_97,
  1, 100, :_reduce_98,
  1, 100, :_reduce_99,
  1, 100, :_reduce_100,
  2, 100, :_reduce_101,
  2, 100, :_reduce_102,
  2, 125, :_reduce_103,
  1, 125, :_reduce_104,
  1, 125, :_reduce_105,
  3, 127, :_reduce_106,
  3, 123, :_reduce_107,
  0, 128, :_reduce_108,
  1, 128, :_reduce_109,
  3, 128, :_reduce_110,
  3, 128, :_reduce_111,
  4, 128, :_reduce_112,
  3, 128, :_reduce_113,
  1, 101, :_reduce_114,
  2, 101, :_reduce_115,
  1, 101, :_reduce_116,
  3, 113, :_reduce_117,
  2, 126, :_reduce_118,
  2, 126, :_reduce_119,
  3, 130, :_reduce_120,
  4, 130, :_reduce_121,
  4, 129, :_reduce_122,
  6, 104, :_reduce_123,
  7, 104, :_reduce_124,
  3, 122, :_reduce_125,
  0, 131, :_reduce_126,
  1, 131, :_reduce_127,
  2, 131, :_reduce_128,
  3, 131, :_reduce_129,
  3, 131, :_reduce_130,
  4, 131, :_reduce_131,
  4, 131, :_reduce_132,
  2, 131, :_reduce_133,
  3, 107, :_reduce_134,
  4, 107, :_reduce_135,
  5, 107, :_reduce_136,
  3, 132, :_reduce_137,
  2, 108, :_reduce_138,
  3, 124, :_reduce_139,
  3, 110, :_reduce_140,
  4, 111, :_reduce_141,
  4, 111, :_reduce_142,
  1, 133, :_reduce_143,
  3, 133, :_reduce_144,
  2, 134, :_reduce_145,
  3, 134, :_reduce_146,
  3, 134, :_reduce_147,
  5, 112, :_reduce_148,
  7, 112, :_reduce_149,
  1, 135, :_reduce_150,
  2, 135, :_reduce_151,
  3, 136, :_reduce_152,
  4, 136, :_reduce_153,
  1, 136, :_reduce_none,
  3, 137, :_reduce_155,
  2, 138, :_reduce_156,
  1, 139, :_reduce_157,
  2, 139, :_reduce_158,
  0, 140, :_reduce_159,
  2, 140, :_reduce_160,
  1, 141, :_reduce_161,
  2, 141, :_reduce_162,
  2, 106, :_reduce_163,
  3, 106, :_reduce_164,
  3, 106, :_reduce_165 ]

racc_reduce_n = 166

racc_shift_n = 287

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :UNLESS => 4,
  :NUMBER => 5,
  :STRING => 6,
  :REGEX => 7,
  :TRUE => 8,
  :FALSE => 9,
  :YES => 10,
  :NO => 11,
  :ON => 12,
  :OFF => 13,
  :IDENTIFIER => 14,
  :PROPERTY_ACCESS => 15,
  :CODE => 16,
  :PARAM => 17,
  :PARAM_SPLAT => 18,
  :NEW => 19,
  :RETURN => 20,
  :TRY => 21,
  :CATCH => 22,
  :FINALLY => 23,
  :THROW => 24,
  :BREAK => 25,
  :CONTINUE => 26,
  :FOR => 27,
  :IN => 28,
  :BY => 29,
  :WHEN => 30,
  :WHILE => 31,
  :SWITCH => 32,
  :LEADING_WHEN => 33,
  :DELETE => 34,
  :INSTANCEOF => 35,
  :TYPEOF => 36,
  :SUPER => 37,
  :EXTENDS => 38,
  :NEWLINE => 39,
  :COMMENT => 40,
  :JS => 41,
  :INDENT => 42,
  :OUTDENT => 43,
  :UMINUS => 44,
  :SPLAT => 45,
  :NOT => 46,
  "!" => 47,
  "!!" => 48,
  "~" => 49,
  "++" => 50,
  "--" => 51,
  "?" => 52,
  "*" => 53,
  "/" => 54,
  "%" => 55,
  "+" => 56,
  "-" => 57,
  "<<" => 58,
  ">>" => 59,
  ">>>" => 60,
  "&" => 61,
  "|" => 62,
  "^" => 63,
  "<=" => 64,
  "<" => 65,
  ">" => 66,
  ">=" => 67,
  "==" => 68,
  "!=" => 69,
  :IS => 70,
  :ISNT => 71,
  "&&" => 72,
  "||" => 73,
  :AND => 74,
  :OR => 75,
  "-=" => 76,
  "+=" => 77,
  "/=" => 78,
  "*=" => 79,
  "%=" => 80,
  "." => 81,
  :ASSIGN => 82,
  "||=" => 83,
  "&&=" => 84,
  "=>" => 85,
  "\n" => 86,
  ";" => 87,
  "," => 88,
  "[" => 89,
  "]" => 90,
  "{" => 91,
  "}" => 92,
  "(" => 93,
  ")" => 94 }

racc_nt_base = 95

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "UNLESS",
  "NUMBER",
  "STRING",
  "REGEX",
  "TRUE",
  "FALSE",
  "YES",
  "NO",
  "ON",
  "OFF",
  "IDENTIFIER",
  "PROPERTY_ACCESS",
  "CODE",
  "PARAM",
  "PARAM_SPLAT",
  "NEW",
  "RETURN",
  "TRY",
  "CATCH",
  "FINALLY",
  "THROW",
  "BREAK",
  "CONTINUE",
  "FOR",
  "IN",
  "BY",
  "WHEN",
  "WHILE",
  "SWITCH",
  "LEADING_WHEN",
  "DELETE",
  "INSTANCEOF",
  "TYPEOF",
  "SUPER",
  "EXTENDS",
  "NEWLINE",
  "COMMENT",
  "JS",
  "INDENT",
  "OUTDENT",
  "UMINUS",
  "SPLAT",
  "NOT",
  "\"!\"",
  "\"!!\"",
  "\"~\"",
  "\"++\"",
  "\"--\"",
  "\"?\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\">>>\"",
  "\"&\"",
  "\"|\"",
  "\"^\"",
  "\"<=\"",
  "\"<\"",
  "\">\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "IS",
  "ISNT",
  "\"&&\"",
  "\"||\"",
  "AND",
  "OR",
  "\"-=\"",
  "\"+=\"",
  "\"/=\"",
  "\"*=\"",
  "\"%=\"",
  "\".\"",
  "ASSIGN",
  "\"||=\"",
  "\"&&=\"",
  "\"=>\"",
  "\"\\n\"",
  "\";\"",
  "\",\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Root",
  "Terminator",
  "Expressions",
  "Expression",
  "Value",
  "Call",
  "Code",
  "Operation",
  "Range",
  "Assign",
  "If",
  "Try",
  "Throw",
  "Return",
  "While",
  "For",
  "Switch",
  "Extends",
  "Splat",
  "Existence",
  "Comment",
  "Block",
  "Literal",
  "AssignObj",
  "ParamList",
  "Param",
  "Array",
  "Object",
  "Parenthetical",
  "Accessor",
  "Invocation",
  "Index",
  "AssignList",
  "Super",
  "Arguments",
  "ArgList",
  "Catch",
  "ForVariables",
  "ForSource",
  "Whens",
  "When",
  "IfBlock",
  "ElsIf",
  "ElsIfs",
  "ElseBody",
  "IfEnd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_1(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_2(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_4(val, _values, result)
     result = Expressions.wrap(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_5(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_24(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_25(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_28(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_29(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_30(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_31(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_32(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_33(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_34(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_35(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_36(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_37(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_38(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_39(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_40(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_41(val, _values, result)
     result = AssignNode.new(ValueNode.new(val[0]), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_42(val, _values, result)
     result = AssignNode.new(ValueNode.new(LiteralNode.new(val[0])), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_43(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_44(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_45(val, _values, result)
     result = CommentNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 131)
  def _reduce_46(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_47(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_48(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 134)
  def _reduce_49(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_50(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 136)
  def _reduce_51(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_52(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_53(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_54(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 140)
  def _reduce_55(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_56(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_57(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_58(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_59(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_60(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_61(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 150)
  def _reduce_62(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_63(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_64(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 154)
  def _reduce_65(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_66(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_67(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_68(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_69(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_70(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 161)
  def _reduce_71(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_72(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_73(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 165)
  def _reduce_74(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_75(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_76(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_77(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 170)
  def _reduce_78(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_79(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_80(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_81(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_82(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_83(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_84(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_85(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_86(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 181)
  def _reduce_87(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_88(val, _values, result)
     result = ExistenceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 190)
  def _reduce_89(val, _values, result)
     result = CodeNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_90(val, _values, result)
     result = CodeNode.new([], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 196)
  def _reduce_91(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 197)
  def _reduce_92(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

# reduce 93 omitted

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_94(val, _values, result)
     result = ParamSplatNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 206)
  def _reduce_95(val, _values, result)
     result = ArgSplatNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 211)
  def _reduce_96(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 212)
  def _reduce_97(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 213)
  def _reduce_98(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 214)
  def _reduce_99(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 215)
  def _reduce_100(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 216)
  def _reduce_101(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 217)
  def _reduce_102(val, _values, result)
     result = ValueNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 222)
  def _reduce_103(val, _values, result)
     result = AccessorNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 223)
  def _reduce_104(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 224)
  def _reduce_105(val, _values, result)
     result = SliceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 229)
  def _reduce_106(val, _values, result)
     result = IndexNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_107(val, _values, result)
     result = ObjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 239)
  def _reduce_108(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 240)
  def _reduce_109(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 241)
  def _reduce_110(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 242)
  def _reduce_111(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_112(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_113(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 250)
  def _reduce_114(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 251)
  def _reduce_115(val, _values, result)
     result = val[1].new_instance 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_116(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_117(val, _values, result)
     result = ExtendsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_118(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_119(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 268)
  def _reduce_120(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 269)
  def _reduce_121(val, _values, result)
     result = val[1] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 274)
  def _reduce_122(val, _values, result)
     result = CallNode.new(:super, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 280)
  def _reduce_123(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 282)
  def _reduce_124(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 287)
  def _reduce_125(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 292)
  def _reduce_126(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_127(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 294)
  def _reduce_128(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 295)
  def _reduce_129(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 296)
  def _reduce_130(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 297)
  def _reduce_131(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 298)
  def _reduce_132(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 299)
  def _reduce_133(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 304)
  def _reduce_134(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 305)
  def _reduce_135(val, _values, result)
     result = TryNode.new(val[1], nil, nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 307)
  def _reduce_136(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 312)
  def _reduce_137(val, _values, result)
     result = [val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 317)
  def _reduce_138(val, _values, result)
     result = ThrowNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 322)
  def _reduce_139(val, _values, result)
     result = ParentheticalNode.new(val[1], val[0].line) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 327)
  def _reduce_140(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_141(val, _values, result)
     result = ForNode.new(val[0], val[3], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 335)
  def _reduce_142(val, _values, result)
     result = ForNode.new(val[3], val[2], val[1][0], val[1][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 340)
  def _reduce_143(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 341)
  def _reduce_144(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 346)
  def _reduce_145(val, _values, result)
     result = {:source => val[1]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 348)
  def _reduce_146(val, _values, result)
     result = val[0].merge(:filter => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 350)
  def _reduce_147(val, _values, result)
     result = val[0].merge(:step => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 356)
  def _reduce_148(val, _values, result)
     result = val[3].rewrite_condition(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 358)
  def _reduce_149(val, _values, result)
     result = val[3].rewrite_condition(val[1]).add_else(val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 363)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 364)
  def _reduce_151(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 369)
  def _reduce_152(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 371)
  def _reduce_153(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

# reduce 154 omitted

module_eval(<<'.,.,', 'grammar.y', 379)
  def _reduce_155(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 384)
  def _reduce_156(val, _values, result)
     result = val[1].force_statement 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 389)
  def _reduce_157(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 390)
  def _reduce_158(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 395)
  def _reduce_159(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 396)
  def _reduce_160(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 401)
  def _reduce_161(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 402)
  def _reduce_162(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 407)
  def _reduce_163(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 408)
  def _reduce_164(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 409)
  def _reduce_165(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true, :invert => true}) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
