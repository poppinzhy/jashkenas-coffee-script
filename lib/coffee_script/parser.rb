#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

module CoffeeScript

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 395)
  # Lex and parse a CoffeeScript.
  def parse(code)
    # Uncomment the following line to enable grammar debugging, in combination
    # with the -g flag in the Rake build task.
    # @yydebug = true
    @tokens = Lexer.new.tokenize(code)
    do_parse
  end

  # Retrieve the next token from the list.
  def next_token
    @tokens.shift
  end

  # Raise a custom error class that knows about line numbers.
  def on_error(error_token_id, error_value, value_stack)
    raise ParseError.new(token_to_str(error_token_id), error_value, value_stack)
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'77,252,85,18,23,28,33,37,42,49,51,54,57,84,88,92,95,98,101,104,107,74',
'76,25,30,89,24,29,211,256,108,72,121,109,238,246,3,7,9,-157,-157,220',
'24,29,218,84,88,92,95,98,101,104,107,74,76,80,83,87,91,94,97,100,103',
'106,73,75,79,82,86,90,93,96,99,102,105,262,121,78,81,237,116,116,208',
'69,219,46,9,55,223,18,23,28,33,37,42,49,51,54,57,84,88,64,67,1,5,10',
'84,88,20,25,30,34,121,43,47,245,52,207,59,63,24,29,3,7,201,202,153,17',
'27,32,36,40,45,116,24,29,211,58,212,121,18,23,28,33,37,42,49,51,54,57',
'117,117,271,228,125,112,24,29,211,239,25,30,24,29,211,19,116,116,198',
'38,257,46,9,55,7,18,23,28,33,37,42,49,51,54,57,-157,-157,64,67,1,5,10',
'236,143,20,25,30,34,121,43,47,142,52,117,59,63,129,112,3,7,133,64,67',
'17,27,32,36,40,45,116,69,121,46,58,55,3,18,23,28,33,37,42,49,51,54,57',
'117,117,274,156,125,112,24,29,211,155,25,30,-157,-157,232,19,153,116',
'129,38,121,46,9,55,7,18,23,28,33,37,42,49,51,54,57,-157,-157,64,67,1',
'5,10,121,143,20,25,30,34,121,43,47,142,52,117,59,63,234,112,3,7,275',
'143,208,17,27,32,36,40,45,142,69,,46,58,55,3,18,23,28,33,37,42,49,51',
'54,57,,117,-157,-157,143,125,,3,,144,25,30,142,,116,19,84,88,,38,,46',
'9,55,7,18,23,28,33,37,42,49,51,54,57,115,3,64,67,1,5,10,24,29,20,25',
'30,34,,43,47,265,52,143,59,63,24,29,3,7,,142,,17,27,32,36,40,45,,69',
',46,58,55,,214,114,,256,24,29,-157,-157,117,3,3,144,112,267,84,88,92',
'95,98,101,104,107,74,76,116,19,-157,-157,,38,,46,9,55,,18,23,28,33,37',
'42,49,51,54,57,115,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3',
'7,,,,17,27,32,36,40,45,24,29,218,,58,,216,,114,84,88,92,95,98,,117,',
',,112,84,88,92,95,98,101,104,107,74,76,,,19,,,,38,,46,9,55,,18,23,28',
'33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63',
',,3,7,,,,17,27,32,36,40,45,,,,,58,84,88,92,95,98,101,104,107,74,76,80',
'83,87,91,94,97,100,103,106,73,75,84,88,92,95,98,,19,,,,38,,46,9,55,',
'18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52',
',59,63,,,3,7,133,,,17,27,32,36,40,45,,,,,58,84,88,92,95,98,101,104,107',
'74,76,80,83,87,91,94,97,100,103,106,73,75,,,,,,,19,,,,38,,46,9,55,,18',
'23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,',
'59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,84,88,92,95,98,101,104,107,74',
'76,80,83,87,91,94,97,100,103,106,73,75,,,,,,,19,,,,38,,46,9,55,,18,23',
'28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59',
'63,,,3,7,,205,,17,27,32,36,40,45,,,,,58,84,88,92,95,98,101,104,107,74',
'76,80,83,87,91,94,97,100,103,106,73,75,,,,,,,19,,,,38,,46,9,55,,18,23',
'28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59',
'63,,,3,7,,,,17,27,32,36,40,45,,,,,58,84,88,92,95,98,101,104,107,74,76',
'80,83,87,91,94,97,100,103,106,73,75,,,,,,,19,,,,38,,46,9,55,,18,23,28',
'33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63',
',,3,7,,,,17,27,32,36,40,45,,,,,58,84,88,92,95,98,101,104,107,74,76,80',
'83,87,91,94,97,100,103,106,73,75,,,,,,,19,,,,38,,46,9,55,,18,23,28,33',
'37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3',
'7,,,,17,27,32,36,40,45,,,,,58,84,88,92,95,98,101,104,107,74,76,80,83',
'87,91,94,97,100,103,106,73,75,,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37',
'42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7',
',,,17,27,32,36,40,45,,,,,58,84,88,92,95,98,101,104,107,74,76,80,83,87',
'91,94,97,100,103,106,73,75,,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42',
'49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,',
'17,27,32,36,40,45,,,,,58,84,88,92,95,98,101,104,107,74,76,80,83,87,84',
'88,92,95,98,101,104,107,74,76,80,83,87,,19,,,,38,,46,9,55,,18,23,28',
'33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63',
',,3,7,,,,17,27,32,36,40,45,,,,,58,84,88,92,95,98,101,104,107,74,76,80',
'83,87,84,88,92,95,98,101,104,107,74,76,80,83,87,,19,,,,38,,46,9,55,',
'18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52',
',59,63,,,3,7,133,,,17,27,32,36,40,45,,,,,58,84,88,92,95,98,101,104,84',
'88,92,95,98,101,104,84,88,92,95,98,101,104,,,,,,,19,,,,38,,46,9,55,',
'18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52',
',59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20',
'25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,',
',,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57',
',,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36',
'40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28',
'33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63',
',,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,24,29',
',38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30',
'34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,',
',,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,,64',
'67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45',
',,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37',
'42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7',
',,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46',
'9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43',
'47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,',
',,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5',
'10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58',
',,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51',
'54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27',
'32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18',
'23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,',
'59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19',
',,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25',
'30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,',
',,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,',
'64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40',
'45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33',
'37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3',
'7,133,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38',
',46,9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34',
',43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,',
',,,,,,,,,,,19,24,29,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,,64',
'67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,133,,,17,27,32,36,40',
'45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33',
'37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3',
'7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46',
'9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43',
'47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,',
',,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5',
'10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58',
',,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51',
'54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27',
'32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18',
'23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,',
'59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19',
',,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25',
'30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,',
',,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,',
'64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40',
'45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33',
'37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3',
'7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46',
'9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43',
'47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,',
',,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5',
'10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58',
',,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51',
'54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27',
'32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18',
'23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,',
'59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19',
',,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25',
'30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,',
',,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,',
'64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40',
'45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33',
'37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3',
'7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46',
'9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43',
'47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,',
',,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5',
'10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58',
',,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51',
'54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27',
'32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18',
'23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,',
'59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19',
',,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25',
'30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,',
',,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,',
'64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40',
'45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33',
'37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3',
'7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46',
'9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43',
'47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,',
',,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5',
'10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58',
',,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51',
'54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27',
'32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18',
'23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,',
'59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19',
',,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25',
'30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,',
',,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,',
'64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40',
'45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33',
'37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3',
'7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46',
'9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43',
'47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,',
',,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5',
'10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,133,,,17,27,32,36,40,45,,,',
',58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42',
'49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,',
'17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55',
',18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,,,20,25,30,34,,43,47,',
'52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,,,,,,,,,,,,,,,,,,,,,,',
',,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51,54,57,,,64,67,1,5,10,',
',20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32,36,40,45,,,,,58,,,',
',,,,,,,,,,,,,,,,,,,,,,,,19,,,,38,,46,9,55,,18,23,28,33,37,42,49,51,54',
'57,,,64,67,1,5,10,,,20,25,30,34,,43,47,,52,,59,63,,,3,7,,,,17,27,32',
'36,40,45,77,,85,,58,,,,,,,,,,,,,,,,,,,,,89,,,,,,72,19,,,,38,,46,,55',
',,,,84,88,92,95,98,101,104,107,74,76,80,83,87,91,94,97,100,103,106,73',
'75,79,82,86,90,93,96,99,102,105,,,78,81,77,,85,,,233,,,,,,,,,,,,,,,',
',,,,89,,,,,,72,,,,,,,,,,,,,,84,88,92,95,98,101,104,107,74,76,80,83,87',
'91,94,97,100,103,106,73,75,79,82,86,90,93,96,99,102,105,,,78,81,77,',
'85,,,,,,,,,,,,,,,,,,,,,,,89,,,,,,72,,,,,,,,,,,,,,84,88,92,95,98,101',
'104,107,74,76,80,83,87,91,94,97,100,103,106,73,75,79,82,86,90,93,96',
'99,102,105,,,78,81,77,,85,,,,,,,,,,,,,,,,,,,,,,,89,,,,,,72,,,,,,,121',
',,,,,,84,88,92,95,98,101,104,107,74,76,80,83,87,91,94,97,100,103,106',
'73,75,79,82,86,90,93,96,99,102,105,,,78,81,77,,85,,,,,,,,,,,,,,,,,,',
',,,,89,,,,,,72,,,,,,,121,,,,,,,84,88,92,95,98,101,104,107,74,76,80,83',
'87,91,94,97,100,103,106,73,75,79,82,86,90,93,96,99,102,105,,,78,81,77',
',85,,,,,,,,,,,,,,,,,,,,,,,89,,,,,,72,,,,,,,121,,,,,,,84,88,92,95,98',
'101,104,107,74,76,80,83,87,91,94,97,100,103,106,73,75,79,82,86,90,93',
'96,99,102,105,,,78,81,77,,85,,,,,,,,,,,,,,,,,,,,,,,89,,,,,,72,,,,,,',
',,,,,,,84,88,92,95,98,101,104,107,74,76,80,83,87,91,94,97,100,103,106',
'73,75,79,82,86,90,93,96,99,102,105,,,78,81,77,,85,,,,,,,,,,,,,,,,,,',
',,,,89,,,,,,72,,,,,,,222,,,,,,,84,88,92,95,98,101,104,107,74,76,80,83',
'87,91,94,97,100,103,106,73,75,79,82,86,90,93,96,99,102,105,,,78,81,77',
',85,,,,,,,,,,,,,,,,,,,,,,,89,,,,,,72,,,,,,,,,,,,,,84,88,92,95,98,101',
'104,107,74,76,80,83,87,91,94,97,100,103,106,73,75,79,82,86,90,93,96',
'99,102,105,,,78,81,77,,85,,,,,,,,,,,,,,,,,,,,,,,89,,,,,,72,,,,,,,,,',
',,,,84,88,92,95,98,101,104,107,74,76,80,83,87,91,94,97,100,103,106,73',
'75,79,82,86,90,93,96,99,102,105,,,78,81,77,,85,,,,,,,,,,,,,,,,,,,,,',
',89,,,,,,72,,,,,,,,,,,,,,84,88,92,95,98,101,104,107,74,76,80,83,87,91',
'94,97,100,103,106,73,75,79,82,86,90,93,96,99,102,105,,,78,81,77,,85',
',,,,,,,,,,,,,,,,,,,,,,89,,,,,,72,,,,,,,,,,,,,,84,88,92,95,98,101,104',
'107,74,76,80,83,87,91,94,97,100,103,106,73,75,79,82,86,90,93,96,99,102',
'105,,,78,81,77,,85,,,,,,,,,,,,,,,,,,,,,,,89,,,,,,72,,,,,,,,,,,,,,84',
'88,92,95,98,101,104,107,74,76,80,83,87,91,94,97,100,103,106,73,75,79',
'82,86,90,93,96,99,102,105,,,78,81,77,,85,,,,,,,,,,,,,,,,,,,,,,,89,,',
',,,72,,,,,,,,,,,,,,84,88,92,95,98,101,104,107,74,76,80,83,87,91,94,97',
'100,103,106,73,75,79,82,86,90,93,96,99,102,105,,,78,81,77,,85,,,,,,',
',,,,,,,,,,,,,,,,89,,,,,,72,,,,,,,,,,,,,,84,88,92,95,98,101,104,107,74',
'76,80,83,87,91,94,97,100,103,106,73,75,79,82,86,90,93,96,99,102,105',
'77,,85,,,,,,,,,,,,,,,,,,,,,,,89,,,,,,72,,,,,,,,,,,,,,84,88,92,95,98',
'101,104,107,74,76,80,83,87,91,94,97,100,103,106,73,75,79,82,86,90,93',
'96,99,102,105,77,,85,,,,,,,,,,,,,,,,,,,,,,,89,,,,,,72,,,,,,,,,,,,,,84',
'88,92,95,98,101,104,107,74,76,80,83,87,91,94,97,100,103,106,73,75,79',
'82,86,90,93,96,99,102,105,89,,,,,,72,,,,,,,,,,,,,,84,88,92,95,98,101',
'104,107,74,76,80,83,87,91,94,97,100,103,106,73,75,79,82,86,90,93,96',
'99,102,105,89,,,,,,72,,,,,,,,,,,,,,84,88,92,95,98,101,104,107,74,76',
'80,83,87,91,94,97,100,103,106,73,75,79,82,86,90,93,96,99,102,105,89',
',,,,,72,,,,,,,,,,,,,,84,88,92,95,98,101,104,107,74,76,80,83,87,91,94',
'97,100,103,106,73,75,79,82,86,90,93,96,99,102,105,89,,,,260,,72,,,,',
',,,,,,,,,84,88,92,95,98,101,104,107,74,76,80,83,87,91,94,97,100,103',
'106,73,75,79,82,86,90,93,96,99,102,105,89,,,,,,72,,,,,,,,,,,,,,84,88',
'92,95,98,101,104,107,74,76,80,83,87,91,94,97,100,103,106,73,75,79,82',
'86,90,93,96,99,102,105,72,,,,,,,,,,,,,,84,88,92,95,98,101,104,107,74',
'76,80,83,87,91,94,97,100,103,106,73,75,79,82,86,90,93,96,99,102,105',
'72,,,,,,,,,,,,,,84,88,92,95,98,101,104,107,74,76,80,83,87,91,94,97,100',
'103,106,73,75,79,82,86,90,93,96,99,102,105,72,,,,,,,,,,,,,,84,88,92',
'95,98,101,104,107,74,76,80,83,87,91,94,97,100,103,106,73,75,79,82,86',
'90,93,96,99,102,105,84,88,92,95,98,101,104,107,74,76,80,83,87,91,94',
'97,100,103,106,73,75,79,82,86,90,93,96,99,102,105,84,88,92,95,98,101',
'104,107,74,76,80,83,87,91,94,97,100,103,106,73,75,79,82,86,90,93,96',
'99,102,105,84,88,92,95,98,101,104,107,74,76,80,83,87,91,94,97,100,103',
'106,73,75,79,82,86,90,93,96,99,102,105,84,88,92,95,98,101,104,107,74',
'76,80,83,87,91,94,97,100,103,106,73,75,79,82,86,90,93,96,99,102,105',
'84,88,92,95,98,101,104,107,74,76,80,83,87,91,94,97,100,103,106,73,75',
'79,82,86,90,93,96,99,102,105' ]
        racc_action_table = arr = Array.new(7672, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'147,221,147,246,246,246,246,246,246,246,246,246,246,172,172,172,172',
'172,172,172,172,172,172,246,246,147,206,206,206,222,4,147,234,4,206',
'214,222,246,153,127,127,143,221,221,221,147,147,147,147,147,147,147',
'147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147',
'147,147,147,147,147,147,246,153,147,147,204,197,263,130,246,142,246',
'90,246,147,90,90,90,90,90,90,90,90,90,90,179,179,90,90,90,90,90,182',
'182,90,90,90,90,236,90,90,213,90,129,90,90,204,204,90,90,120,120,150',
'90,90,90,90,90,90,196,132,132,132,90,132,209,1,1,1,1,1,1,1,1,1,1,197',
'263,263,155,197,263,213,213,213,207,1,1,229,229,229,90,22,270,116,90',
'229,90,125,90,1,125,125,125,125,125,125,125,125,125,125,122,122,125',
'125,125,125,125,203,249,125,125,125,125,108,125,125,249,125,196,125',
'125,89,196,125,125,125,109,109,125,125,125,125,125,125,70,1,202,1,125',
'1,249,262,262,262,262,262,262,262,262,262,262,22,270,270,63,22,270,194',
'194,194,62,262,262,128,128,194,125,61,71,34,125,265,125,220,125,262',
'220,220,220,220,220,220,220,220,220,220,148,148,220,220,220,220,220',
'19,217,220,220,220,220,10,220,220,217,220,70,220,220,201,70,220,220',
'272,46,173,220,220,220,220,220,220,46,262,,262,220,262,217,115,115,115',
'115,115,115,115,115,115,115,,71,131,131,218,71,,46,,46,115,115,218,',
'135,220,176,176,,220,,220,5,220,115,5,5,5,5,5,5,5,5,5,5,135,218,5,5',
'5,5,5,68,68,5,5,5,5,,5,5,254,5,144,5,5,273,273,5,5,,144,,5,5,5,5,5,5',
',115,,115,5,115,,135,135,,254,218,218,138,138,135,144,254,144,135,254',
'169,169,169,169,169,169,169,169,169,169,6,5,136,136,,5,,5,157,5,,157',
'157,157,157,157,157,157,157,157,157,6,,157,157,157,157,157,,,157,157',
'157,157,,157,157,,157,,157,157,,,157,157,,,,157,157,157,157,157,157',
'140,140,140,,157,,140,,6,188,188,188,188,188,,6,,,,6,166,166,166,166',
'166,166,166,166,166,166,,,157,,,,157,,157,9,157,,9,9,9,9,9,9,9,9,9,9',
',,9,9,9,9,9,,,9,9,9,9,,9,9,,9,,9,9,,,9,9,,,,9,9,9,9,9,9,,,,,9,171,171',
'171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171',
'171,171,185,185,185,185,185,,9,,,,9,,9,156,9,,156,156,156,156,156,156',
'156,156,156,156,,,156,156,156,156,156,,,156,156,156,156,,156,156,,156',
',156,156,,,156,156,156,,,156,156,156,156,156,156,,,,,156,187,187,187',
'187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187',
'187,,,,,,,156,,,,156,,156,17,156,,17,17,17,17,17,17,17,17,17,17,,,17',
'17,17,17,17,,,17,17,17,17,,17,17,,17,,17,17,,,17,17,,,,17,17,17,17,17',
'17,,,,,17,174,174,174,174,174,174,174,174,174,174,174,174,174,174,174',
'174,174,174,174,174,174,,,,,,,17,,,,17,,17,121,17,,121,121,121,121,121',
'121,121,121,121,121,,,121,121,121,121,121,,,121,121,121,121,,121,121',
',121,,121,121,,,121,121,,121,,121,121,121,121,121,121,,,,,121,168,168',
'168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168',
'168,168,,,,,,,121,,,,121,,121,20,121,,20,20,20,20,20,20,20,20,20,20',
',,20,20,20,20,20,,,20,20,20,20,,20,20,,20,,20,20,,,20,20,,,,20,20,20',
'20,20,20,,,,,20,159,159,159,159,159,159,159,159,159,159,159,159,159',
'159,159,159,159,159,159,159,159,,,,,,,20,,,,20,,20,208,20,,208,208,208',
'208,208,208,208,208,208,208,,,208,208,208,208,208,,,208,208,208,208',
',208,208,,208,,208,208,,,208,208,,,,208,208,208,208,208,208,,,,,208',
'161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161',
'161,161,161,161,,,,,,,208,,,,208,,208,27,208,,27,27,27,27,27,27,27,27',
'27,27,,,27,27,27,27,27,,,27,27,27,27,,27,27,,27,,27,27,,,27,27,,,,27',
'27,27,27,27,27,,,,,27,165,165,165,165,165,165,165,165,165,165,165,165',
'165,165,165,165,165,165,165,165,165,,,,,,,27,,,,27,,27,32,27,,32,32',
'32,32,32,32,32,32,32,32,,,32,32,32,32,32,,,32,32,32,32,,32,32,,32,,32',
'32,,,32,32,,,,32,32,32,32,32,32,,,,,32,190,190,190,190,190,190,190,190',
'190,190,190,190,190,190,190,190,190,190,190,190,190,,,,,,,32,,,,32,',
'32,210,32,,210,210,210,210,210,210,210,210,210,210,,,210,210,210,210',
'210,,,210,210,210,210,,210,210,,210,,210,210,,,210,210,,,,210,210,210',
'210,210,210,,,,,210,178,178,178,178,178,178,178,178,178,178,178,178',
'178,181,181,181,181,181,181,181,181,181,181,181,181,181,,210,,,,210',
',210,36,210,,36,36,36,36,36,36,36,36,36,36,,,36,36,36,36,36,,,36,36',
'36,36,,36,36,,36,,36,36,,,36,36,,,,36,36,36,36,36,36,,,,,36,175,175',
'175,175,175,175,175,175,175,175,175,175,175,184,184,184,184,184,184',
'184,184,184,184,184,184,184,,36,,,,36,,36,38,36,,38,38,38,38,38,38,38',
'38,38,38,,,38,38,38,38,38,,,38,38,38,38,,38,38,,38,,38,38,,,38,38,38',
',,38,38,38,38,38,38,,,,,38,191,191,191,191,191,191,191,160,160,160,160',
'160,160,160,162,162,162,162,162,162,162,,,,,,,38,,,,38,,38,40,38,,40',
'40,40,40,40,40,40,40,40,40,,,40,40,40,40,40,,,40,40,40,40,,40,40,,40',
',40,40,,,40,40,,,,40,40,40,40,40,40,,,,,40,,,,,,,,,,,,,,,,,,,,,,,,,',
',,40,,,,40,,40,43,40,,43,43,43,43,43,43,43,43,43,43,,,43,43,43,43,43',
',,43,43,43,43,,43,43,,43,,43,43,,,43,43,,,,43,43,43,43,43,43,,,,,43',
',,,,,,,,,,,,,,,,,,,,,,,,,,,43,,,,43,,43,45,43,,45,45,45,45,45,45,45',
'45,45,45,,,45,45,45,45,45,,,45,45,45,45,,45,45,,45,,45,45,,,45,45,,',
',45,45,45,45,45,45,,,,,45,,,,,,,,,,,,,,,,,,,,,,,,,,,,45,,,,45,,45,211',
'45,,211,211,211,211,211,211,211,211,211,211,,,211,211,211,211,211,,',
'211,211,211,211,,211,211,,211,,211,211,,,211,211,,,,211,211,211,211',
'211,211,,,,,211,,,,,,,,,,,,,,,,,,,,,,,,,,,,211,211,211,,211,,211,47',
'211,,47,47,47,47,47,47,47,47,47,47,,,47,47,47,47,47,,,47,47,47,47,,47',
'47,,47,,47,47,,,47,47,,,,47,47,47,47,47,47,,,,,47,,,,,,,,,,,,,,,,,,',
',,,,,,,,,47,,,,47,,47,52,47,,52,52,52,52,52,52,52,52,52,52,,,52,52,52',
'52,52,,,52,52,52,52,,52,52,,52,,52,52,,,52,52,,,,52,52,52,52,52,52,',
',,,52,,,,,,,,,,,,,,,,,,,,,,,,,,,,52,,,,52,,52,55,52,,55,55,55,55,55',
'55,55,55,55,55,,,55,55,55,55,55,,,55,55,55,55,,55,55,,55,,55,55,,,55',
'55,,,,55,55,55,55,55,55,,,,,55,,,,,,,,,,,,,,,,,,,,,,,,,,,,55,,,,55,',
'55,58,55,,58,58,58,58,58,58,58,58,58,58,,,58,58,58,58,58,,,58,58,58',
'58,,58,58,,58,,58,58,,,58,58,,,,58,58,58,58,58,58,,,,,58,,,,,,,,,,,',
',,,,,,,,,,,,,,,,58,,,,58,,58,59,58,,59,59,59,59,59,59,59,59,59,59,,',
'59,59,59,59,59,,,59,59,59,59,,59,59,,59,,59,59,,,59,59,,,,59,59,59,59',
'59,59,,,,,59,,,,,,,,,,,,,,,,,,,,,,,,,,,,59,,,,59,,59,117,59,,117,117',
'117,117,117,117,117,117,117,117,,,117,117,117,117,117,,,117,117,117',
'117,,117,117,,117,,117,117,,,117,117,,,,117,117,117,117,117,117,,,,',
'117,,,,,,,,,,,,,,,,,,,,,,,,,,,,117,,,,117,,117,114,117,,114,114,114',
'114,114,114,114,114,114,114,,,114,114,114,114,114,,,114,114,114,114',
',114,114,,114,,114,114,,,114,114,,,,114,114,114,114,114,114,,,,,114',
',,,,,,,,,,,,,,,,,,,,,,,,,,,114,,,,114,,114,260,114,,260,260,260,260',
'260,260,260,260,260,260,,,260,260,260,260,260,,,260,260,260,260,,260',
'260,,260,,260,260,,,260,260,,,,260,260,260,260,260,260,,,,,260,,,,,',
',,,,,,,,,,,,,,,,,,,,,,260,,,,260,,260,256,260,,256,256,256,256,256,256',
'256,256,256,256,,,256,256,256,256,256,,,256,256,256,256,,256,256,,256',
',256,256,,,256,256,,,,256,256,256,256,256,256,,,,,256,,,,,,,,,,,,,,',
',,,,,,,,,,,,,256,,,,256,,256,69,256,,69,69,69,69,69,69,69,69,69,69,',
',69,69,69,69,69,,,69,69,69,69,,69,69,,69,,69,69,,,69,69,69,,,69,69,69',
'69,69,69,,,,,69,,,,,,,,,,,,,,,,,,,,,,,,,,,,69,,,,69,,69,0,69,,0,0,0',
'0,0,0,0,0,0,0,,,0,0,0,0,0,,,0,0,0,0,,0,0,,0,,0,0,,,0,0,,,,0,0,0,0,0',
'0,,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,0,0,0,,0,,0,112,0,,112,112,112,112',
'112,112,112,112,112,112,,,112,112,112,112,112,,,112,112,112,112,,112',
'112,,112,,112,112,,,112,112,112,,,112,112,112,112,112,112,,,,,112,,',
',,,,,,,,,,,,,,,,,,,,,,,,,112,,,,112,,112,72,112,,72,72,72,72,72,72,72',
'72,72,72,,,72,72,72,72,72,,,72,72,72,72,,72,72,,72,,72,72,,,72,72,,',
',72,72,72,72,72,72,,,,,72,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,,,,72,,72,73',
'72,,73,73,73,73,73,73,73,73,73,73,,,73,73,73,73,73,,,73,73,73,73,,73',
'73,,73,,73,73,,,73,73,,,,73,73,73,73,73,73,,,,,73,,,,,,,,,,,,,,,,,,',
',,,,,,,,,73,,,,73,,73,74,73,,74,74,74,74,74,74,74,74,74,74,,,74,74,74',
'74,74,,,74,74,74,74,,74,74,,74,,74,74,,,74,74,,,,74,74,74,74,74,74,',
',,,74,,,,,,,,,,,,,,,,,,,,,,,,,,,,74,,,,74,,74,75,74,,75,75,75,75,75',
'75,75,75,75,75,,,75,75,75,75,75,,,75,75,75,75,,75,75,,75,,75,75,,,75',
'75,,,,75,75,75,75,75,75,,,,,75,,,,,,,,,,,,,,,,,,,,,,,,,,,,75,,,,75,',
'75,76,75,,76,76,76,76,76,76,76,76,76,76,,,76,76,76,76,76,,,76,76,76',
'76,,76,76,,76,,76,76,,,76,76,,,,76,76,76,76,76,76,,,,,76,,,,,,,,,,,',
',,,,,,,,,,,,,,,,76,,,,76,,76,77,76,,77,77,77,77,77,77,77,77,77,77,,',
'77,77,77,77,77,,,77,77,77,77,,77,77,,77,,77,77,,,77,77,,,,77,77,77,77',
'77,77,,,,,77,,,,,,,,,,,,,,,,,,,,,,,,,,,,77,,,,77,,77,78,77,,78,78,78',
'78,78,78,78,78,78,78,,,78,78,78,78,78,,,78,78,78,78,,78,78,,78,,78,78',
',,78,78,,,,78,78,78,78,78,78,,,,,78,,,,,,,,,,,,,,,,,,,,,,,,,,,,78,,',
',78,,78,79,78,,79,79,79,79,79,79,79,79,79,79,,,79,79,79,79,79,,,79,79',
'79,79,,79,79,,79,,79,79,,,79,79,,,,79,79,79,79,79,79,,,,,79,,,,,,,,',
',,,,,,,,,,,,,,,,,,,79,,,,79,,79,80,79,,80,80,80,80,80,80,80,80,80,80',
',,80,80,80,80,80,,,80,80,80,80,,80,80,,80,,80,80,,,80,80,,,,80,80,80',
'80,80,80,,,,,80,,,,,,,,,,,,,,,,,,,,,,,,,,,,80,,,,80,,80,81,80,,81,81',
'81,81,81,81,81,81,81,81,,,81,81,81,81,81,,,81,81,81,81,,81,81,,81,,81',
'81,,,81,81,,,,81,81,81,81,81,81,,,,,81,,,,,,,,,,,,,,,,,,,,,,,,,,,,81',
',,,81,,81,82,81,,82,82,82,82,82,82,82,82,82,82,,,82,82,82,82,82,,,82',
'82,82,82,,82,82,,82,,82,82,,,82,82,,,,82,82,82,82,82,82,,,,,82,,,,,',
',,,,,,,,,,,,,,,,,,,,,,82,,,,82,,82,83,82,,83,83,83,83,83,83,83,83,83',
'83,,,83,83,83,83,83,,,83,83,83,83,,83,83,,83,,83,83,,,83,83,,,,83,83',
'83,83,83,83,,,,,83,,,,,,,,,,,,,,,,,,,,,,,,,,,,83,,,,83,,83,85,83,,85',
'85,85,85,85,85,85,85,85,85,,,85,85,85,85,85,,,85,85,85,85,,85,85,,85',
',85,85,,,85,85,,,,85,85,85,85,85,85,,,,,85,,,,,,,,,,,,,,,,,,,,,,,,,',
',,85,,,,85,,85,86,85,,86,86,86,86,86,86,86,86,86,86,,,86,86,86,86,86',
',,86,86,86,86,,86,86,,86,,86,86,,,86,86,,,,86,86,86,86,86,86,,,,,86',
',,,,,,,,,,,,,,,,,,,,,,,,,,,86,,,,86,,86,87,86,,87,87,87,87,87,87,87',
'87,87,87,,,87,87,87,87,87,,,87,87,87,87,,87,87,,87,,87,87,,,87,87,,',
',87,87,87,87,87,87,,,,,87,,,,,,,,,,,,,,,,,,,,,,,,,,,,87,,,,87,,87,219',
'87,,219,219,219,219,219,219,219,219,219,219,,,219,219,219,219,219,,',
'219,219,219,219,,219,219,,219,,219,219,,,219,219,,,,219,219,219,219',
'219,219,,,,,219,,,,,,,,,,,,,,,,,,,,,,,,,,,,219,,,,219,,219,243,219,',
'243,243,243,243,243,243,243,243,243,243,,,243,243,243,243,243,,,243',
'243,243,243,,243,243,,243,,243,243,,,243,243,,,,243,243,243,243,243',
'243,,,,,243,,,,,,,,,,,,,,,,,,,,,,,,,,,,243,,,,243,,243,91,243,,91,91',
'91,91,91,91,91,91,91,91,,,91,91,91,91,91,,,91,91,91,91,,91,91,,91,,91',
'91,,,91,91,,,,91,91,91,91,91,91,,,,,91,,,,,,,,,,,,,,,,,,,,,,,,,,,,91',
',,,91,,91,92,91,,92,92,92,92,92,92,92,92,92,92,,,92,92,92,92,92,,,92',
'92,92,92,,92,92,,92,,92,92,,,92,92,,,,92,92,92,92,92,92,,,,,92,,,,,',
',,,,,,,,,,,,,,,,,,,,,,92,,,,92,,92,93,92,,93,93,93,93,93,93,93,93,93',
'93,,,93,93,93,93,93,,,93,93,93,93,,93,93,,93,,93,93,,,93,93,,,,93,93',
'93,93,93,93,,,,,93,,,,,,,,,,,,,,,,,,,,,,,,,,,,93,,,,93,,93,94,93,,94',
'94,94,94,94,94,94,94,94,94,,,94,94,94,94,94,,,94,94,94,94,,94,94,,94',
',94,94,,,94,94,,,,94,94,94,94,94,94,,,,,94,,,,,,,,,,,,,,,,,,,,,,,,,',
',,94,,,,94,,94,95,94,,95,95,95,95,95,95,95,95,95,95,,,95,95,95,95,95',
',,95,95,95,95,,95,95,,95,,95,95,,,95,95,,,,95,95,95,95,95,95,,,,,95',
',,,,,,,,,,,,,,,,,,,,,,,,,,,95,,,,95,,95,96,95,,96,96,96,96,96,96,96',
'96,96,96,,,96,96,96,96,96,,,96,96,96,96,,96,96,,96,,96,96,,,96,96,,',
',96,96,96,96,96,96,,,,,96,,,,,,,,,,,,,,,,,,,,,,,,,,,,96,,,,96,,96,97',
'96,,97,97,97,97,97,97,97,97,97,97,,,97,97,97,97,97,,,97,97,97,97,,97',
'97,,97,,97,97,,,97,97,,,,97,97,97,97,97,97,,,,,97,,,,,,,,,,,,,,,,,,',
',,,,,,,,,97,,,,97,,97,98,97,,98,98,98,98,98,98,98,98,98,98,,,98,98,98',
'98,98,,,98,98,98,98,,98,98,,98,,98,98,,,98,98,,,,98,98,98,98,98,98,',
',,,98,,,,,,,,,,,,,,,,,,,,,,,,,,,,98,,,,98,,98,99,98,,99,99,99,99,99',
'99,99,99,99,99,,,99,99,99,99,99,,,99,99,99,99,,99,99,,99,,99,99,,,99',
'99,,,,99,99,99,99,99,99,,,,,99,,,,,,,,,,,,,,,,,,,,,,,,,,,,99,,,,99,',
'99,100,99,,100,100,100,100,100,100,100,100,100,100,,,100,100,100,100',
'100,,,100,100,100,100,,100,100,,100,,100,100,,,100,100,,,,100,100,100',
'100,100,100,,,,,100,,,,,,,,,,,,,,,,,,,,,,,,,,,,100,,,,100,,100,101,100',
',101,101,101,101,101,101,101,101,101,101,,,101,101,101,101,101,,,101',
'101,101,101,,101,101,,101,,101,101,,,101,101,,,,101,101,101,101,101',
'101,,,,,101,,,,,,,,,,,,,,,,,,,,,,,,,,,,101,,,,101,,101,102,101,,102',
'102,102,102,102,102,102,102,102,102,,,102,102,102,102,102,,,102,102',
'102,102,,102,102,,102,,102,102,,,102,102,,,,102,102,102,102,102,102',
',,,,102,,,,,,,,,,,,,,,,,,,,,,,,,,,,102,,,,102,,102,103,102,,103,103',
'103,103,103,103,103,103,103,103,,,103,103,103,103,103,,,103,103,103',
'103,,103,103,,103,,103,103,,,103,103,,,,103,103,103,103,103,103,,,,',
'103,,,,,,,,,,,,,,,,,,,,,,,,,,,,103,,,,103,,103,133,103,,133,133,133',
'133,133,133,133,133,133,133,,,133,133,133,133,133,,,133,133,133,133',
',133,133,,133,,133,133,,,133,133,133,,,133,133,133,133,133,133,,,,,133',
',,,,,,,,,,,,,,,,,,,,,,,,,,,133,,,,133,,133,105,133,,105,105,105,105',
'105,105,105,105,105,105,,,105,105,105,105,105,,,105,105,105,105,,105',
'105,,105,,105,105,,,105,105,,,,105,105,105,105,105,105,,,,,105,,,,,',
',,,,,,,,,,,,,,,,,,,,,,105,,,,105,,105,106,105,,106,106,106,106,106,106',
'106,106,106,106,,,106,106,106,106,106,,,106,106,106,106,,106,106,,106',
',106,106,,,106,106,,,,106,106,106,106,106,106,,,,,106,,,,,,,,,,,,,,',
',,,,,,,,,,,,,106,,,,106,,106,107,106,,107,107,107,107,107,107,107,107',
'107,107,,,107,107,107,107,107,,,107,107,107,107,,107,107,,107,,107,107',
',,107,107,,,,107,107,107,107,107,107,,,,,107,,,,,,,,,,,,,,,,,,,,,,,',
',,,,107,,,,107,,107,104,107,,104,104,104,104,104,104,104,104,104,104',
',,104,104,104,104,104,,,104,104,104,104,,104,104,,104,,104,104,,,104',
'104,,,,104,104,104,104,104,104,199,,199,,104,,,,,,,,,,,,,,,,,,,,,199',
',,,,,199,104,,,,104,,104,,104,,,,,199,199,199,199,199,199,199,199,199',
'199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199,199',
'199,199,199,199,,,199,199,250,,250,,,199,,,,,,,,,,,,,,,,,,,,250,,,,',
',250,,,,,,,,,,,,,,250,250,250,250,250,250,250,250,250,250,250,250,250',
'250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250',
',,250,250,261,,261,,,,,,,,,,,,,,,,,,,,,,,261,,,,,,261,,,,,,,,,,,,,,261',
'261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261',
'261,261,261,261,261,261,261,261,261,261,261,261,,,261,261,119,,119,',
',,,,,,,,,,,,,,,,,,,,,119,,,,,,119,,,,,,,119,,,,,,,119,119,119,119,119',
'119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119',
'119,119,119,119,119,119,119,119,,,119,119,137,,137,,,,,,,,,,,,,,,,,',
',,,,,137,,,,,,137,,,,,,,137,,,,,,,137,137,137,137,137,137,137,137,137',
'137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137',
'137,137,137,137,,,137,137,268,,268,,,,,,,,,,,,,,,,,,,,,,,268,,,,,,268',
',,,,,,268,,,,,,,268,268,268,268,268,268,268,268,268,268,268,268,268',
'268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268',
',,268,268,244,,244,,,,,,,,,,,,,,,,,,,,,,,244,,,,,,244,,,,,,,,,,,,,,244',
'244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244',
'244,244,244,244,244,244,244,244,244,244,244,244,,,244,244,145,,145,',
',,,,,,,,,,,,,,,,,,,,,145,,,,,,145,,,,,,,145,,,,,,,145,145,145,145,145',
'145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145,145',
'145,145,145,145,145,145,145,145,,,145,145,2,,2,,,,,,,,,,,,,,,,,,,,,',
',2,,,,,,2,,,,,,,,,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2',
'2,2,2,2,2,2,2,,,2,2,251,,251,,,,,,,,,,,,,,,,,,,,,,,251,,,,,,251,,,,',
',,,,,,,,,251,251,251,251,251,251,251,251,251,251,251,251,251,251,251',
'251,251,251,251,251,251,251,251,251,251,251,251,251,251,251,,,251,251',
'242,,242,,,,,,,,,,,,,,,,,,,,,,,242,,,,,,242,,,,,,,,,,,,,,242,242,242',
'242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242,242',
'242,242,242,242,242,242,242,242,242,242,,,242,242,134,,134,,,,,,,,,',
',,,,,,,,,,,,,134,,,,,,134,,,,,,,,,,,,,,134,134,134,134,134,134,134,134',
'134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134',
'134,134,134,134,134,,,134,134,230,,230,,,,,,,,,,,,,,,,,,,,,,,230,,,',
',,230,,,,,,,,,,,,,,230,230,230,230,230,230,230,230,230,230,230,230,230',
'230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230',
',,230,230,110,,110,,,,,,,,,,,,,,,,,,,,,,,110,,,,,,110,,,,,,,,,,,,,,110',
'110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110',
'110,110,110,110,110,110,110,110,110,110,110,110,,,110,110,195,,195,',
',,,,,,,,,,,,,,,,,,,,,195,,,,,,195,,,,,,,,,,,,,,195,195,195,195,195,195',
'195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195',
'195,195,195,195,195,195,195,167,,167,,,,,,,,,,,,,,,,,,,,,,,167,,,,,',
'167,,,,,,,,,,,,,,167,167,167,167,167,167,167,167,167,167,167,167,167',
'167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167',
'164,,164,,,,,,,,,,,,,,,,,,,,,,,164,,,,,,164,,,,,,,,,,,,,,164,164,164',
'164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164,164',
'164,164,164,164,164,164,164,164,164,164,170,,,,,,170,,,,,,,,,,,,,,170',
'170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170',
'170,170,170,170,170,170,170,170,170,170,170,170,124,,,,,,124,,,,,,,',
',,,,,,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124',
'124,124,124,124,124,124,124,124,124,124,124,124,124,124,269,,,,,,269',
',,,,,,,,,,,,,269,269,269,269,269,269,269,269,269,269,269,269,269,269',
'269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,240',
',,,240,,240,,,,,,,,,,,,,,240,240,240,240,240,240,240,240,240,240,240',
'240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240',
'240,240,163,,,,,,163,,,,,,,,,,,,,,163,163,163,163,163,163,163,163,163',
'163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163,163',
'163,163,163,163,149,,,,,,,,,,,,,,149,149,149,149,149,149,149,149,149',
'149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149',
'149,149,149,149,146,,,,,,,,,,,,,,146,146,146,146,146,146,146,146,146',
'146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146',
'146,146,146,146,158,,,,,,,,,,,,,,158,158,158,158,158,158,158,158,158',
'158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158',
'158,158,158,158,177,177,177,177,177,177,177,177,177,177,177,177,177',
'177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177,177',
'186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186',
'186,186,186,186,186,186,186,186,186,186,186,186,186,189,189,189,189',
'189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189',
'189,189,189,189,189,189,189,189,189,183,183,183,183,183,183,183,183',
'183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183,183',
'183,183,183,183,183,180,180,180,180,180,180,180,180,180,180,180,180',
'180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180,180',
'180' ]
        racc_action_check = arr = Array.new(7672, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  2664,   135,  6439,   nil,   -51,   342,   407,   nil,   nil,   514,
   244,   nil,   nil,   nil,   nil,   nil,   nil,   686,   nil,   238,
   858,   nil,   151,   nil,   nil,   nil,   nil,  1030,   nil,   nil,
   nil,   nil,  1116,   nil,   240,   nil,  1288,   nil,  1374,   nil,
  1460,   nil,   nil,  1546,   nil,  1632,   291,  1804,   nil,   nil,
   nil,   nil,  1890,   nil,   nil,  1976,   nil,   nil,  2062,  2148,
   nil,   249,   245,   150,   nil,   nil,   nil,   nil,   282,  2578,
   204,   238,  2836,  2922,  3008,  3094,  3180,  3266,  3352,  3438,
  3524,  3610,  3696,  3782,   nil,  3868,  3954,  4040,   nil,   192,
    84,  4298,  4384,  4470,  4556,  4642,  4728,  4814,  4900,  4986,
  5072,  5158,  5244,  5330,  5760,  5502,  5588,  5674,   158,   194,
  6834,   nil,  2750,   nil,  2320,   307,   154,  2234,   nil,  6044,
   102,   772,   138,   nil,  7163,   170,   nil,    -8,   201,    33,
    54,   277,    52,  5416,  6676,   321,   377,  6123,   357,   nil,
   395,   nil,     6,   -37,   369,  6360,  7401,    -2,   224,  7357,
   123,   nil,   nil,    36,   nil,   153,   600,   428,  7445,   865,
  1388,   951,  1395,  7313,  7063,  1037,   450,  6988,   779,   365,
  7113,   521,   -34,   270,   693,  1295,   291,  7475,  1209,    52,
  7595,  1222,    59,  7565,  1308,   542,  7505,   607,   439,  7535,
  1123,  1381,   nil,   nil,   160,  6913,   118,    65,   nil,  5807,
   nil,   278,   181,   169,    38,   nil,   -56,   145,   944,    99,
  1202,  1718,   nil,    74,   -42,   nil,   nil,   273,   320,  4126,
   256,   -40,    -2,   nil,   nil,   nil,   nil,   nil,   nil,    80,
  6755,   nil,   nil,   nil,    -8,   nil,    72,   nil,   nil,   nil,
  7263,   nil,  6597,  4212,  6281,   nil,    -2,   nil,   nil,   187,
  5886,  6518,   nil,   nil,   370,   nil,  2492,   nil,   nil,   nil,
  2406,  5965,   221,    66,   nil,   216,   nil,   nil,  6202,  7213,
   152,   nil,   255,   296,   nil,   nil,   nil ]

racc_action_default = [
    -1,  -157,    -4,   -43,  -157,  -157,    -7,   -28,   -88,  -157,
  -157,    -8,   -94,    -9,   -95,   -96,   -10,  -157,   -26,  -157,
  -157,   -11,  -110,   -27,   -24,   -30,   -12,  -157,   -29,   -25,
   -31,   -13,  -157,   -32,  -157,   -14,  -157,   -33,  -120,   -15,
  -157,  -112,   -34,  -157,   -16,  -157,  -104,  -157,   -17,   -35,
   -18,   -36,  -157,   -19,   -37,  -157,   -20,   -92,  -157,  -157,
   -21,  -150,  -157,  -157,   -90,    -2,   -93,   -91,    -3,  -120,
  -157,  -111,  -157,  -157,  -157,  -157,  -157,  -157,  -157,  -157,
  -157,  -157,  -157,  -157,   -54,  -157,  -157,  -157,   -53,  -157,
  -157,  -157,  -157,  -157,  -157,  -157,  -157,  -157,  -157,  -157,
  -157,  -157,  -157,  -157,  -157,  -157,  -157,  -157,  -157,  -157,
   -42,  -100,  -120,  -101,  -157,  -157,  -157,  -157,   -97,  -157,
  -157,  -157,   -47,   -87,  -130,  -120,   -98,   -44,   -45,  -135,
  -157,   -48,  -157,  -120,  -121,    -7,   -50,  -157,   -49,   -41,
  -157,  -105,  -157,  -157,  -104,  -157,   -51,  -157,   -46,   -52,
  -150,  -152,  -154,  -157,  -148,  -157,  -120,    -6,   -85,   -72,
   -61,   -73,   -62,  -155,   -83,   -74,   -63,   -84,   -75,   -64,
  -156,   -76,   -65,  -157,   -77,   -66,   -55,   -78,   -67,   -56,
   -79,   -68,   -57,   -80,   -69,   -58,   -81,   -70,   -59,   -82,
   -71,   -60,   -86,   -89,  -157,   -38,  -113,  -157,   -99,  -157,
  -146,  -157,  -157,  -126,  -157,   -23,  -157,  -157,  -157,  -157,
  -157,  -157,  -119,  -157,  -157,  -132,  -103,  -157,  -157,  -157,
  -157,  -157,  -157,  -131,  -153,  -149,  -151,  -147,   277,  -157,
    -5,  -133,  -114,  -102,  -157,  -127,  -157,   -22,  -115,  -136,
  -137,  -134,  -123,  -157,  -122,  -125,  -157,  -107,  -106,  -157,
   -39,   -40,  -109,  -145,  -157,  -141,  -157,  -116,  -129,  -128,
  -157,  -124,  -157,  -157,  -108,  -157,  -142,  -139,  -157,  -138,
  -157,  -117,  -157,  -143,  -118,  -140,  -144 ]

racc_goto_table = [
    65,   113,    71,    70,   120,   139,    68,   126,   140,   154,
   151,   194,   130,   123,   209,   255,    62,   113,   247,   248,
   203,   227,   254,   150,   206,   193,   152,   nil,   nil,   nil,
   nil,   nil,   213,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   135,   nil,   nil,   nil,   nil,   nil,   nil,   266,   nil,   nil,
   264,   nil,   nil,   nil,   nil,   229,   126,   231,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   113,   113,   173,   157,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   225,   224,
   nil,   nil,   192,   139,   nil,   nil,   221,   nil,   nil,   nil,
   nil,   nil,   nil,   200,   nil,   nil,   197,   196,   nil,   135,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   204,   nil,   nil,
   113,   215,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   217,   nil,   nil,   nil,   nil,   nil,   nil,   226,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   139,   139,   nil,   nil,
   nil,   253,   126,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   113,   113,   nil,   nil,   nil,   235,   nil,   nil,   nil,
   nil,   nil,   nil,   241,   157,   nil,   nil,   nil,   139,   nil,
   nil,   243,   nil,   253,   nil,   nil,   nil,   nil,   249,   nil,
   nil,   217,   nil,   nil,   nil,   nil,   nil,   nil,   258,   nil,
   259,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   110,
   nil,   nil,   nil,   119,   nil,   nil,   nil,   197,   263,   nil,
   nil,   122,   nil,   nil,   124,   nil,   nil,   nil,   113,   272,
   nil,   127,   273,   197,   270,   113,   128,   nil,   nil,   nil,
   131,   nil,   nil,   276,   136,   nil,   nil,   137,   nil,   138,
   nil,   145,   nil,   nil,   nil,   nil,   146,   nil,   nil,   147,
   nil,   nil,   148,   149,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   158,   159,   160,   161,
   162,   163,   164,   165,   166,   167,   168,   169,   nil,   170,
   171,   172,   nil,   nil,   174,   175,   176,   177,   178,   179,
   180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
   190,   191,   nil,   nil,   nil,   nil,   nil,   nil,   195,   nil,
   nil,   199,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   230,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   240,   nil,   242,   244,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   250,   251,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   261,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   268,   nil,   nil,   nil,   269 ]

racc_goto_check = [
     2,     9,    29,     5,    20,    19,     3,    28,    31,    40,
    42,    33,    35,    20,    36,    38,     1,     9,    22,    22,
    34,    39,    37,    41,    33,    24,    43,   nil,   nil,   nil,
   nil,   nil,    33,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     5,   nil,   nil,   nil,   nil,   nil,   nil,    38,   nil,   nil,
    22,   nil,   nil,   nil,   nil,    33,    28,    36,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     9,     9,    35,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    40,    42,
   nil,   nil,    20,    19,   nil,   nil,    31,   nil,   nil,   nil,
   nil,   nil,   nil,    20,   nil,   nil,    29,     5,   nil,     5,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,
     9,    20,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     2,   nil,   nil,   nil,   nil,   nil,   nil,    20,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    19,    19,   nil,   nil,
   nil,    19,    28,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     9,     9,   nil,   nil,   nil,    20,   nil,   nil,   nil,
   nil,   nil,   nil,    20,     2,   nil,   nil,   nil,    19,   nil,
   nil,     2,   nil,    19,   nil,   nil,   nil,   nil,     2,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,    20,   nil,
    20,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,     4,
   nil,   nil,   nil,     4,   nil,   nil,   nil,    29,     5,   nil,
   nil,     4,   nil,   nil,     4,   nil,   nil,   nil,     9,    20,
   nil,     4,    20,    29,     5,     9,     4,   nil,   nil,   nil,
     4,   nil,   nil,     2,     4,   nil,   nil,     4,   nil,     4,
   nil,     4,   nil,   nil,   nil,   nil,     4,   nil,   nil,     4,
   nil,   nil,     4,     4,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,   nil,     4,
     4,     4,   nil,   nil,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,
   nil,     4,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     4,   nil,     4,     4,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     4,     4,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     4,   nil,   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,    16,     0,     6,   234,     2,   nil,   nil,   nil,    -5,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -41,
    -6,   nil,  -199,   nil,   -84,   nil,   nil,   nil,   -15,     1,
   nil,   -38,   nil,  -101,  -100,   -22,  -116,  -200,  -207,  -132,
   -52,   -38,   -51,   -35 ]

racc_goto_default = [
   nil,   nil,   210,   nil,   134,     6,    11,    13,    16,    21,
    26,    31,    35,    39,    44,    48,    50,    53,    56,    60,
   nil,    66,   141,     4,     8,    12,    14,    15,   118,    22,
   111,   nil,    41,   132,   nil,   nil,   nil,   nil,   nil,    61,
   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 92, :_reduce_1,
  1, 92, :_reduce_2,
  1, 92, :_reduce_3,
  1, 94, :_reduce_4,
  3, 94, :_reduce_5,
  2, 94, :_reduce_6,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  3, 111, :_reduce_22,
  2, 111, :_reduce_23,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 112, :_reduce_26,
  1, 112, :_reduce_27,
  1, 112, :_reduce_28,
  1, 112, :_reduce_29,
  1, 112, :_reduce_30,
  1, 112, :_reduce_31,
  1, 112, :_reduce_32,
  1, 112, :_reduce_33,
  1, 112, :_reduce_34,
  1, 112, :_reduce_35,
  1, 112, :_reduce_36,
  1, 112, :_reduce_37,
  3, 101, :_reduce_38,
  3, 113, :_reduce_39,
  3, 113, :_reduce_40,
  1, 113, :_reduce_41,
  2, 105, :_reduce_42,
  1, 110, :_reduce_43,
  2, 99, :_reduce_44,
  2, 99, :_reduce_45,
  2, 99, :_reduce_46,
  2, 99, :_reduce_47,
  2, 99, :_reduce_48,
  2, 99, :_reduce_49,
  2, 99, :_reduce_50,
  2, 99, :_reduce_51,
  2, 99, :_reduce_52,
  2, 99, :_reduce_53,
  2, 99, :_reduce_54,
  3, 99, :_reduce_55,
  3, 99, :_reduce_56,
  3, 99, :_reduce_57,
  3, 99, :_reduce_58,
  3, 99, :_reduce_59,
  3, 99, :_reduce_60,
  3, 99, :_reduce_61,
  3, 99, :_reduce_62,
  3, 99, :_reduce_63,
  3, 99, :_reduce_64,
  3, 99, :_reduce_65,
  3, 99, :_reduce_66,
  3, 99, :_reduce_67,
  3, 99, :_reduce_68,
  3, 99, :_reduce_69,
  3, 99, :_reduce_70,
  3, 99, :_reduce_71,
  3, 99, :_reduce_72,
  3, 99, :_reduce_73,
  3, 99, :_reduce_74,
  3, 99, :_reduce_75,
  3, 99, :_reduce_76,
  3, 99, :_reduce_77,
  3, 99, :_reduce_78,
  3, 99, :_reduce_79,
  3, 99, :_reduce_80,
  3, 99, :_reduce_81,
  3, 99, :_reduce_82,
  3, 99, :_reduce_83,
  3, 99, :_reduce_84,
  3, 99, :_reduce_85,
  3, 98, :_reduce_86,
  2, 98, :_reduce_87,
  1, 114, :_reduce_88,
  3, 114, :_reduce_89,
  1, 115, :_reduce_none,
  1, 115, :_reduce_91,
  1, 96, :_reduce_92,
  1, 96, :_reduce_93,
  1, 96, :_reduce_94,
  1, 96, :_reduce_95,
  1, 96, :_reduce_96,
  2, 96, :_reduce_97,
  2, 96, :_reduce_98,
  2, 119, :_reduce_99,
  1, 119, :_reduce_100,
  1, 119, :_reduce_101,
  3, 121, :_reduce_102,
  3, 117, :_reduce_103,
  0, 122, :_reduce_104,
  1, 122, :_reduce_105,
  3, 122, :_reduce_106,
  3, 122, :_reduce_107,
  4, 122, :_reduce_108,
  3, 122, :_reduce_109,
  1, 97, :_reduce_110,
  2, 97, :_reduce_111,
  1, 97, :_reduce_112,
  3, 109, :_reduce_113,
  4, 120, :_reduce_114,
  4, 120, :_reduce_115,
  4, 123, :_reduce_116,
  6, 100, :_reduce_117,
  7, 100, :_reduce_118,
  3, 116, :_reduce_119,
  0, 124, :_reduce_120,
  1, 124, :_reduce_121,
  3, 124, :_reduce_122,
  3, 124, :_reduce_123,
  4, 124, :_reduce_124,
  3, 124, :_reduce_125,
  3, 103, :_reduce_126,
  4, 103, :_reduce_127,
  5, 103, :_reduce_128,
  3, 125, :_reduce_129,
  2, 104, :_reduce_130,
  3, 118, :_reduce_131,
  3, 106, :_reduce_132,
  4, 107, :_reduce_133,
  4, 107, :_reduce_134,
  1, 126, :_reduce_135,
  3, 126, :_reduce_136,
  2, 127, :_reduce_137,
  4, 127, :_reduce_138,
  5, 108, :_reduce_139,
  7, 108, :_reduce_140,
  1, 128, :_reduce_141,
  2, 128, :_reduce_142,
  3, 129, :_reduce_143,
  4, 129, :_reduce_144,
  1, 129, :_reduce_none,
  3, 130, :_reduce_146,
  2, 131, :_reduce_147,
  1, 132, :_reduce_148,
  2, 132, :_reduce_149,
  0, 133, :_reduce_150,
  2, 133, :_reduce_151,
  1, 134, :_reduce_152,
  2, 134, :_reduce_153,
  2, 102, :_reduce_154,
  3, 102, :_reduce_155,
  3, 102, :_reduce_156 ]

racc_reduce_n = 157

racc_shift_n = 277

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :UNLESS => 4,
  :NUMBER => 5,
  :STRING => 6,
  :REGEX => 7,
  :TRUE => 8,
  :FALSE => 9,
  :YES => 10,
  :NO => 11,
  :ON => 12,
  :OFF => 13,
  :IDENTIFIER => 14,
  :PROPERTY_ACCESS => 15,
  :CODE => 16,
  :PARAM => 17,
  :SPLAT => 18,
  :NEW => 19,
  :RETURN => 20,
  :TRY => 21,
  :CATCH => 22,
  :FINALLY => 23,
  :THROW => 24,
  :BREAK => 25,
  :CONTINUE => 26,
  :FOR => 27,
  :IN => 28,
  :WHILE => 29,
  :SWITCH => 30,
  :WHEN => 31,
  :DELETE => 32,
  :INSTANCEOF => 33,
  :TYPEOF => 34,
  :SUPER => 35,
  :EXTENDS => 36,
  :NEWLINE => 37,
  :COMMENT => 38,
  :JS => 39,
  :INDENT => 40,
  :OUTDENT => 41,
  :UMINUS => 42,
  :NOT => 43,
  "!" => 44,
  "!!" => 45,
  "~" => 46,
  "++" => 47,
  "--" => 48,
  "*" => 49,
  "/" => 50,
  "%" => 51,
  "+" => 52,
  "-" => 53,
  "<<" => 54,
  ">>" => 55,
  ">>>" => 56,
  "&" => 57,
  "|" => 58,
  "^" => 59,
  "<=" => 60,
  "<" => 61,
  ">" => 62,
  ">=" => 63,
  "==" => 64,
  "!=" => 65,
  :IS => 66,
  :ISNT => 67,
  "&&" => 68,
  "||" => 69,
  :AND => 70,
  :OR => 71,
  "-=" => 72,
  "+=" => 73,
  "/=" => 74,
  "*=" => 75,
  "%=" => 76,
  "." => 77,
  :ASSIGN => 78,
  "||=" => 79,
  "&&=" => 80,
  "=>" => 81,
  "\n" => 82,
  ";" => 83,
  "," => 84,
  "[" => 85,
  "]" => 86,
  "{" => 87,
  "}" => 88,
  "(" => 89,
  ")" => 90 }

racc_nt_base = 91

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "UNLESS",
  "NUMBER",
  "STRING",
  "REGEX",
  "TRUE",
  "FALSE",
  "YES",
  "NO",
  "ON",
  "OFF",
  "IDENTIFIER",
  "PROPERTY_ACCESS",
  "CODE",
  "PARAM",
  "SPLAT",
  "NEW",
  "RETURN",
  "TRY",
  "CATCH",
  "FINALLY",
  "THROW",
  "BREAK",
  "CONTINUE",
  "FOR",
  "IN",
  "WHILE",
  "SWITCH",
  "WHEN",
  "DELETE",
  "INSTANCEOF",
  "TYPEOF",
  "SUPER",
  "EXTENDS",
  "NEWLINE",
  "COMMENT",
  "JS",
  "INDENT",
  "OUTDENT",
  "UMINUS",
  "NOT",
  "\"!\"",
  "\"!!\"",
  "\"~\"",
  "\"++\"",
  "\"--\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\">>>\"",
  "\"&\"",
  "\"|\"",
  "\"^\"",
  "\"<=\"",
  "\"<\"",
  "\">\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "IS",
  "ISNT",
  "\"&&\"",
  "\"||\"",
  "AND",
  "OR",
  "\"-=\"",
  "\"+=\"",
  "\"/=\"",
  "\"*=\"",
  "\"%=\"",
  "\".\"",
  "ASSIGN",
  "\"||=\"",
  "\"&&=\"",
  "\"=>\"",
  "\"\\n\"",
  "\";\"",
  "\",\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Root",
  "Terminator",
  "Expressions",
  "Expression",
  "Value",
  "Call",
  "Code",
  "Operation",
  "Range",
  "Assign",
  "If",
  "Try",
  "Throw",
  "Return",
  "While",
  "For",
  "Switch",
  "Extends",
  "Comment",
  "Block",
  "Literal",
  "AssignObj",
  "ParamList",
  "Param",
  "Array",
  "Object",
  "Parenthetical",
  "Accessor",
  "Invocation",
  "Index",
  "AssignList",
  "Super",
  "ArgList",
  "Catch",
  "ForVariables",
  "ForSource",
  "Whens",
  "When",
  "IfBlock",
  "ElsIf",
  "ElsIfs",
  "ElseBody",
  "IfEnd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 44)
  def _reduce_1(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_2(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 51)
  def _reduce_4(val, _values, result)
     result = Expressions.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_5(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

module_eval(<<'.,.,', 'grammar.y', 76)
  def _reduce_22(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 77)
  def _reduce_23(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

# reduce 24 omitted

# reduce 25 omitted

module_eval(<<'.,.,', 'grammar.y', 88)
  def _reduce_26(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 89)
  def _reduce_27(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_28(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_29(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_30(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_31(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_32(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_33(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_34(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_35(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_36(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_37(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_38(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_39(val, _values, result)
     result = AssignNode.new(ValueNode.new(val[0]), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_40(val, _values, result)
     result = AssignNode.new(ValueNode.new(LiteralNode.new(val[0])), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_41(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_42(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 121)
  def _reduce_43(val, _values, result)
     result = CommentNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 128)
  def _reduce_44(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_45(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 130)
  def _reduce_46(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 131)
  def _reduce_47(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_48(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_49(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 134)
  def _reduce_50(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_51(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 136)
  def _reduce_52(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_53(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_54(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 140)
  def _reduce_55(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_56(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_57(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_58(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_59(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_60(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_61(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_62(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_63(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_64(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 153)
  def _reduce_65(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_66(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_67(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 157)
  def _reduce_68(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_69(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_70(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 161)
  def _reduce_71(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_72(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_73(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 165)
  def _reduce_74(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_75(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_76(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_77(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 170)
  def _reduce_78(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_79(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_80(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_81(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_82(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_83(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_84(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_85(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_86(val, _values, result)
     result = CodeNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_87(val, _values, result)
     result = CodeNode.new([], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 189)
  def _reduce_88(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 190)
  def _reduce_89(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

# reduce 90 omitted

module_eval(<<'.,.,', 'grammar.y', 195)
  def _reduce_91(val, _values, result)
     result = SplatNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 200)
  def _reduce_92(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 201)
  def _reduce_93(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_94(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 203)
  def _reduce_95(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 204)
  def _reduce_96(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 205)
  def _reduce_97(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 206)
  def _reduce_98(val, _values, result)
     result = ValueNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 211)
  def _reduce_99(val, _values, result)
     result = AccessorNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 212)
  def _reduce_100(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 213)
  def _reduce_101(val, _values, result)
     result = SliceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 218)
  def _reduce_102(val, _values, result)
     result = IndexNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 223)
  def _reduce_103(val, _values, result)
     result = ObjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 228)
  def _reduce_104(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 229)
  def _reduce_105(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 230)
  def _reduce_106(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 231)
  def _reduce_107(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_108(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_109(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 239)
  def _reduce_110(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 240)
  def _reduce_111(val, _values, result)
     result = val[1].new_instance 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 241)
  def _reduce_112(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_113(val, _values, result)
     result = ExtendsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 251)
  def _reduce_114(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_115(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_116(val, _values, result)
     result = CallNode.new(:super, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 262)
  def _reduce_117(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_118(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 268)
  def _reduce_119(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 273)
  def _reduce_120(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 274)
  def _reduce_121(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 275)
  def _reduce_122(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 276)
  def _reduce_123(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 277)
  def _reduce_124(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 278)
  def _reduce_125(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 283)
  def _reduce_126(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 284)
  def _reduce_127(val, _values, result)
     result = TryNode.new(val[1], nil, nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 286)
  def _reduce_128(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 291)
  def _reduce_129(val, _values, result)
     result = [val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 296)
  def _reduce_130(val, _values, result)
     result = ThrowNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 301)
  def _reduce_131(val, _values, result)
     result = ParentheticalNode.new(val[1], val[0].line) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_132(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 313)
  def _reduce_133(val, _values, result)
     result = ForNode.new(val[0], val[3][0], val[2][0], val[3][1], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 314)
  def _reduce_134(val, _values, result)
     result = ForNode.new(val[3], val[2][0], val[1][0], val[2][1], val[1][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 319)
  def _reduce_135(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 320)
  def _reduce_136(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 325)
  def _reduce_137(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 327)
  def _reduce_138(val, _values, result)
     result = [val[1], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 333)
  def _reduce_139(val, _values, result)
     result = val[3].rewrite_condition(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 335)
  def _reduce_140(val, _values, result)
     result = val[3].rewrite_condition(val[1]).add_else(val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 340)
  def _reduce_141(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 341)
  def _reduce_142(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 346)
  def _reduce_143(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 347)
  def _reduce_144(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

# reduce 145 omitted

module_eval(<<'.,.,', 'grammar.y', 355)
  def _reduce_146(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 360)
  def _reduce_147(val, _values, result)
     result = val[1].force_statement 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 365)
  def _reduce_148(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 366)
  def _reduce_149(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 371)
  def _reduce_150(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 372)
  def _reduce_151(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 377)
  def _reduce_152(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 378)
  def _reduce_153(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 383)
  def _reduce_154(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 384)
  def _reduce_155(val, _values, result)
     result = IfNode.new(val[2], Expressions.new([val[0]]), nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 385)
  def _reduce_156(val, _values, result)
     result = IfNode.new(val[2], Expressions.new([val[0]]), nil, {:statement => true, :invert => true}) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
