#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

module CoffeeScript

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 463)
  # Lex and parse a CoffeeScript.
  def parse(code)
    # Uncomment the following line to enable grammar debugging, in combination
    # with the -g flag in the Rake build task.
    # @yydebug = true
    @tokens = Lexer.new.tokenize(code)
    do_parse
  end

  # Retrieve the next token from the list.
  def next_token
    @tokens.shift
  end

  # Raise a custom error class that knows about line numbers.
  def on_error(error_token_id, error_value, value_stack)
    raise ParseError.new(token_to_str(error_token_id), error_value, value_stack)
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'136,12,144,29,32,35,39,43,46,52,57,62,65,105,106,107,187,2,182,285,21',
'26,103,259,104,302,42,163,264,53,58,66,132,137,-186,-186,50,152,13,60',
'22,167,34,37,172,173,111,50,55,60,60,163,8,14,74,5,10,16,151,155,158',
'161,165,166,131,135,140,143,147,150,154,157,160,164,169,130,134,139',
'142,146,149,153,156,159,162,168,129,133,138,141,145,148,72,3,283,181',
'314,27,282,33,36,12,41,206,29,32,35,39,43,46,52,57,62,65,81,273,163',
'200,2,281,60,21,26,-186,-186,96,98,42,269,296,53,58,66,67,95,60,96,98',
'7,13,211,22,200,34,37,95,200,186,50,55,114,8,14,208,209,74,5,10,16,19',
'24,8,14,202,122,45,48,264,199,50,188,264,8,14,192,50,214,215,298,50',
'50,280,99,60,8,14,8,14,202,163,8,14,202,72,3,116,151,155,27,60,33,36',
'12,41,60,29,32,35,39,43,46,52,57,62,65,293,8,14,81,2,96,98,21,26,8,14',
'96,98,42,95,196,53,58,66,67,95,197,96,98,7,13,198,22,78,34,37,95,8,14',
'50,55,214,215,126,289,290,74,5,10,16,19,24,72,3,50,315,45,48,60,163',
'50,163,99,289,290,163,-186,-186,151,155,60,50,151,155,158,161,165,166',
'131,135,163,319,180,78,72,3,210,-186,-186,27,292,33,36,12,41,126,29',
'32,35,39,43,46,52,57,62,65,105,106,107,213,2,252,,21,26,103,,104,,42',
'163,,53,58,66,67,,-186,-186,,7,13,,22,,34,37,163,,,50,55,,,151,155,',
'74,5,10,16,19,24,163,,,,45,48,,151,155,158,161,165,166,131,135,140,143',
'147,150,154,157,160,164,169,130,134,139,142,146,,,,72,3,8,14,192,27',
'190,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,105,106,107,,2,,,21,26',
'103,,104,,42,163,,53,58,66,67,,-186,-186,,7,13,,22,,34,37,163,,,50,55',
',,-186,-186,,74,5,10,16,19,24,163,,,,45,48,,151,155,158,161,165,166',
'131,135,140,143,147,150,154,157,160,164,169,130,134,139,142,146,,,,72',
'3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,105,106,107,,2,',
',21,26,103,,104,,42,163,,53,58,66,67,,-186,-186,,7,13,,22,,34,37,,,',
'50,55,,,,,,74,5,10,16,19,24,163,,,,45,48,,151,155,158,161,165,166,131',
'135,140,143,147,150,154,157,160,164,169,130,134,139,142,146,,,,72,3',
',,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,105,106,107,,2,,,21',
'26,103,,104,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5',
'10,16,19,24,163,,,,45,48,,151,155,158,161,165,166,131,135,140,143,147',
'150,154,157,160,164,169,130,134,139,142,146,,,,72,3,,,,27,,33,36,12',
'41,,29,32,35,39,43,46,52,57,62,65,105,106,107,,2,,,21,26,103,,104,,42',
',,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,163',
',,,45,48,,151,155,158,161,165,166,131,135,140,143,147,150,154,157,160',
'164,169,130,134,139,142,146,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39',
'43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34',
'37,,,,50,55,,,,,,74,5,10,16,19,24,163,,,,45,48,,151,155,158,161,165',
'166,131,135,140,143,147,150,154,157,160,164,169,130,134,139,142,146',
',,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21',
'26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16',
'19,24,163,,,,45,48,,151,155,158,161,165,166,131,135,140,143,147,150',
'154,157,160,164,169,130,134,139,142,146,,,,72,3,,,,27,,33,36,12,41,',
'29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,',
',7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,163,,,,45,48,,151,155',
'158,161,165,166,131,135,140,143,147,150,154,157,160,164,169,130,134',
'139,142,146,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65',
',,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,',
',74,5,10,16,19,24,163,,,,45,48,,151,155,158,161,165,166,131,135,140',
'143,147,150,154,157,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39',
'43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34',
'37,,,,50,55,,,,,,74,5,10,16,19,24,163,,,,45,48,,151,155,158,161,165',
'166,131,135,140,143,147,150,154,157,,,,,,,,,,,,72,3,,,,27,,33,36,12',
'41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67',
',,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,163,,,,45,48,,151',
'155,158,161,165,166,131,135,140,143,147,150,154,157,,,,,,,,,,,,72,3',
',,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,',
'42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24',
'163,,,305,45,48,,151,155,158,161,165,166,131,135,140,143,147,150,154',
'157,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65',
',,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,',
',74,5,10,16,19,24,163,,,,45,48,,151,155,158,161,165,166,131,135,163',
',,,,,,151,155,158,161,165,166,131,135,,,72,3,,,,27,,33,36,12,41,,29',
'32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7',
'13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,163,,,,45,48,,151,155,158',
'161,165,166,131,135,163,,,,,,,151,155,158,161,165,166,131,135,,,72,3',
',,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,',
'42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24',
'163,,,,45,48,,151,155,158,161,165,166,131,135,163,,,,,,,151,155,158',
'161,165,166,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62',
'65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,114',
',,,,74,5,10,16,19,24,163,,,,45,48,,151,155,158,161,165,166,,,,,,,,,',
',,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,',
',2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74',
'5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36',
'12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66',
'67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,',
',,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52',
'57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50',
'55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,',
',27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42',
',,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,',
',45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39',
'43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34',
'37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,',
',,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21',
'26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16',
'19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29',
'32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7',
'13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,',
',,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65',
',,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,124',
',,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,',
'33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53',
'58,66,67,,,,,7,13,,22,,34,37,,,,50,55,278,,,,,74,5,10,16,19,24,,,,,45',
'48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,8,14,,27,,33,36,12,41,,29,32,35,39',
'43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34',
'37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,',
',,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21',
'26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16',
'19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29',
'32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7',
'13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,',
',,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65',
',,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,',
',74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33',
'36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58',
'66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,',
',,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46',
'52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,',
',,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72',
'3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,',
',,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24',
',,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35',
'39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22',
',34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,',
',,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,',
',21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10',
'16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41',
',29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,',
',,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,',
',,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62',
'65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,',
',,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27',
',33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53',
'58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48',
',,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46',
'52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,',
',,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72',
'3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,',
',,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24',
',,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35',
'39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22',
',34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,',
',,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,',
',21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10',
'16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41',
',29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,',
',,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,',
',,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62',
'65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,',
',,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27',
',33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53',
'58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48',
',,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46',
'52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,',
',,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72',
'3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,',
',,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24',
',,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35',
'39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22',
',34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,',
',,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,',
',21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10',
'16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41',
',29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,',
',,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,',
',,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62',
'65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,',
',,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27',
',33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53',
'58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48',
',,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46',
'52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,',
',,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72',
'3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,',
',,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24',
',,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35',
'39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22',
',34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,',
',,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,',
',21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10',
'16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41',
',29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,',
',,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,',
',,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62',
'65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,',
',,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27',
',33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53',
'58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48',
',,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46',
'52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,',
',,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72',
'3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,',
',,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24',
',,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35',
'39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22',
',34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,',
',,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,',
',21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,114,,,,,74',
'5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36',
'12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66',
'67,,,,,7,13,,22,,34,37,,,,50,55,60,,,,,74,5,10,16,19,24,,,,,45,48,,',
',,,,,,,,,,,,,,,,,,,,,,,,72,3,8,14,,27,,33,36,12,41,,29,32,35,39,43,46',
'52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,',
',,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72',
'3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,',
',,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24',
',,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35',
'39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22',
',34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,',
',,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,',
',21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10',
'16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41',
',29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,',
',,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,',
',,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62',
'65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,',
',,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27',
',33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53',
'58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24,,,,,45,48',
',,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35,39,43,46',
'52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22,,34,37,',
',,50,55,,,,,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72',
'3,,,,27,,33,36,12,41,,29,32,35,39,43,46,52,57,62,65,,,,,2,,,21,26,,',
',,42,,,53,58,66,67,,,,,7,13,,22,,34,37,,,,50,55,,,,,,74,5,10,16,19,24',
',,,,45,48,,,,,,,,,,,,,,,,,,,,,,,,,,,72,3,,,,27,,33,36,12,41,,29,32,35',
'39,43,46,52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,,,,7,13,,22',
',34,37,,,,50,55,,136,,144,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,',
',,132,137,,,,152,,,,167,72,3,,,,27,,33,36,163,41,,,,,,151,155,158,161',
'165,166,131,135,140,143,147,150,154,157,160,164,169,130,134,139,142',
'146,149,153,156,159,162,168,129,133,138,141,145,148,136,,144,,,,,,,324',
',29,32,35,39,43,46,52,57,62,65,,,,,,,,,,,,132,137,,,,152,58,66,,167',
',,,,,,,,,163,,,,,55,,151,155,158,161,165,166,131,135,140,143,147,150',
'154,157,160,164,169,130,134,139,142,146,149,153,156,159,162,168,129',
'133,138,141,145,148,,,,,,,,,,318,,,,27,,33,36,,41,29,32,35,39,43,46',
'52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,,,,,,,13,,22,,34,37,,,,50',
'55,,,,,,74,5,10,16,19,24,,,,,,,,,29,32,35,39,43,46,52,57,62,65,,,,,2',
',,21,26,,,,,42,72,3,53,58,66,27,,33,36,,41,13,,22,,34,37,,,,50,55,,',
',,,74,5,10,16,19,24,29,32,35,39,43,46,52,57,62,65,,,,,,,,,,,,,,,,,,58',
'66,,,,72,3,,,,27,,33,36,,41,,,55,,,,,,,,,,,,,,,,,,29,32,35,39,43,46',
'52,57,62,65,,,,,2,,,21,26,,,,,42,,,53,58,66,67,,27,,33,36,13,41,22,',
'34,37,,,,50,55,,136,,144,,74,5,10,16,19,24,,,,,45,48,,,,,,,,,,,,,,,',
',132,137,,,,152,,,,167,72,3,,,,27,,33,36,163,41,,,,,,151,155,158,161',
'165,166,131,135,140,143,147,150,154,157,160,164,169,130,134,139,142',
'146,149,153,156,159,162,168,129,133,138,141,145,148,136,,144,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,132,137,,,,152,,,,167,,,,,,,,,,163,,,,,,,151,155',
'158,161,165,166,131,135,140,143,147,150,154,157,160,164,169,130,134',
'139,142,146,149,153,156,159,162,168,129,133,138,141,145,148,136,,144',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,132,137,,,,152,,,,167,,,,,,,,,,163,,,,',
',,151,155,158,161,165,166,131,135,140,143,147,150,154,157,160,164,169',
'130,134,139,142,146,149,153,156,159,162,168,129,133,138,141,145,148',
'136,,144,,,,,,,,,,,,,,,,,,,,,,,274,,,,,,,132,137,,,,152,,,,167,,,,,',
',,,,163,,,,,,,151,155,158,161,165,275,131,135,140,143,147,150,154,157',
'160,164,169,130,134,139,142,146,149,153,156,159,162,168,129,133,138',
'141,145,148,136,,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,132,137,,,,152,,,',
'167,,,,,,,,,,163,,,,,,,151,155,158,161,165,166,131,135,140,143,147,150',
'154,157,160,164,169,130,134,139,142,146,149,153,156,159,162,168,129',
'133,138,141,145,148,136,,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,132,137,,',
',152,,,,167,,,,,,,,,,163,,,,,,,151,155,158,161,165,166,131,135,140,143',
'147,150,154,157,160,164,169,130,134,139,142,146,149,153,156,159,162',
'168,129,133,138,141,145,148,136,,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,132',
'137,,,,152,,,,167,,,,,,,,,,163,,,,,,,151,155,158,161,165,204,131,135',
'140,143,147,150,154,157,160,164,169,130,134,139,142,146,149,153,156',
'159,162,168,129,133,138,141,145,148,136,,144,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,132,137,,,,152,,,,167,,,,,,,,,,163,,,,,,,151,155,158,161,165,166',
'131,135,140,143,147,150,154,157,160,164,169,130,134,139,142,146,149',
'153,156,159,162,168,129,133,138,141,145,148,136,,144,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,132,137,,,,152,,,,167,,,,,,,,,,163,,,,,,,151,155,158,161',
'165,166,131,135,140,143,147,150,154,157,160,164,169,130,134,139,142',
'146,149,153,156,159,162,168,129,133,138,141,145,148,136,,144,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,132,137,,,,152,,,,167,,,,,,,,,,163,,,,,,,151,155',
'158,161,165,166,131,135,140,143,147,150,154,157,160,164,169,130,134',
'139,142,146,149,153,156,159,162,168,129,133,138,141,145,148,136,,144',
',,,,,,,,,,,,,,,,,,,,,,323,,,,,,,132,137,,,,152,,,,167,,,,,,,,,,163,',
',,,,,151,155,158,161,165,166,131,135,140,143,147,150,154,157,160,164',
'169,130,134,139,142,146,149,153,156,159,162,168,129,133,138,141,145',
'148,136,,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,132,137,,,,152,,,,167,,,,',
',,,,,163,,,,,,,151,155,158,161,165,166,131,135,140,143,147,150,154,157',
'160,164,169,130,134,139,142,146,149,153,156,159,162,168,129,133,138',
'141,145,148,136,,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,132,137,,,,152,,,',
'167,,,,,,,,,,163,,,,,,,151,155,158,161,165,166,131,135,140,143,147,150',
'154,157,160,164,169,130,134,139,142,146,149,153,156,159,162,168,129',
'133,138,141,145,148,136,,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,132,137,,',
',152,,,,167,,,,,,,,,,163,,,,,,,151,155,158,161,165,166,131,135,140,143',
'147,150,154,157,160,164,169,130,134,139,142,146,149,153,156,159,162',
'168,129,133,138,141,145,148,136,,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,132',
'137,,,,152,,,,167,,,,,,,,,,163,,,,,,,151,155,158,161,165,166,131,135',
'140,143,147,150,154,157,160,164,169,130,134,139,142,146,149,153,156',
'159,162,168,129,133,138,141,145,148,136,,144,,,,,,,,,,,,,,,,,,,,,,,325',
',,,,,,132,137,,,,152,,,,167,,,,,,,,,,163,,,,,,,151,155,158,161,165,166',
'131,135,140,143,147,150,154,157,160,164,169,130,134,139,142,146,149',
'153,156,159,162,168,129,133,138,141,145,148,136,,144,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,132,137,,,,152,,,,167,,,,,,,,,,163,,,,,,,151,155,158,161',
'165,166,131,135,140,143,147,150,154,157,160,164,169,130,134,139,142',
'146,149,153,156,159,162,168,129,133,138,141,145,148,136,,144,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,132,137,,,,152,,,,167,,,,,,,,,,163,,,,,,,151,155',
'158,161,165,166,131,135,140,143,147,150,154,157,160,164,169,130,134',
'139,142,146,149,153,156,159,162,168,129,133,138,141,145,148,136,,144',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,132,137,,,,152,,,,167,,,,,,,,185,,163,',
',,,,,151,155,158,161,165,166,131,135,140,143,147,150,154,157,160,164',
'169,130,134,139,142,146,149,153,156,159,162,168,129,133,138,141,145',
'148,136,,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,132,137,,,,152,,,,167,,,,',
',,,60,,163,,,,,,,151,155,158,161,165,166,131,135,140,143,147,150,154',
'157,160,164,169,130,134,139,142,146,149,153,156,159,162,168,129,133',
'138,141,145,148,136,,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,132,137,,,,152',
',,,167,,,,,,,,,,163,,,,,,,151,155,158,161,165,166,131,135,140,143,147',
'150,154,157,160,164,169,130,134,139,142,146,149,153,156,159,162,168',
'129,133,138,141,145,148,136,,144,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,132,137',
',,,152,,,,167,,,,,,,,60,,163,,,,,,,151,155,158,161,165,166,131,135,140',
'143,147,150,154,157,160,164,169,130,134,139,142,146,149,153,156,159',
'162,168,129,133,138,141,145,148,136,,144,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,132,137,,,,152,,,,167,,,,,,,,,,163,,,,,,,151,155,158,161,165,166,131',
'135,140,143,147,150,154,157,160,164,169,130,134,139,142,146,149,153',
'156,159,162,168,129,133,138,141,145,148,132,137,,,,,,,,167,,,,,,,,,',
'163,,,,,,,151,155,158,161,165,166,131,135,140,143,147,150,154,157,160',
'164,169,130,134,139,142,146,149,153,156,159,162,168,129,133,138,141',
'145,148,132,137,,,,,,,,167,,,,,,,,,,163,,,,,,,151,155,158,161,165,166',
'131,135,140,143,147,150,154,157,160,164,169,130,134,139,142,146,149',
'153,156,159,162,168,129,133,138,141,145,148,132,137,,,,,,,,167,,,,,',
',,,,163,,,,,,,151,155,158,161,165,166,131,135,140,143,147,150,154,157',
'160,164,169,130,134,139,142,146,149,153,156,159,162,168,129,133,138',
'141,145,148,137,,,,,,,,167,,,,,,,,,,163,,,,,,,151,155,158,161,165,166',
'131,135,140,143,147,150,154,157,160,164,169,130,134,139,142,146,149',
'153,156,159,162,168,129,133,138,141,145,148,137,,,,,,,,167,,,,,,,,,',
'163,,,,,,,151,155,158,161,165,166,131,135,140,143,147,150,154,157,160',
'164,169,130,134,139,142,146,149,153,156,159,162,168,129,133,138,141',
'145,148,137,,,,,,,,167,,,,,,,,,,163,,,,,,,151,155,158,161,165,166,131',
'135,140,143,147,150,154,157,160,164,169,130,134,139,142,146,149,153',
'156,159,162,168,129,133,138,141,145,148,137,,,,,,,,167,,,,,,,,,,163',
',,,,,,151,155,158,161,165,166,131,135,140,143,147,150,154,157,160,164',
'169,130,134,139,142,146,149,153,156,159,162,168,129,133,138,141,145',
'148,137,,,,,,,,167,,,,,,,,,,163,,,,,,,151,155,158,161,165,166,131,135',
'140,143,147,150,154,157,160,164,169,130,134,139,142,146,149,153,156',
'159,162,168,129,133,138,141,145,148,167,,,,,,,,,,163,,,,,,,151,155,158',
'161,165,166,131,135,140,143,147,150,154,157,160,164,169,130,134,139',
'142,146,149,153,156,159,162,168,129,133,138,141,145,148,167,,,,,,,,',
',163,,,,,,,151,155,158,161,165,166,131,135,140,143,147,150,154,157,160',
'164,169,130,134,139,142,146,149,153,156,159,162,168,129,133,138,141',
'145,148,167,,,,,,,,,,163,,,,,,,151,155,158,161,165,166,131,135,140,143',
'147,150,154,157,160,164,169,130,134,139,142,146,149,153,156,159,162',
'168,129,133,138,141,145,148,163,,,,,,,151,155,158,161,165,166,131,135',
'140,143,147,150,154,157,160,164,169,130,134,139,142,146,149,153,156',
'159,162,168,129,133,138,141,145,148,163,,,,,,,151,155,158,161,165,166',
'131,135,140,143,147,150,154,157,160,164,169,130,134,139,142,146,149',
'153,156,159,162,168,129,133,138,141,145,148,163,,,,,,,151,155,158,161',
'165,166,131,135,140,143,147,150,154,157,160,164,169,130,134,139,142',
'146,149,153,156,159,162,168,129,133,138,141,145,148,163,,,,,,,151,155',
'158,161,165,166,131,135,140,143,147,150,154,157,160,164,169,130,134',
'139,142,146,149,153,156,159,162,168,129,133,138,141,145,148,163,,,,',
',,151,155,158,161,165,166,131,135,140,143,147,150,154,157,160,164,169',
'130,134,139,142,146,149,153,156,159,162,168,129,133,138,141,145,148',
'163,,,,,,,151,155,158,161,165,166,131,135,140,143,147,150,154,157,160',
'164,169,130,134,139,142,146,149,153,156,159,162,168,129,133,138,141',
'145,148,163,,,,,,,151,155,158,161,165,166,131,135,140,143,147,150,154',
'157,160,164,169,130,134,139,142,146,149,153,156,159,162,168,129,133',
'138,141,145,148,163,,,,,,,151,155,158,161,165,166,131,135,140,143,147',
'150,154,157,160,164,169,130,134,139,142,146,149,153,156,159,162,168',
'129,133,138,141,145,148' ]
        racc_action_table = arr = Array.new(11132, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'117,78,117,163,163,163,163,163,163,163,163,163,163,71,71,71,96,163,82',
'213,163,163,71,180,71,275,163,119,185,163,163,163,117,117,119,119,185',
'117,163,209,163,117,163,163,71,71,33,163,163,299,78,117,63,63,163,163',
'163,163,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117',
'117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117',
'117,117,163,163,208,82,299,163,207,163,163,103,163,117,103,103,103,103',
'103,103,103,103,103,103,181,193,83,113,103,205,282,103,103,83,83,192',
'192,103,189,263,103,103,103,103,192,283,99,99,103,103,123,103,193,103',
'103,99,205,95,103,103,103,313,313,118,118,103,103,103,103,103,103,113',
'113,113,54,103,103,263,113,192,98,295,189,189,189,263,127,127,263,295',
'99,204,99,42,123,123,193,193,193,244,205,205,205,103,103,37,244,244',
'103,296,103,103,302,103,261,302,302,302,302,302,302,302,302,302,302',
'259,192,192,2,302,191,191,302,302,68,68,27,27,302,191,105,302,302,302',
'302,27,106,272,272,302,302,107,302,75,302,302,272,262,262,302,302,220',
'220,67,216,216,302,302,302,302,302,302,182,182,191,302,302,302,216,93',
'27,247,27,291,291,228,93,93,247,247,70,272,228,228,228,228,228,228,228',
'228,120,312,81,1,302,302,122,120,120,302,252,302,302,5,302,132,5,5,5',
'5,5,5,5,5,5,5,256,256,256,126,5,166,,5,5,256,,256,,5,85,,5,5,5,5,,85',
'85,,5,5,,5,,5,5,251,,,5,5,,,251,251,,5,5,5,5,5,5,230,,,,5,5,,230,230',
'230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230,230',
'230,230,230,,,,5,5,101,101,101,5,101,5,5,7,5,,7,7,7,7,7,7,7,7,7,7,91',
'91,91,,7,,,7,7,91,,91,,7,88,,7,7,7,7,,88,88,,7,7,,7,,7,7,89,,,7,7,,',
'89,89,,7,7,7,7,7,7,234,,,,7,7,,234,234,234,234,234,234,234,234,234,234',
'234,234,234,234,234,234,234,234,234,234,234,234,,,,7,7,,,,7,,7,7,10',
'7,,10,10,10,10,10,10,10,10,10,10,31,31,31,,10,,,10,10,31,,31,,10,175',
',10,10,10,10,,175,175,,10,10,,10,,10,10,,,,10,10,,,,,,10,10,10,10,10',
'10,242,,,,10,10,,242,242,242,242,242,242,242,242,242,242,242,242,242',
'242,242,242,242,242,242,242,242,242,,,,10,10,,,,10,,10,10,12,10,,12',
'12,12,12,12,12,12,12,12,12,257,257,257,,12,,,12,12,257,,257,,12,,,12',
'12,12,12,,,,,12,12,,12,,12,12,,,,12,12,,,,,,12,12,12,12,12,12,237,,',
',12,12,,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237',
'237,237,237,237,237,237,237,,,,12,12,,,,12,,12,12,13,12,,13,13,13,13',
'13,13,13,13,13,13,90,90,90,,13,,,13,13,90,,90,,13,,,13,13,13,13,,,,',
'13,13,,13,,13,13,,,,13,13,,,,,,13,13,13,13,13,13,245,,,,13,13,,245,245',
'245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245,245',
'245,245,245,,,,13,13,,,,13,,13,13,16,13,,16,16,16,16,16,16,16,16,16',
'16,,,,,16,,,16,16,,,,,16,,,16,16,16,16,,,,,16,16,,16,,16,16,,,,16,16',
',,,,,16,16,16,16,16,16,222,,,,16,16,,222,222,222,222,222,222,222,222',
'222,222,222,222,222,222,222,222,222,222,222,222,222,222,,,,16,16,,,',
'16,,16,16,19,16,,19,19,19,19,19,19,19,19,19,19,,,,,19,,,19,19,,,,,19',
',,19,19,19,19,,,,,19,19,,19,,19,19,,,,19,19,,,,,,19,19,19,19,19,19,240',
',,,19,19,,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240',
'240,240,240,240,240,240,240,,,,19,19,,,,19,,19,19,290,19,,290,290,290',
'290,290,290,290,290,290,290,,,,,290,,,290,290,,,,,290,,,290,290,290',
'290,,,,,290,290,,290,,290,290,,,,290,290,,,,,,290,290,290,290,290,290',
'227,,,,290,290,,227,227,227,227,227,227,227,227,227,227,227,227,227',
'227,227,227,227,227,227,227,227,227,,,,290,290,,,,290,,290,290,22,290',
',22,22,22,22,22,22,22,22,22,22,,,,,22,,,22,22,,,,,22,,,22,22,22,22,',
',,,22,22,,22,,22,22,,,,22,22,,,,,,22,22,22,22,22,22,255,,,,22,22,,255',
'255,255,255,255,255,255,255,255,255,255,255,255,255,,,,,,,,,,,,22,22',
',,,22,,22,22,24,22,,24,24,24,24,24,24,24,24,24,24,,,,,24,,,24,24,,,',
',24,,,24,24,24,24,,,,,24,24,,24,,24,24,,,,24,24,,,,,,24,24,24,24,24',
'24,218,,,,24,24,,218,218,218,218,218,218,218,218,218,218,218,218,218',
'218,,,,,,,,,,,,24,24,,,,24,,24,24,289,24,,289,289,289,289,289,289,289',
'289,289,289,,,,,289,,,289,289,,,,,289,,,289,289,289,289,,,,,289,289',
',289,,289,289,,,,289,289,,,,,,289,289,289,289,289,289,250,,,,289,289',
',250,250,250,250,250,250,250,250,250,250,250,250,250,250,,,,,,,,,,,',
'289,289,,,,289,,289,289,280,289,,280,280,280,280,280,280,280,280,280',
'280,,,,,280,,,280,280,,,,,280,,,280,280,280,280,,,,,280,280,,280,,280',
'280,,,,280,280,,,,,,280,280,280,280,280,280,246,,,280,280,280,,246,246',
'246,246,246,246,246,246,246,246,246,246,246,246,,,,,,,,,,,,280,280,',
',,280,,280,280,278,280,,278,278,278,278,278,278,278,278,278,278,,,,',
'278,,,278,278,,,,,278,,,278,278,278,278,,,,,278,278,,278,,278,278,,',
',278,278,,,,,,278,278,278,278,278,278,241,,,,278,278,,241,241,241,241',
'241,241,241,241,235,,,,,,,235,235,235,235,235,235,235,235,,,278,278',
',,,278,,278,278,277,278,,277,277,277,277,277,277,277,277,277,277,,,',
',277,,,277,277,,,,,277,,,277,277,277,277,,,,,277,277,,277,,277,277,',
',,277,277,,,,,,277,277,277,277,277,277,238,,,,277,277,,238,238,238,238',
'238,238,238,238,231,,,,,,,231,231,231,231,231,231,231,231,,,277,277',
',,,277,,277,277,34,277,,34,34,34,34,34,34,34,34,34,34,,,,,34,,,34,34',
',,,,34,,,34,34,34,34,,,,,34,34,,34,,34,34,,,,34,34,,,,,,34,34,34,34',
'34,34,243,,,,34,34,,243,243,243,243,243,243,243,243,223,,,,,,,223,223',
'223,223,223,223,,,,,34,34,,,,34,,34,34,36,34,,36,36,36,36,36,36,36,36',
'36,36,,,,,36,,,36,36,,,,,36,,,36,36,36,36,,,,,36,36,,36,,36,36,,,,36',
'36,36,,,,,36,36,36,36,36,36,219,,,,36,36,,219,219,219,219,219,219,,',
',,,,,,,,,,,,,,,,,36,36,,,,36,,36,36,264,36,,264,264,264,264,264,264',
'264,264,264,264,,,,,264,,,264,264,,,,,264,,,264,264,264,264,,,,,264',
'264,,264,,264,264,,,,264,264,,,,,,264,264,264,264,264,264,,,,,264,264',
',,,,,,,,,,,,,,,,,,,,,,,,,,264,264,,,,264,,264,264,41,264,,41,41,41,41',
'41,41,41,41,41,41,,,,,41,,,41,41,,,,,41,,,41,41,41,41,,,,,41,41,,41',
',41,41,,,,41,41,,,,,,41,41,41,41,41,41,,,,,41,41,,,,,,,,,,,,,,,,,,,',
',,,,,,,41,41,,,,41,,41,41,215,41,,215,215,215,215,215,215,215,215,215',
'215,,,,,215,,,215,215,,,,,215,,,215,215,215,215,,,,,215,215,,215,,215',
'215,,,,215,215,,,,,,215,215,215,215,215,215,,,,,215,215,,,,,,,,,,,,',
',,,,,,,,,,,,,,215,215,,,,215,,215,215,45,215,,45,45,45,45,45,45,45,45',
'45,45,,,,,45,,,45,45,,,,,45,,,45,45,45,45,,,,,45,45,,45,,45,45,,,,45',
'45,,,,,,45,45,45,45,45,45,,,,,45,45,,,,,,,,,,,,,,,,,,,,,,,,,,,45,45',
',,,45,,45,45,48,45,,48,48,48,48,48,48,48,48,48,48,,,,,48,,,48,48,,,',
',48,,,48,48,48,48,,,,,48,48,,48,,48,48,,,,48,48,,,,,,48,48,48,48,48',
'48,,,,,48,48,,,,,,,,,,,,,,,,,,,,,,,,,,,48,48,,,,48,,48,48,53,48,,53',
'53,53,53,53,53,53,53,53,53,,,,,53,,,53,53,,,,,53,,,53,53,53,53,,,,,53',
'53,,53,,53,53,,,,53,53,,,,,,53,53,53,53,53,53,,,,,53,53,,,,,,,,,,,,',
',,,,,,,,,,,,,,53,53,,,,53,,53,53,129,53,,129,129,129,129,129,129,129',
'129,129,129,,,,,129,,,129,129,,,,,129,,,129,129,129,129,,,,,129,129',
',129,,129,129,,,,129,129,,,,,,129,129,129,129,129,129,,,,,129,129,,',
',,,,,,,,,,,,,,,,,,,,,,,,129,129,,,,129,,129,129,60,129,,60,60,60,60',
'60,60,60,60,60,60,,,,,60,,,60,60,,,,,60,,,60,60,60,60,,,,,60,60,,60',
',60,60,,,,60,60,,60,,,,60,60,60,60,60,60,,,,,60,60,,,,,,,,,,,,,,,,,',
',,,,,,,,,60,60,,,,60,,60,60,202,60,,202,202,202,202,202,202,202,202',
'202,202,,,,,202,,,202,202,,,,,202,,,202,202,202,202,,,,,202,202,,202',
',202,202,,,,202,202,202,,,,,202,202,202,202,202,202,,,,,202,202,,,,',
',,,,,,,,,,,,,,,,,,,,,,202,202,202,202,,202,,202,202,201,202,,201,201',
'201,201,201,201,201,201,201,201,,,,,201,,,201,201,,,,,201,,,201,201',
'201,201,,,,,201,201,,201,,201,201,,,,201,201,,,,,,201,201,201,201,201',
'201,,,,,201,201,,,,,,,,,,,,,,,,,,,,,,,,,,,201,201,,,,201,,201,201,188',
'201,,188,188,188,188,188,188,188,188,188,188,,,,,188,,,188,188,,,,,188',
',,188,188,188,188,,,,,188,188,,188,,188,188,,,,188,188,,,,,,188,188',
'188,188,188,188,,,,,188,188,,,,,,,,,,,,,,,,,,,,,,,,,,,188,188,,,,188',
',188,188,187,188,,187,187,187,187,187,187,187,187,187,187,,,,,187,,',
'187,187,,,,,187,,,187,187,187,187,,,,,187,187,,187,,187,187,,,,187,187',
',,,,,187,187,187,187,187,187,,,,,187,187,,,,,,,,,,,,,,,,,,,,,,,,,,,187',
'187,,,,187,,187,187,186,187,,186,186,186,186,186,186,186,186,186,186',
',,,,186,,,186,186,,,,,186,,,186,186,186,186,,,,,186,186,,186,,186,186',
',,,186,186,,,,,,186,186,186,186,186,186,,,,,186,186,,,,,,,,,,,,,,,,',
',,,,,,,,,,186,186,,,,186,,186,186,173,186,,173,173,173,173,173,173,173',
'173,173,173,,,,,173,,,173,173,,,,,173,,,173,173,173,173,,,,,173,173',
',173,,173,173,,,,173,173,,,,,,173,173,173,173,173,173,,,,,173,173,,',
',,,,,,,,,,,,,,,,,,,,,,,,173,173,,,,173,,173,173,74,173,,74,74,74,74',
'74,74,74,74,74,74,,,,,74,,,74,74,,,,,74,,,74,74,74,74,,,,,74,74,,74',
',74,74,,,,74,74,,,,,,74,74,74,74,74,74,,,,,74,74,,,,,,,,,,,,,,,,,,,',
',,,,,,,74,74,,,,74,,74,74,169,74,,169,169,169,169,169,169,169,169,169',
'169,,,,,169,,,169,169,,,,,169,,,169,169,169,169,,,,,169,169,,169,,169',
'169,,,,169,169,,,,,,169,169,169,169,169,169,,,,,169,169,,,,,,,,,,,,',
',,,,,,,,,,,,,,169,169,,,,169,,169,169,168,169,,168,168,168,168,168,168',
'168,168,168,168,,,,,168,,,168,168,,,,,168,,,168,168,168,168,,,,,168',
'168,,168,,168,168,,,,168,168,,,,,,168,168,168,168,168,168,,,,,168,168',
',,,,,,,,,,,,,,,,,,,,,,,,,,168,168,,,,168,,168,168,167,168,,167,167,167',
'167,167,167,167,167,167,167,,,,,167,,,167,167,,,,,167,,,167,167,167',
'167,,,,,167,167,,167,,167,167,,,,167,167,,,,,,167,167,167,167,167,167',
',,,,167,167,,,,,,,,,,,,,,,,,,,,,,,,,,,167,167,,,,167,,167,167,165,167',
',165,165,165,165,165,165,165,165,165,165,,,,,165,,,165,165,,,,,165,',
',165,165,165,165,,,,,165,165,,165,,165,165,,,,165,165,,,,,,165,165,165',
'165,165,165,,,,,165,165,,,,,,,,,,,,,,,,,,,,,,,,,,,165,165,,,,165,,165',
'165,164,165,,164,164,164,164,164,164,164,164,164,164,,,,,164,,,164,164',
',,,,164,,,164,164,164,164,,,,,164,164,,164,,164,164,,,,164,164,,,,,',
'164,164,164,164,164,164,,,,,164,164,,,,,,,,,,,,,,,,,,,,,,,,,,,164,164',
',,,164,,164,164,162,164,,162,162,162,162,162,162,162,162,162,162,,,',
',162,,,162,162,,,,,162,,,162,162,162,162,,,,,162,162,,162,,162,162,',
',,162,162,,,,,,162,162,162,162,162,162,,,,,162,162,,,,,,,,,,,,,,,,,',
',,,,,,,,,162,162,,,,162,,162,162,161,162,,161,161,161,161,161,161,161',
'161,161,161,,,,,161,,,161,161,,,,,161,,,161,161,161,161,,,,,161,161',
',161,,161,161,,,,161,161,,,,,,161,161,161,161,161,161,,,,,161,161,,',
',,,,,,,,,,,,,,,,,,,,,,,,161,161,,,,161,,161,161,160,161,,160,160,160',
'160,160,160,160,160,160,160,,,,,160,,,160,160,,,,,160,,,160,160,160',
'160,,,,,160,160,,160,,160,160,,,,160,160,,,,,,160,160,160,160,160,160',
',,,,160,160,,,,,,,,,,,,,,,,,,,,,,,,,,,160,160,,,,160,,160,160,159,160',
',159,159,159,159,159,159,159,159,159,159,,,,,159,,,159,159,,,,,159,',
',159,159,159,159,,,,,159,159,,159,,159,159,,,,159,159,,,,,,159,159,159',
'159,159,159,,,,,159,159,,,,,,,,,,,,,,,,,,,,,,,,,,,159,159,,,,159,,159',
'159,158,159,,158,158,158,158,158,158,158,158,158,158,,,,,158,,,158,158',
',,,,158,,,158,158,158,158,,,,,158,158,,158,,158,158,,,,158,158,,,,,',
'158,158,158,158,158,158,,,,,158,158,,,,,,,,,,,,,,,,,,,,,,,,,,,158,158',
',,,158,,158,158,157,158,,157,157,157,157,157,157,157,157,157,157,,,',
',157,,,157,157,,,,,157,,,157,157,157,157,,,,,157,157,,157,,157,157,',
',,157,157,,,,,,157,157,157,157,157,157,,,,,157,157,,,,,,,,,,,,,,,,,',
',,,,,,,,,157,157,,,,157,,157,157,156,157,,156,156,156,156,156,156,156',
'156,156,156,,,,,156,,,156,156,,,,,156,,,156,156,156,156,,,,,156,156',
',156,,156,156,,,,156,156,,,,,,156,156,156,156,156,156,,,,,156,156,,',
',,,,,,,,,,,,,,,,,,,,,,,,156,156,,,,156,,156,156,154,156,,154,154,154',
'154,154,154,154,154,154,154,,,,,154,,,154,154,,,,,154,,,154,154,154',
'154,,,,,154,154,,154,,154,154,,,,154,154,,,,,,154,154,154,154,154,154',
',,,,154,154,,,,,,,,,,,,,,,,,,,,,,,,,,,154,154,,,,154,,154,154,153,154',
',153,153,153,153,153,153,153,153,153,153,,,,,153,,,153,153,,,,,153,',
',153,153,153,153,,,,,153,153,,153,,153,153,,,,153,153,,,,,,153,153,153',
'153,153,153,,,,,153,153,,,,,,,,,,,,,,,,,,,,,,,,,,,153,153,,,,153,,153',
'153,152,153,,152,152,152,152,152,152,152,152,152,152,,,,,152,,,152,152',
',,,,152,,,152,152,152,152,,,,,152,152,,152,,152,152,,,,152,152,,,,,',
'152,152,152,152,152,152,,,,,152,152,,,,,,,,,,,,,,,,,,,,,,,,,,,152,152',
',,,152,,152,152,150,152,,150,150,150,150,150,150,150,150,150,150,,,',
',150,,,150,150,,,,,150,,,150,150,150,150,,,,,150,150,,150,,150,150,',
',,150,150,,,,,,150,150,150,150,150,150,,,,,150,150,,,,,,,,,,,,,,,,,',
',,,,,,,,,150,150,,,,150,,150,150,149,150,,149,149,149,149,149,149,149',
'149,149,149,,,,,149,,,149,149,,,,,149,,,149,149,149,149,,,,,149,149',
',149,,149,149,,,,149,149,,,,,,149,149,149,149,149,149,,,,,149,149,,',
',,,,,,,,,,,,,,,,,,,,,,,,149,149,,,,149,,149,149,148,149,,148,148,148',
'148,148,148,148,148,148,148,,,,,148,,,148,148,,,,,148,,,148,148,148',
'148,,,,,148,148,,148,,148,148,,,,148,148,,,,,,148,148,148,148,148,148',
',,,,148,148,,,,,,,,,,,,,,,,,,,,,,,,,,,148,148,,,,148,,148,148,147,148',
',147,147,147,147,147,147,147,147,147,147,,,,,147,,,147,147,,,,,147,',
',147,147,147,147,,,,,147,147,,147,,147,147,,,,147,147,,,,,,147,147,147',
'147,147,147,,,,,147,147,,,,,,,,,,,,,,,,,,,,,,,,,,,147,147,,,,147,,147',
'147,146,147,,146,146,146,146,146,146,146,146,146,146,,,,,146,,,146,146',
',,,,146,,,146,146,146,146,,,,,146,146,,146,,146,146,,,,146,146,,,,,',
'146,146,146,146,146,146,,,,,146,146,,,,,,,,,,,,,,,,,,,,,,,,,,,146,146',
',,,146,,146,146,145,146,,145,145,145,145,145,145,145,145,145,145,,,',
',145,,,145,145,,,,,145,,,145,145,145,145,,,,,145,145,,145,,145,145,',
',,145,145,,,,,,145,145,145,145,145,145,,,,,145,145,,,,,,,,,,,,,,,,,',
',,,,,,,,,145,145,,,,145,,145,145,314,145,,314,314,314,314,314,314,314',
'314,314,314,,,,,314,,,314,314,,,,,314,,,314,314,314,314,,,,,314,314',
',314,,314,314,,,,314,314,,,,,,314,314,314,314,314,314,,,,,314,314,,',
',,,,,,,,,,,,,,,,,,,,,,,,314,314,,,,314,,314,314,104,314,,104,104,104',
'104,104,104,104,104,104,104,,,,,104,,,104,104,,,,,104,,,104,104,104',
'104,,,,,104,104,,104,,104,104,,,,104,104,,,,,,104,104,104,104,104,104',
',,,,104,104,,,,,,,,,,,,,,,,,,,,,,,,,,,104,104,,,,104,,104,104,144,104',
',144,144,144,144,144,144,144,144,144,144,,,,,144,,,144,144,,,,,144,',
',144,144,144,144,,,,,144,144,,144,,144,144,,,,144,144,,,,,,144,144,144',
'144,144,144,,,,,144,144,,,,,,,,,,,,,,,,,,,,,,,,,,,144,144,,,,144,,144',
'144,143,144,,143,143,143,143,143,143,143,143,143,143,,,,,143,,,143,143',
',,,,143,,,143,143,143,143,,,,,143,143,,143,,143,143,,,,143,143,,,,,',
'143,143,143,143,143,143,,,,,143,143,,,,,,,,,,,,,,,,,,,,,,,,,,,143,143',
',,,143,,143,143,142,143,,142,142,142,142,142,142,142,142,142,142,,,',
',142,,,142,142,,,,,142,,,142,142,142,142,,,,,142,142,,142,,142,142,',
',,142,142,,,,,,142,142,142,142,142,142,,,,,142,142,,,,,,,,,,,,,,,,,',
',,,,,,,,,142,142,,,,142,,142,142,141,142,,141,141,141,141,141,141,141',
'141,141,141,,,,,141,,,141,141,,,,,141,,,141,141,141,141,,,,,141,141',
',141,,141,141,,,,141,141,,,,,,141,141,141,141,141,141,,,,,141,141,,',
',,,,,,,,,,,,,,,,,,,,,,,,141,141,,,,141,,141,141,140,141,,140,140,140',
'140,140,140,140,140,140,140,,,,,140,,,140,140,,,,,140,,,140,140,140',
'140,,,,,140,140,,140,,140,140,,,,140,140,,,,,,140,140,140,140,140,140',
',,,,140,140,,,,,,,,,,,,,,,,,,,,,,,,,,,140,140,,,,140,,140,140,114,140',
',114,114,114,114,114,114,114,114,114,114,,,,,114,,,114,114,,,,,114,',
',114,114,114,114,,,,,114,114,,114,,114,114,,,,114,114,,,,,,114,114,114',
'114,114,114,,,,,114,114,,,,,,,,,,,,,,,,,,,,,,,,,,,114,114,,,,114,,114',
'114,139,114,,139,139,139,139,139,139,139,139,139,139,,,,,139,,,139,139',
',,,,139,,,139,139,139,139,,,,,139,139,,139,,139,139,,,,139,139,,,,,',
'139,139,139,139,139,139,,,,,139,139,,,,,,,,,,,,,,,,,,,,,,,,,,,139,139',
',,,139,,139,139,116,139,,116,116,116,116,116,116,116,116,116,116,,,',
',116,,,116,116,,,,,116,,,116,116,116,116,,,,,116,116,,116,,116,116,',
',,116,116,116,,,,,116,116,116,116,116,116,,,,,116,116,,,,,,,,,,,,,,',
',,,,,,,,,,,,116,116,,,,116,,116,116,0,116,,0,0,0,0,0,0,0,0,0,0,,,,,0',
',,0,0,,,,,0,,,0,0,0,0,,,,,0,0,,0,,0,0,,,,0,0,0,,,,,0,0,0,0,0,0,,,,,0',
'0,,,,,,,,,,,,,,,,,,,,,,,,,,,0,0,0,0,,0,,0,0,138,0,,138,138,138,138,138',
'138,138,138,138,138,,,,,138,,,138,138,,,,,138,,,138,138,138,138,,,,',
'138,138,,138,,138,138,,,,138,138,,,,,,138,138,138,138,138,138,,,,,138',
'138,,,,,,,,,,,,,,,,,,,,,,,,,,,138,138,,,,138,,138,138,137,138,,137,137',
'137,137,137,137,137,137,137,137,,,,,137,,,137,137,,,,,137,,,137,137',
'137,137,,,,,137,137,,137,,137,137,,,,137,137,,,,,,137,137,137,137,137',
'137,,,,,137,137,,,,,,,,,,,,,,,,,,,,,,,,,,,137,137,,,,137,,137,137,136',
'137,,136,136,136,136,136,136,136,136,136,136,,,,,136,,,136,136,,,,,136',
',,136,136,136,136,,,,,136,136,,136,,136,136,,,,136,136,,,,,,136,136',
'136,136,136,136,,,,,136,136,,,,,,,,,,,,,,,,,,,,,,,,,,,136,136,,,,136',
',136,136,135,136,,135,135,135,135,135,135,135,135,135,135,,,,,135,,',
'135,135,,,,,135,,,135,135,135,135,,,,,135,135,,135,,135,135,,,,135,135',
',,,,,135,135,135,135,135,135,,,,,135,135,,,,,,,,,,,,,,,,,,,,,,,,,,,135',
'135,,,,135,,135,135,134,135,,134,134,134,134,134,134,134,134,134,134',
',,,,134,,,134,134,,,,,134,,,134,134,134,134,,,,,134,134,,134,,134,134',
',,,134,134,,,,,,134,134,134,134,134,134,,,,,134,134,,,,,,,,,,,,,,,,',
',,,,,,,,,,134,134,,,,134,,134,134,133,134,,133,133,133,133,133,133,133',
'133,133,133,,,,,133,,,133,133,,,,,133,,,133,133,133,133,,,,,133,133',
',133,,133,133,,,,133,133,,,,,,133,133,133,133,133,133,,,,,133,133,,',
',,,,,,,,,,,,,,,,,,,,,,,,133,133,,,,133,,133,133,125,133,,125,125,125',
'125,125,125,125,125,125,125,,,,,125,,,125,125,,,,,125,,,125,125,125',
'125,,,,,125,125,,125,,125,125,,,,125,125,,,,,,125,125,125,125,125,125',
',,,,125,125,,,,,,,,,,,,,,,,,,,,,,,,,,,125,125,,,,125,,125,125,131,125',
',131,131,131,131,131,131,131,131,131,131,,,,,131,,,131,131,,,,,131,',
',131,131,131,131,,,,,131,131,,131,,131,131,,,,131,131,,,,,,131,131,131',
'131,131,131,,,,,131,131,,,,,,,,,,,,,,,,,,,,,,,,,,,131,131,,,,131,,131',
'131,130,131,,130,130,130,130,130,130,130,130,130,130,,,,,130,,,130,130',
',,,,130,,,130,130,130,130,,,,,130,130,,130,,130,130,,,,130,130,,,,,',
'130,130,130,130,130,130,,,,,130,130,,,,,,,,,,,,,,,,,,,,,,,,,,,130,130',
',,,130,,130,130,214,130,,214,214,214,214,214,214,214,214,214,214,,,',
',214,,,214,214,,,,,214,,,214,214,214,214,,,,,214,214,,214,,214,214,',
',,214,214,,317,,317,,214,214,214,214,214,214,,,,,214,214,,,,,,,,,,,',
',,,,,317,317,,,,317,,,,317,214,214,,,,214,,214,214,317,214,,,,,,317',
'317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317',
'317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,306',
',306,,,,,,,317,,172,172,172,172,172,172,172,172,172,172,,,,,,,,,,,,306',
'306,,,,306,172,172,,306,,,,,,,,,,306,,,,,172,,306,306,306,306,306,306',
'306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306',
'306,306,306,306,306,306,306,306,306,306,306,,,,,,,,,,306,,,,172,,172',
'172,,172,315,315,315,315,315,315,315,315,315,315,,,,,315,,,315,315,',
',,,315,,,315,315,315,,,,,,,315,,315,,315,315,,,,315,315,,,,,,315,315',
'315,315,315,315,,,,,,,,,305,305,305,305,305,305,305,305,305,305,,,,',
'305,,,305,305,,,,,305,315,315,305,305,305,315,,315,315,,315,305,,305',
',305,305,,,,305,305,,,,,,305,305,305,305,305,305,21,21,21,21,21,21,21',
'21,21,21,,,,,,,,,,,,,,,,,,21,21,,,,305,305,,,,305,,305,305,,305,,,21',
',,,,,,,,,,,,,,,,,26,26,26,26,26,26,26,26,26,26,,,,,26,,,26,26,,,,,26',
',,26,26,26,26,,21,,21,21,26,21,26,,26,26,,,,26,26,,300,,300,,26,26,26',
'26,26,26,,,,,26,26,,,,,,,,,,,,,,,,,300,300,,,,300,,,,300,26,26,,,,26',
',26,26,300,26,,,,,,300,300,300,300,300,300,300,300,300,300,300,300,300',
'300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300,300',
'300,300,300,300,203,,203,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,203,203,,,,203',
',,,203,,,,,,,,,,203,,,,,,,203,203,203,203,203,203,203,203,203,203,203',
'203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203',
'203,203,203,203,203,203,212,,212,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,212,212',
',,,212,,,,212,,,,,,,,,,212,,,,,,,212,212,212,212,212,212,212,212,212',
'212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212,212',
'212,212,212,212,212,212,212,212,195,,195,,,,,,,,,,,,,,,,,,,,,,,195,',
',,,,,195,195,,,,195,,,,195,,,,,,,,,,195,,,,,,,195,195,195,195,195,195',
'195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195',
'195,195,195,195,195,195,195,195,195,195,195,304,,304,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,304,304,,,,304,,,,304,,,,,,,,,,304,,,,,,,304,304,304,304',
'304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304',
'304,304,304,304,304,304,304,304,304,304,304,304,304,303,,303,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,303,303,,,,303,,,,303,,,,,,,,,,303,,,,,,,303,303',
'303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303',
'303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,115,,115',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,115,115,,,,115,,,,115,,,,,,,,,,115,,,,',
',,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115',
'115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115',
'194,,194,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,194,194,,,,194,,,,194,,,,,,,,',
',194,,,,,,,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194',
'194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194,194',
'194,194,69,,69,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,69,69,,,,69,,,,69,,,,,,',
',,,69,,,,,,,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69',
'69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,224,,224,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,224,224,,,,224,,,,224,,,,,,,,,,224,,,,,,,224,224,224',
'224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224,224',
'224,224,224,224,224,224,224,224,224,224,224,224,224,224,316,,316,,,',
',,,,,,,,,,,,,,,,,,,316,,,,,,,316,316,,,,316,,,,316,,,,,,,,,,316,,,,',
',,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316',
'316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316',
'232,,232,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,232,232,,,,232,,,,232,,,,,,,,',
',232,,,,,,,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232',
'232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232,232',
'232,232,279,,279,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,279,279,,,,279,,,,279',
',,,,,,,,,279,,,,,,,279,279,279,279,279,279,279,279,279,279,279,279,279',
'279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279,279',
'279,279,279,279,239,,239,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,239,239,,,,239',
',,,239,,,,,,,,,,239,,,,,,,239,239,239,239,239,239,239,239,239,239,239',
'239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239,239',
'239,239,239,239,239,239,276,,276,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,276,276',
',,,276,,,,276,,,,,,,,,,276,,,,,,,276,276,276,276,276,276,276,276,276',
'276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276,276',
'276,276,276,276,276,276,276,276,322,,322,,,,,,,,,,,,,,,,,,,,,,,322,',
',,,,,322,322,,,,322,,,,322,,,,,,,,,,322,,,,,,,322,322,322,322,322,322',
'322,322,322,322,322,322,322,322,322,322,322,322,322,322,322,322,322',
'322,322,322,322,322,322,322,322,322,322,322,267,,267,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,267,267,,,,267,,,,267,,,,,,,,,,267,,,,,,,267,267,267,267',
'267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267',
'267,267,267,267,267,267,267,267,267,267,267,267,267,266,,266,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,266,266,,,,266,,,,266,,,,,,,,,,266,,,,,,,266,266',
'266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,266',
'266,266,266,266,266,266,266,266,266,266,266,266,266,266,266,87,,87,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,87,87,,,,87,,,,87,,,,,,,,87,,87,,,,,,,87',
'87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87',
'87,87,87,87,87,87,87,87,87,87,86,,86,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,86',
'86,,,,86,,,,86,,,,,,,,86,,86,,,,,,,86,86,86,86,86,86,86,86,86,86,86',
'86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86',
'321,,321,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,321,321,,,,321,,,,321,,,,,,,,',
',321,,,,,,,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321',
'321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321,321',
'321,321,84,,84,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,84,84,,,,84,,,,84,,,,,,',
',84,,84,,,,,,,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84',
'84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,268,,268,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,268,268,,,,268,,,,268,,,,,,,,,,268,,,,,,,268,268,268',
'268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268',
'268,268,268,268,268,268,268,268,268,268,268,268,268,268,121,121,,,,',
',,,121,,,,,,,,,,121,,,,,,,121,121,121,121,121,121,121,121,121,121,121',
'121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121',
'121,121,121,121,121,121,94,94,,,,,,,,94,,,,,,,,,,94,,,,,,,94,94,94,94',
'94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94',
'94,94,94,94,94,94,94,258,258,,,,,,,,258,,,,,,,,,,258,,,,,,,258,258,258',
'258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258,258',
'258,258,258,258,258,258,258,258,258,258,258,258,258,258,286,,,,,,,,286',
',,,,,,,,,286,,,,,,,286,286,286,286,286,286,286,286,286,286,286,286,286',
'286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286,286',
'286,286,286,286,225,,,,,,,,225,,,,,,,,,,225,,,,,,,225,225,225,225,225',
'225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225,225',
'225,225,225,225,225,225,225,225,225,225,225,225,310,,,,,,,,310,,,,,',
',,,,310,,,,,,,310,310,310,310,310,310,310,310,310,310,310,310,310,310',
'310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310',
'310,310,310,309,,,,,,,,309,,,,,,,,,,309,,,,,,,309,309,309,309,309,309',
'309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309',
'309,309,309,309,309,309,309,309,309,309,309,287,,,,,,,,287,,,,,,,,,',
'287,,,,,,,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287',
'287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287,287',
'287,287,112,,,,,,,,,,112,,,,,,,112,112,112,112,112,112,112,112,112,112',
'112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112',
'112,112,112,112,112,112,112,253,,,,,,,,,,253,,,,,,,253,253,253,253,253',
'253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253,253',
'253,253,253,253,253,253,253,253,253,253,253,253,92,,,,,,,,,,92,,,,,',
',92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92',
'92,92,92,92,92,92,92,92,92,92,92,233,,,,,,,233,233,233,233,233,233,233',
'233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233,233',
'233,233,233,233,233,233,233,233,233,233,236,,,,,,,236,236,236,236,236',
'236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236,236',
'236,236,236,236,236,236,236,236,236,236,236,236,248,,,,,,,248,248,248',
'248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248,248',
'248,248,248,248,248,248,248,248,248,248,248,248,248,248,217,,,,,,,217',
'217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217',
'217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,217,254',
',,,,,,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254',
'254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254,254',
'254,221,,,,,,,221,221,221,221,221,221,221,221,221,221,221,221,221,221',
'221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221',
'221,221,221,229,,,,,,,229,229,229,229,229,229,229,229,229,229,229,229',
'229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229,229',
'229,229,229,229,229,226,,,,,,,226,226,226,226,226,226,226,226,226,226',
'226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226,226',
'226,226,226,226,226,226,226' ]
        racc_action_check = arr = Array.new(11132, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  6563,   290,   198,   nil,   nil,   301,   nil,   402,   nil,   nil,
   503,   nil,   604,   705,   nil,   nil,   806,   nil,   nil,   907,
   nil,  7945,  1109,   nil,  1210,   nil,  8008,   221,   nil,   nil,
   nil,   503,   nil,    32,  1715,   nil,  1816,   171,   nil,   nil,
   nil,  2018,   132,   nil,   nil,  2220,   nil,   nil,  2321,   nil,
   nil,   nil,   nil,  2422,   164,   nil,   nil,   nil,   nil,   nil,
  2624,   nil,   nil,   -44,   nil,   nil,   nil,   239,   128,  8794,
   229,    -2,   nil,   nil,  3331,   240,   nil,   nil,    -1,   nil,
   nil,   227,    -3,    63,  9990,   277,  9806,  9714,   378,   395,
   705,   402, 10710,   216, 10202,   100,   -31,   nil,   123,   131,
   nil,   301,   nil,    99,  5654,   216,   222,   227,   nil,   nil,
   nil,   nil, 10608,    65,  6260,  8610,  6462,    -2,   124,   -26,
   237, 10142,   296,    88,   nil,  7270,   221,   141,   nil,  2523,
  7472,  7371,   291,  7169,  7068,  6967,  6866,  6765,  6664,  6361,
  6159,  6058,  5957,  5856,  5755,  5452,  5351,  5250,  5149,  5048,
  4947,   nil,  4846,  4745,  4644,   nil,  4543,  4442,  4341,  4240,
  4139,  4038,  3937,    -2,  3836,  3735,   256,  3634,  3533,  3432,
   nil,   nil,  7723,  3230,   nil,   479,   nil,   nil,   nil,   nil,
   -42,    94,   168,   nil,   nil,   -13,  3129,  3028,  2927,    76,
   nil,   215,   120,    90,  8702,  8334,   nil,   nil,   nil,   nil,
   nil,  2826,  2725,  8150,   116,    94,   nil,    68,    80,   -12,
   nil,   nil,  8242,     5,  7573,  2119,   217, 10874,  1219,  1825,
   216, 10956,   815,  1739,  8886, 10380, 11038,  1017,   222, 10997,
   310,  1638,  9070, 10751,   411,  1537, 10792,   613,  1623,  9254,
   916,  1522,   512,  1724,   136,   714,  1421,   218, 10833,   nil,
  1320,   294,   235, 10659, 10915,  1118,   301,   604, 10262,   150,
   nil,   153,   151,   126,  1917,   nil,  9622,  9530, 10082,   nil,
   nil,   nil,   232,   nil,   nil,   -40,  9346,  1614,  1513,  9162,
  1412,   nil,    69,    84,   nil,   nil, 10321, 10557,   nil,  1311,
  1008,   236,   nil,   nil,   nil,   130,   148,   nil,   nil,    -2,
  8058,   nil,   200,  8518,  8426,  7888,  7715,   nil,   nil, 10498,
 10439,   nil,   239,    55,  5553,  7823,  8978,  7623,   nil,   nil,
   nil,  9898,  9438,   nil,   nil,   nil ]

racc_action_default = [
    -1,  -179,  -186,   -98,   -10,  -186,  -106,  -186,   -26,   -11,
  -186,  -107,  -186,  -186,   -27,   -12,  -186,  -108,   -13,  -186,
  -109,  -186,  -186,   -14,  -186,  -110,   -46,  -120,   -15,   -28,
   -16,  -126,   -29,  -134,  -186,   -31,  -141,  -186,   -17,   -34,
   -18,  -186,  -186,   -35,   -19,  -186,   -36,   -20,  -186,  -128,
   -47,   -21,   -37,  -186,  -186,   -30,   -22,   -38,   -32,    -2,
  -186,   -23,   -39,    -3,  -105,  -104,   -33,  -186,  -186,    -5,
  -186,    -8,   -97,    -9,  -186,  -179,  -181,  -183,  -186,  -177,
   -99,  -101,  -186,   -48,  -158,   -49,  -186,  -186,   -53,   -55,
  -186,  -127,   -56,   -54,   -45,  -186,  -186,   -44,  -186,  -120,
  -121,  -186,  -131,  -141,  -186,  -186,  -186,  -186,  -112,  -116,
  -117,  -135,   -57,  -186,  -186,  -142,  -141,  -186,  -186,   -51,
   -50,  -155,  -186,  -186,   -25,    -7,  -162,  -186,    -4,  -186,
  -186,  -186,  -186,  -186,  -186,  -186,  -186,  -186,  -186,  -186,
  -186,  -186,  -186,  -186,  -186,  -186,  -186,  -186,  -186,  -186,
  -186,   -59,  -186,  -186,  -186,   -58,  -186,  -186,  -186,  -186,
  -186,  -186,  -186,   -94,  -186,  -186,  -186,  -186,  -186,  -186,
   -96,  -130,  -186,  -186,  -111,   -52,  -182,  -178,  -180,  -176,
  -186,  -186,  -186,  -157,  -175,  -186,  -186,  -186,  -186,  -186,
  -119,  -186,  -186,  -186,  -142,  -186,  -113,  -114,  -115,  -140,
  -148,  -186,  -186,  -143,  -186,  -186,  -156,  -151,  -186,  -186,
   326,   -24,    -6,  -186,  -186,  -186,  -186,   -86,   -74,   -63,
  -186,   -87,   -75,   -64,  -184,   -93,   -88,   -76,   -65,   -89,
   -77,   -66,  -185,   -90,   -78,   -67,   -91,   -79,   -68,  -159,
   -80,   -69,   -81,   -70,   -60,   -82,   -71,   -61,   -84,   -83,
   -72,   -62,  -186,   -92,   -85,   -73,  -129,  -186,   -40,  -186,
  -100,  -186,  -186,  -186,  -186,  -170,   -41,   -43,   -42,  -125,
  -123,  -122,  -186,  -132,  -118,  -186,  -145,  -186,  -186,  -144,
  -186,  -133,  -186,  -186,  -152,  -163,  -164,  -165,  -161,  -186,
  -186,  -160,  -103,  -102,   -95,  -186,  -186,  -171,  -168,  -186,
  -149,  -124,  -186,  -146,  -147,  -103,  -186,  -153,  -154,  -167,
  -166,  -174,  -186,  -172,  -186,  -103,  -186,  -186,  -136,  -169,
  -173,  -150,  -186,  -138,  -137,  -139 ]

racc_goto_table = [
    59,    83,   174,    84,   265,   171,    85,    80,    86,    87,
    68,    90,    88,    97,   216,    89,    91,   113,    92,    76,
    93,   174,    94,   101,   171,   270,   271,   127,    79,    63,
   112,    54,   115,   299,   263,   207,   179,   117,   261,    75,
    82,   119,    77,   nil,   120,   nil,   nil,   nil,   nil,   121,
   nil,   nil,   118,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   125,   nil,   nil,   nil,   nil,   128,   nil,
   175,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   170,   nil,   297,   nil,   193,    97,   nil,   nil,   178,   123,
   nil,   nil,   220,   176,   183,   189,   184,   205,   nil,   194,
   195,   191,   177,   nil,   nil,   nil,   301,   291,   nil,   nil,
   203,   nil,   194,   nil,   311,   nil,   nil,   nil,   nil,   nil,
   nil,   212,   nil,   125,   nil,   217,   218,   219,   nil,   221,
   222,   223,   224,   225,   226,   227,   228,   229,   230,   231,
   232,   233,   234,   235,   236,   237,   238,   nil,   239,   240,
   241,   nil,   242,   243,   244,   245,   246,   247,   248,   249,
   250,   251,   256,   253,   254,   255,   nil,   257,   nil,   258,
   nil,   262,   nil,   nil,   nil,   nil,   nil,    97,    97,   nil,
   nil,   nil,   266,   267,   268,   nil,   260,   174,   nil,   191,
   171,   nil,   272,   nil,   nil,   nil,   nil,   276,   279,   nil,
   nil,   nil,   277,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   286,   287,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   284,
   nil,   nil,   nil,   nil,   nil,   nil,   288,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   262,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    97,   nil,
   300,   nil,   295,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   294,   nil,   303,   304,   nil,   306,   nil,   nil,   nil,
   nil,   262,   nil,   nil,   nil,   309,   310,   nil,   nil,   nil,
   nil,   nil,   307,   308,   nil,   nil,   nil,   nil,   316,   nil,
   nil,   317,   nil,   nil,   nil,   nil,   312,   nil,   nil,   313,
   321,   322,   nil,   320 ]

racc_goto_check = [
     2,     5,    32,     5,    45,    38,     5,    26,     5,     5,
     4,     6,     5,    21,    43,     5,    33,    39,     5,    49,
     5,    32,     5,    36,    38,    23,    23,    42,    47,     3,
     5,     1,     5,    40,    44,    41,    46,     5,    25,    48,
    24,     5,    50,   nil,     5,   nil,   nil,   nil,   nil,     5,
   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,     2,   nil,
     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     4,   nil,    45,   nil,    39,    21,   nil,   nil,     4,     3,
   nil,   nil,    42,    49,     4,    36,     4,    39,   nil,     5,
     5,     2,    47,   nil,   nil,   nil,    23,    43,   nil,   nil,
     5,   nil,     5,   nil,    45,   nil,   nil,   nil,   nil,   nil,
   nil,     5,   nil,     2,   nil,     5,     5,     5,   nil,     5,
     5,     5,     5,     5,     5,     5,     5,     5,     5,     5,
     5,     5,     5,     5,     5,     5,     5,   nil,     5,     5,
     5,   nil,     5,     5,     5,     5,     5,     5,     5,     5,
     5,     5,     6,     5,     5,     5,   nil,    33,   nil,     5,
   nil,    21,   nil,   nil,   nil,   nil,   nil,    21,    21,   nil,
   nil,   nil,     5,     5,     5,   nil,    26,    32,   nil,     2,
    38,   nil,     2,   nil,   nil,   nil,   nil,     5,     5,   nil,
   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     5,     5,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,
   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,   nil,
     5,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     4,   nil,     5,     5,   nil,     5,   nil,   nil,   nil,
   nil,    21,   nil,   nil,   nil,     5,     5,   nil,   nil,   nil,
   nil,   nil,     4,     4,   nil,   nil,   nil,   nil,     5,   nil,
   nil,     5,   nil,   nil,   nil,   nil,     4,   nil,   nil,     4,
     5,     5,   nil,     2 ]

racc_goto_pointer = [
   nil,    31,     0,    29,    10,    -4,   -10,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -14,   nil,  -166,    38,  -144,     5,   nil,   nil,   nil,
   nil,   nil,   -69,    -5,   nil,   nil,    -4,   nil,   -66,   -19,
  -231,   -83,   -40,  -113,  -151,  -181,   -42,    27,    38,    18,
    41 ]

racc_goto_default = [
   nil,   nil,   201,   nil,   nil,    69,    71,    73,     4,     9,
    15,    18,    23,    28,    30,    38,    40,    44,    47,    51,
    56,    61,    64,   100,   nil,    70,   nil,     6,    11,    17,
    20,    25,   108,    31,   109,   110,   nil,    49,   102,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     1,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 107, :_reduce_1,
  1, 107, :_reduce_2,
  1, 107, :_reduce_3,
  2, 107, :_reduce_4,
  1, 109, :_reduce_5,
  3, 109, :_reduce_6,
  2, 109, :_reduce_7,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  3, 110, :_reduce_24,
  2, 110, :_reduce_25,
  1, 108, :_reduce_none,
  1, 108, :_reduce_none,
  1, 128, :_reduce_28,
  1, 128, :_reduce_29,
  1, 128, :_reduce_30,
  1, 128, :_reduce_31,
  1, 128, :_reduce_32,
  1, 128, :_reduce_33,
  1, 128, :_reduce_34,
  1, 128, :_reduce_35,
  1, 128, :_reduce_36,
  1, 128, :_reduce_37,
  1, 128, :_reduce_38,
  1, 128, :_reduce_39,
  3, 116, :_reduce_40,
  3, 129, :_reduce_41,
  3, 129, :_reduce_42,
  3, 129, :_reduce_43,
  1, 129, :_reduce_44,
  2, 120, :_reduce_45,
  1, 120, :_reduce_46,
  1, 127, :_reduce_47,
  2, 115, :_reduce_48,
  2, 115, :_reduce_49,
  2, 115, :_reduce_50,
  2, 115, :_reduce_51,
  2, 115, :_reduce_52,
  2, 115, :_reduce_53,
  2, 115, :_reduce_54,
  2, 115, :_reduce_55,
  2, 115, :_reduce_56,
  2, 115, :_reduce_57,
  2, 115, :_reduce_58,
  2, 115, :_reduce_59,
  3, 115, :_reduce_60,
  3, 115, :_reduce_61,
  3, 115, :_reduce_62,
  3, 115, :_reduce_63,
  3, 115, :_reduce_64,
  3, 115, :_reduce_65,
  3, 115, :_reduce_66,
  3, 115, :_reduce_67,
  3, 115, :_reduce_68,
  3, 115, :_reduce_69,
  3, 115, :_reduce_70,
  3, 115, :_reduce_71,
  3, 115, :_reduce_72,
  3, 115, :_reduce_73,
  3, 115, :_reduce_74,
  3, 115, :_reduce_75,
  3, 115, :_reduce_76,
  3, 115, :_reduce_77,
  3, 115, :_reduce_78,
  3, 115, :_reduce_79,
  3, 115, :_reduce_80,
  3, 115, :_reduce_81,
  3, 115, :_reduce_82,
  3, 115, :_reduce_83,
  3, 115, :_reduce_84,
  3, 115, :_reduce_85,
  3, 115, :_reduce_86,
  3, 115, :_reduce_87,
  3, 115, :_reduce_88,
  3, 115, :_reduce_89,
  3, 115, :_reduce_90,
  3, 115, :_reduce_91,
  3, 115, :_reduce_92,
  3, 115, :_reduce_93,
  2, 126, :_reduce_94,
  5, 114, :_reduce_95,
  2, 114, :_reduce_96,
  1, 131, :_reduce_97,
  1, 131, :_reduce_98,
  1, 130, :_reduce_99,
  3, 130, :_reduce_100,
  1, 132, :_reduce_none,
  4, 132, :_reduce_102,
  4, 125, :_reduce_103,
  1, 112, :_reduce_104,
  1, 112, :_reduce_105,
  1, 112, :_reduce_106,
  1, 112, :_reduce_107,
  1, 112, :_reduce_108,
  1, 112, :_reduce_109,
  1, 112, :_reduce_110,
  2, 112, :_reduce_111,
  2, 112, :_reduce_112,
  2, 138, :_reduce_113,
  2, 138, :_reduce_114,
  2, 138, :_reduce_115,
  1, 138, :_reduce_116,
  1, 138, :_reduce_117,
  3, 140, :_reduce_118,
  3, 134, :_reduce_119,
  0, 142, :_reduce_120,
  1, 142, :_reduce_121,
  3, 142, :_reduce_122,
  3, 142, :_reduce_123,
  4, 142, :_reduce_124,
  3, 142, :_reduce_125,
  1, 113, :_reduce_126,
  2, 113, :_reduce_127,
  1, 113, :_reduce_128,
  3, 124, :_reduce_129,
  2, 139, :_reduce_130,
  2, 139, :_reduce_131,
  3, 144, :_reduce_132,
  4, 143, :_reduce_133,
  1, 137, :_reduce_134,
  2, 137, :_reduce_135,
  6, 136, :_reduce_136,
  7, 136, :_reduce_137,
  6, 141, :_reduce_138,
  7, 141, :_reduce_139,
  3, 133, :_reduce_140,
  0, 145, :_reduce_141,
  1, 145, :_reduce_142,
  2, 145, :_reduce_143,
  3, 145, :_reduce_144,
  3, 145, :_reduce_145,
  4, 145, :_reduce_146,
  4, 145, :_reduce_147,
  2, 145, :_reduce_148,
  1, 146, :_reduce_149,
  3, 146, :_reduce_150,
  3, 118, :_reduce_151,
  4, 118, :_reduce_152,
  5, 118, :_reduce_153,
  3, 147, :_reduce_154,
  2, 119, :_reduce_155,
  3, 135, :_reduce_156,
  3, 121, :_reduce_157,
  2, 121, :_reduce_158,
  3, 121, :_reduce_159,
  4, 122, :_reduce_160,
  4, 122, :_reduce_161,
  1, 148, :_reduce_162,
  3, 148, :_reduce_163,
  2, 149, :_reduce_164,
  2, 149, :_reduce_165,
  3, 149, :_reduce_166,
  3, 149, :_reduce_167,
  5, 123, :_reduce_168,
  7, 123, :_reduce_169,
  1, 150, :_reduce_170,
  2, 150, :_reduce_171,
  3, 151, :_reduce_172,
  4, 151, :_reduce_173,
  3, 151, :_reduce_174,
  3, 152, :_reduce_175,
  2, 153, :_reduce_176,
  1, 154, :_reduce_177,
  2, 154, :_reduce_178,
  0, 155, :_reduce_179,
  2, 155, :_reduce_180,
  1, 156, :_reduce_181,
  2, 156, :_reduce_182,
  2, 117, :_reduce_183,
  3, 117, :_reduce_184,
  3, 117, :_reduce_185 ]

racc_reduce_n = 186

racc_shift_n = 326

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :UNLESS => 4,
  :NUMBER => 5,
  :STRING => 6,
  :REGEX => 7,
  :TRUE => 8,
  :FALSE => 9,
  :YES => 10,
  :NO => 11,
  :ON => 12,
  :OFF => 13,
  :IDENTIFIER => 14,
  :PROPERTY_ACCESS => 15,
  :PROTOTYPE_ACCESS => 16,
  :SOAK_ACCESS => 17,
  :CODE => 18,
  :PARAM_START => 19,
  :PARAM => 20,
  :PARAM_END => 21,
  :NEW => 22,
  :RETURN => 23,
  :CALL_START => 24,
  :CALL_END => 25,
  :INDEX_START => 26,
  :INDEX_END => 27,
  :TRY => 28,
  :CATCH => 29,
  :FINALLY => 30,
  :THROW => 31,
  :BREAK => 32,
  :CONTINUE => 33,
  :FOR => 34,
  :IN => 35,
  :OF => 36,
  :BY => 37,
  :WHEN => 38,
  :WHILE => 39,
  :SWITCH => 40,
  :LEADING_WHEN => 41,
  :DELETE => 42,
  :INSTANCEOF => 43,
  :TYPEOF => 44,
  :SUPER => 45,
  :EXTENDS => 46,
  :ASSIGN => 47,
  :NEWLINE => 48,
  :COMMENT => 49,
  :JS => 50,
  :INDENT => 51,
  :OUTDENT => 52,
  "?" => 53,
  :UMINUS => 54,
  :UPLUS => 55,
  :NOT => 56,
  "!" => 57,
  "!!" => 58,
  "~" => 59,
  "++" => 60,
  "--" => 61,
  "*" => 62,
  "/" => 63,
  "%" => 64,
  "." => 65,
  "+" => 66,
  "-" => 67,
  "<<" => 68,
  ">>" => 69,
  ">>>" => 70,
  "&" => 71,
  "|" => 72,
  "^" => 73,
  "<=" => 74,
  "<" => 75,
  ">" => 76,
  ">=" => 77,
  "==" => 78,
  "!=" => 79,
  :IS => 80,
  :ISNT => 81,
  "&&" => 82,
  "||" => 83,
  :AND => 84,
  :OR => 85,
  "-=" => 86,
  "+=" => 87,
  "/=" => 88,
  "*=" => 89,
  "%=" => 90,
  "||=" => 91,
  "&&=" => 92,
  "?=" => 93,
  "->" => 94,
  "=>" => 95,
  "\n" => 96,
  ";" => 97,
  "," => 98,
  "{" => 99,
  "}" => 100,
  "@" => 101,
  "[" => 102,
  "]" => 103,
  "(" => 104,
  ")" => 105 }

racc_nt_base = 106

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "UNLESS",
  "NUMBER",
  "STRING",
  "REGEX",
  "TRUE",
  "FALSE",
  "YES",
  "NO",
  "ON",
  "OFF",
  "IDENTIFIER",
  "PROPERTY_ACCESS",
  "PROTOTYPE_ACCESS",
  "SOAK_ACCESS",
  "CODE",
  "PARAM_START",
  "PARAM",
  "PARAM_END",
  "NEW",
  "RETURN",
  "CALL_START",
  "CALL_END",
  "INDEX_START",
  "INDEX_END",
  "TRY",
  "CATCH",
  "FINALLY",
  "THROW",
  "BREAK",
  "CONTINUE",
  "FOR",
  "IN",
  "OF",
  "BY",
  "WHEN",
  "WHILE",
  "SWITCH",
  "LEADING_WHEN",
  "DELETE",
  "INSTANCEOF",
  "TYPEOF",
  "SUPER",
  "EXTENDS",
  "ASSIGN",
  "NEWLINE",
  "COMMENT",
  "JS",
  "INDENT",
  "OUTDENT",
  "\"?\"",
  "UMINUS",
  "UPLUS",
  "NOT",
  "\"!\"",
  "\"!!\"",
  "\"~\"",
  "\"++\"",
  "\"--\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\".\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\">>>\"",
  "\"&\"",
  "\"|\"",
  "\"^\"",
  "\"<=\"",
  "\"<\"",
  "\">\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "IS",
  "ISNT",
  "\"&&\"",
  "\"||\"",
  "AND",
  "OR",
  "\"-=\"",
  "\"+=\"",
  "\"/=\"",
  "\"*=\"",
  "\"%=\"",
  "\"||=\"",
  "\"&&=\"",
  "\"?=\"",
  "\"->\"",
  "\"=>\"",
  "\"\\n\"",
  "\";\"",
  "\",\"",
  "\"{\"",
  "\"}\"",
  "\"@\"",
  "\"[\"",
  "\"]\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Root",
  "Terminator",
  "Expressions",
  "Block",
  "Expression",
  "Value",
  "Call",
  "Code",
  "Operation",
  "Assign",
  "If",
  "Try",
  "Throw",
  "Return",
  "While",
  "For",
  "Switch",
  "Extends",
  "Splat",
  "Existence",
  "Comment",
  "Literal",
  "AssignObj",
  "ParamList",
  "FuncGlyph",
  "Param",
  "Array",
  "Object",
  "Parenthetical",
  "Range",
  "This",
  "Accessor",
  "Invocation",
  "Index",
  "Slice",
  "AssignList",
  "Super",
  "Arguments",
  "ArgList",
  "SimpleArgs",
  "Catch",
  "ForVariables",
  "ForSource",
  "Whens",
  "When",
  "IfBlock",
  "ElsIf",
  "ElsIfs",
  "ElseBody",
  "IfEnd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_1(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_2(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_4(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_5(val, _values, result)
     result = Expressions.wrap(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_6(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_7(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_24(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_25(val, _values, result)
     result = Expressions.new 
    result
  end
.,.,

# reduce 26 omitted

# reduce 27 omitted

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_28(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_29(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_30(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_31(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_32(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_33(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_34(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_35(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_36(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 104)
  def _reduce_37(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 105)
  def _reduce_38(val, _values, result)
     result = LiteralNode.new(Value.new(true)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_39(val, _values, result)
     result = LiteralNode.new(Value.new(false)) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_40(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_41(val, _values, result)
     result = AssignNode.new(ValueNode.new(val[0]), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_42(val, _values, result)
     result = AssignNode.new(ValueNode.new(LiteralNode.new(val[0])), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_43(val, _values, result)
     result = AssignNode.new(ValueNode.new(LiteralNode.new(val[0])), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_44(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_45(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 125)
  def _reduce_46(val, _values, result)
     result = ReturnNode.new(ValueNode.new(Value.new('null'))) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 130)
  def _reduce_47(val, _values, result)
     result = CommentNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_48(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_49(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_50(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 140)
  def _reduce_51(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_52(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_53(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_54(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_55(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 145)
  def _reduce_56(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 146)
  def _reduce_57(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_58(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_59(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 150)
  def _reduce_60(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_61(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_62(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 154)
  def _reduce_63(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_64(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 157)
  def _reduce_65(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_66(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_67(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 161)
  def _reduce_68(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_69(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_70(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 165)
  def _reduce_71(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_72(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_73(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_74(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 170)
  def _reduce_75(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_76(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_77(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_78(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_79(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_80(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_81(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_82(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_83(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 181)
  def _reduce_84(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 182)
  def _reduce_85(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_86(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_87(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_88(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_89(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 187)
  def _reduce_90(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 188)
  def _reduce_91(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 190)
  def _reduce_92(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_93(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 196)
  def _reduce_94(val, _values, result)
     result = ExistenceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 202)
  def _reduce_95(val, _values, result)
     result = CodeNode.new(val[1], val[4], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 203)
  def _reduce_96(val, _values, result)
     result = CodeNode.new([], val[1], val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_97(val, _values, result)
     result = :func 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 209)
  def _reduce_98(val, _values, result)
     result = :boundfunc 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 214)
  def _reduce_99(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 215)
  def _reduce_100(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

# reduce 101 omitted

module_eval(<<'.,.,', 'grammar.y', 221)
  def _reduce_102(val, _values, result)
     result = SplatNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 226)
  def _reduce_103(val, _values, result)
     result = SplatNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 231)
  def _reduce_104(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 232)
  def _reduce_105(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_106(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_107(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 235)
  def _reduce_108(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_109(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 237)
  def _reduce_110(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 238)
  def _reduce_111(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 239)
  def _reduce_112(val, _values, result)
     result = ValueNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_113(val, _values, result)
     result = AccessorNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_114(val, _values, result)
     result = AccessorNode.new(val[1], :prototype) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_115(val, _values, result)
     result = AccessorNode.new(val[1], :soak) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 247)
  def _reduce_116(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 248)
  def _reduce_117(val, _values, result)
     result = SliceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 253)
  def _reduce_118(val, _values, result)
     result = IndexNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 258)
  def _reduce_119(val, _values, result)
     result = ObjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_120(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 264)
  def _reduce_121(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 265)
  def _reduce_122(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 266)
  def _reduce_123(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 268)
  def _reduce_124(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 269)
  def _reduce_125(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 274)
  def _reduce_126(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 275)
  def _reduce_127(val, _values, result)
     result = val[1].new_instance 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 276)
  def _reduce_128(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 281)
  def _reduce_129(val, _values, result)
     result = ExtendsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 286)
  def _reduce_130(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 287)
  def _reduce_131(val, _values, result)
     result = CallNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 292)
  def _reduce_132(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 297)
  def _reduce_133(val, _values, result)
     result = CallNode.new(Value.new('super'), val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 302)
  def _reduce_134(val, _values, result)
     result = ThisNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 303)
  def _reduce_135(val, _values, result)
     result = ThisNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 309)
  def _reduce_136(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 311)
  def _reduce_137(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 317)
  def _reduce_138(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 319)
  def _reduce_139(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 324)
  def _reduce_140(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 329)
  def _reduce_141(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 330)
  def _reduce_142(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 331)
  def _reduce_143(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 332)
  def _reduce_144(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 333)
  def _reduce_145(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 334)
  def _reduce_146(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 335)
  def _reduce_147(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 336)
  def _reduce_148(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 341)
  def _reduce_149(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 342)
  def _reduce_150(val, _values, result)
     result = ([val[0]] << val[2]).flatten 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 347)
  def _reduce_151(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 348)
  def _reduce_152(val, _values, result)
     result = TryNode.new(val[1], nil, nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 350)
  def _reduce_153(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 355)
  def _reduce_154(val, _values, result)
     result = [val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 360)
  def _reduce_155(val, _values, result)
     result = ThrowNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 365)
  def _reduce_156(val, _values, result)
     result = ParentheticalNode.new(val[1], val[0].line) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 370)
  def _reduce_157(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 371)
  def _reduce_158(val, _values, result)
     result = WhileNode.new(val[1], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 372)
  def _reduce_159(val, _values, result)
     result = WhileNode.new(val[2], Expressions.wrap(val[0])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 379)
  def _reduce_160(val, _values, result)
     result = ForNode.new(val[0], val[3], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 380)
  def _reduce_161(val, _values, result)
     result = ForNode.new(val[3], val[2], val[1][0], val[1][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 385)
  def _reduce_162(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 386)
  def _reduce_163(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 391)
  def _reduce_164(val, _values, result)
     result = {:source => val[1]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 392)
  def _reduce_165(val, _values, result)
     result = {:source => val[1], :object => true} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 394)
  def _reduce_166(val, _values, result)
     result = val[0].merge(:filter => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 396)
  def _reduce_167(val, _values, result)
     result = val[0].merge(:step => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 402)
  def _reduce_168(val, _values, result)
     result = val[3].rewrite_condition(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 404)
  def _reduce_169(val, _values, result)
     result = val[3].rewrite_condition(val[1]).add_else(val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 409)
  def _reduce_170(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 410)
  def _reduce_171(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 415)
  def _reduce_172(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 417)
  def _reduce_173(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 418)
  def _reduce_174(val, _values, result)
     result = val[2].add_comment(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 423)
  def _reduce_175(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 428)
  def _reduce_176(val, _values, result)
     result = val[1].force_statement 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 433)
  def _reduce_177(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 434)
  def _reduce_178(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 439)
  def _reduce_179(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 440)
  def _reduce_180(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 445)
  def _reduce_181(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 446)
  def _reduce_182(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 451)
  def _reduce_183(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 452)
  def _reduce_184(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 453)
  def _reduce_185(val, _values, result)
     result = IfNode.new(val[2], Expressions.wrap(val[0]), nil, {:statement => true, :invert => true}) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
