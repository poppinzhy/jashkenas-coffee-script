#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

module CoffeeScript

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 407)
  # Lex and parse a CoffeeScript.
  def parse(code)
    # Uncomment the following line to enable grammar debugging, in combination
    # with the -g flag in the Rake build task.
    # @yydebug = true
    @tokens = Lexer.new.tokenize(code)
    do_parse
  end

  # Retrieve the next token from the list.
  def next_token
    @tokens.shift
  end

  # Raise a custom error class that knows about line numbers.
  def on_error(error_token_id, error_value, value_stack)
    raise ParseError.new(token_to_str(error_token_id), error_value, value_stack)
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'80,263,86,17,21,26,31,36,39,48,51,55,57,246,255,246,247,119,247,73,120',
'3,18,23,87,73,27,32,225,27,32,74,223,73,239,164,162,7,27,32,226,117',
'8,27,32,225,91,94,97,100,103,106,109,77,79,82,85,90,93,96,99,102,105',
'108,76,78,81,84,89,92,95,98,101,104,107,75,27,32,83,88,73,117,117,227',
'140,64,52,8,58,229,17,21,26,31,36,39,48,51,55,57,-162,-162,64,68,1,5',
'-162,-162,14,18,23,28,118,253,41,44,112,53,209,59,62,231,216,3,7,91',
'94,212,117,25,30,34,38,43,46,50,211,117,117,61,91,94,17,21,26,31,36',
'39,48,51,55,57,118,118,139,146,112,129,-162,-162,157,18,23,144,27,32',
'217,22,-162,-162,73,40,241,52,8,58,7,17,21,26,31,36,39,48,51,55,57,3',
'73,64,68,1,5,-162,-162,14,18,23,28,118,206,41,44,112,53,237,59,62,118',
'118,3,7,129,129,91,94,25,30,34,38,43,46,50,140,124,52,61,58,238,17,21',
'26,31,36,39,48,51,55,57,-162,-162,-162,-162,146,157,153,152,124,18,23',
'271,144,73,117,22,243,73,73,40,139,52,8,58,7,17,21,26,31,36,39,48,51',
'55,57,116,3,64,68,1,5,212,284,14,18,23,28,,216,41,44,216,53,,59,62,',
',3,7,,216,,,25,30,34,38,43,46,50,140,,52,61,58,,,115,146,,27,32,,,118',
',144,,112,27,32,217,27,32,217,,,264,,274,248,22,27,32,217,40,218,52',
'8,58,3,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,255,,14,18,23,28,,3',
'41,44,275,53,146,59,62,,,3,7,,144,,146,25,30,34,38,43,46,50,144,,,61',
'91,94,97,100,103,106,109,77,79,82,3,,147,91,94,97,100,103,106,109,3',
',147,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1',
'5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,',
',61,91,94,97,100,103,106,109,77,79,82,85,90,93,96,99,102,105,108,76',
'78,81,91,94,97,100,103,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55',
'57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38',
'43,46,50,,,,61,91,94,97,100,103,106,109,77,79,82,85,90,93,96,99,102',
'105,108,76,78,81,91,94,97,100,103,,22,,,,40,,52,8,58,,17,21,26,31,36',
'39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,',
',,25,30,34,38,43,46,50,,,,61,91,94,97,100,103,106,109,77,79,82,85,90',
'93,96,99,102,105,108,76,78,81,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36',
'39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,',
',,25,30,34,38,43,46,50,,,,61,91,94,97,100,103,106,109,77,79,82,85,90',
'93,96,99,102,105,108,76,78,81,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36',
'39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,',
',,25,30,34,38,43,46,50,,,,61,91,94,97,100,103,106,109,77,79,82,85,90',
'93,96,99,102,105,108,76,78,81,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36',
'39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,',
',,25,30,34,38,43,46,50,,,,61,91,94,97,100,103,106,109,77,79,82,85,90',
'93,96,99,102,105,108,76,78,81,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36',
'39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,251',
',,,25,30,34,38,43,46,50,,,,61,91,94,97,100,103,106,109,77,79,82,85,90',
'93,96,99,102,105,108,76,78,81,,,,,,,22,27,32,,40,,52,8,58,,17,21,26',
'31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,',
'3,7,,,,,25,30,34,38,43,46,50,,,,61,91,94,97,100,103,106,109,77,79,82',
'85,90,93,96,99,102,105,108,76,78,81,,,,,,,22,,,,40,,52,8,58,,17,21,26',
'31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,',
'3,7,,,,,25,30,34,38,43,46,50,,,,61,91,94,97,100,103,106,109,77,79,82',
'85,90,93,91,94,97,100,103,106,109,77,79,82,85,90,93,,22,,,,40,,52,8',
'58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44',
',53,,59,62,,,3,7,132,,,,25,30,34,38,43,46,50,,,,61,91,94,97,100,103',
'106,109,77,79,82,85,90,93,91,94,97,100,103,106,109,77,79,82,85,90,93',
',22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18',
'23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,91,94',
'97,100,103,106,109,77,79,82,91,94,97,100,103,106,109,77,79,82,91,94',
'97,100,103,106,109,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57',
',,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,132,,,,25,30,34,38',
'43,46,50,,,,61,91,94,97,100,103,106,109,,,,,,,,,,,,,,,,,,,,,22,,,,40',
',52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,',
'41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,',
',,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68',
'1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50',
',,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39',
'48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25',
'30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58',
',17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53',
',59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,',
',,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14',
'18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,',
',,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55',
'57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38',
'43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,27,32,,40,,52,8,58,,17',
'21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59',
'62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22',
',,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23',
'28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,',
',,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,',
',64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43',
'46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31',
'36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7',
',,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,',
'52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41',
'44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,',
',,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1',
'5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,',
',61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39',
'48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,132,',
',,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52',
'8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44',
',53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,',
',,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5',
',,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61',
',,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51',
'55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34',
'38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21',
'26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62',
',,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,',
',,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23',
'28,,,41,44,,53,,59,62,,,3,7,,166,,,25,30,34,38,43,46,50,,,,61,,,,,,',
',,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57',
',,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43',
'46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31',
'36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7',
',,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,',
'52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41',
'44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,',
',,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1',
'5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,',
',61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39',
'48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25',
'30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58',
',17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53',
',59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,',
',,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14',
'18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,',
',,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55',
'57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38',
'43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26',
'31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,',
'3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,',
'40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28',
',,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,',
',,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64',
'68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46',
'50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36',
'39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,',
',,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52',
'8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44',
',53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,',
',,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5',
',,14,18,23,28,,,41,44,,53,,59,62,,,3,7,132,,,,25,30,34,38,43,46,50,',
',,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39',
'48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25',
'30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58',
',17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53',
',59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,',
',,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14',
'18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,',
',,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55',
'57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38',
'43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26',
'31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,',
'3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,',
'40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28',
',,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,',
',,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64',
'68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46',
'50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36',
'39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,',
',,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52',
'8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44',
',53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,',
',,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5',
',,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61',
',,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51',
'55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34',
'38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21',
'26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62',
',,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,',
',,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23',
'28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,',
',,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,',
',64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43',
'46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31',
'36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7',
',,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,',
'52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41',
'44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,',
',,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1',
'5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,',
',61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39',
'48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25',
'30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58',
',17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53',
',59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,',
',,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14',
'18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,,61,,,',
',,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26,31,36,39,48,51,55',
'57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38',
'43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22,,,,40,,52,8,58,,17,21,26',
'31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23,28,,,41,44,,53,,59,62,,',
'3,7,132,,,,25,30,34,38,43,46,50,,,,61,,,,,,,,,,,,,,,,,,,,,,,,,,,,22',
',,,40,,52,8,58,,17,21,26,31,36,39,48,51,55,57,,,64,68,1,5,,,14,18,23',
'28,,,41,44,,53,,59,62,,,3,7,,,,,25,30,34,38,43,46,50,,,80,61,86,,,,',
',,,,,,,,,,,,,,,,,87,,,,,22,,74,,40,,52,,58,,,,,,,,,91,94,97,100,103',
'106,109,77,79,82,85,90,93,96,99,102,105,108,76,78,81,84,89,92,95,98',
'101,104,107,75,,,83,88,80,,86,,,279,,,,,,,,,,,,,,,,,,,87,,,,,,,74,,',
',,,,,,,,,,,,91,94,97,100,103,106,109,77,79,82,85,90,93,96,99,102,105',
'108,76,78,81,84,89,92,95,98,101,104,107,75,220,,83,88,80,,86,,,242,',
',,,,,,,,,,,,,,,,,87,,,,,,,74,,,,,,,,,,,,,,,91,94,97,100,103,106,109',
'77,79,82,85,90,93,96,99,102,105,108,76,78,81,84,89,92,95,98,101,104',
'107,75,,,83,88,80,,86,,,282,,,,,,,,,,,,,,,,,,,87,,,,,,,74,,,,,,,,,,',
',,,,91,94,97,100,103,106,109,77,79,82,85,90,93,96,99,102,105,108,76',
'78,81,84,89,92,95,98,101,104,107,75,,,83,88,80,,86,,,,,,,,,,,,,,,,,',
',,,,87,,,,,,,74,,,,,,,73,,,,,,,,91,94,97,100,103,106,109,77,79,82,85',
'90,93,96,99,102,105,108,76,78,81,84,89,92,95,98,101,104,107,75,,,83',
'88,80,,86,,,,,,,,,,,,,,,,,,,,,,87,,,,,,,74,,,,,,,,,,,,,,,91,94,97,100',
'103,106,109,77,79,82,85,90,93,96,99,102,105,108,76,78,81,84,89,92,95',
'98,101,104,107,75,,,83,88,80,,86,,,,,,,,,,,,,,,,,,,,,,87,,,,,,,74,,',
',,,,,,,,,,,,91,94,97,100,103,106,109,77,79,82,85,90,93,96,99,102,105',
'108,76,78,81,84,89,92,95,98,101,104,107,75,,,83,88,80,,86,,,,,,,,,,',
',,,,,,,,,,,87,,,,,,,74,,,,,,,73,,,,,,,,91,94,97,100,103,106,109,77,79',
'82,85,90,93,96,99,102,105,108,76,78,81,84,89,92,95,98,101,104,107,75',
',,83,88,80,,86,,,,,,,,,,,,,,,,,,,,,,87,,,,,,,74,,,,,,,,,,,,,,,91,94',
'97,100,103,106,109,77,79,82,85,90,93,96,99,102,105,108,76,78,81,84,89',
'92,95,98,101,104,107,75,,,83,88,80,,86,,,,,,,,,,,,,,,,,,,,,,87,,,,,',
',74,,,,,,,,,,,,,,,91,94,97,100,103,106,109,77,79,82,85,90,93,96,99,102',
'105,108,76,78,81,84,89,92,95,98,101,104,107,75,,,83,88,80,,86,,,,,,',
',,,,,,,,,,,,,,,87,,,,,,,74,,,,,,,,,,,,,,,91,94,97,100,103,106,109,77',
'79,82,85,90,93,96,99,102,105,108,76,78,81,84,89,92,95,98,101,104,107',
'75,,,83,88,80,,86,,,,,,,,,,,,,,,,,,,,,,87,,,,,,,74,,,,,,,,,,,,,,,91',
'94,97,100,103,106,109,77,79,82,85,90,93,96,99,102,105,108,76,78,81,84',
'89,92,95,98,101,104,107,75,,,83,88,80,,86,,,,,,,,,,,,,,,,,,,,,,87,,',
',,,,74,,,,,,,,,,,,,,,91,94,97,100,103,106,109,77,79,82,85,90,93,96,99',
'102,105,108,76,78,81,84,89,92,95,98,101,104,107,75,220,,83,88,80,,86',
',,,,,,,,,,,,,,,,,,,,,87,,,,,,,74,,,,,,,73,,,,,,,,91,94,97,100,103,106',
'109,77,79,82,85,90,93,96,99,102,105,108,76,78,81,84,89,92,95,98,101',
'104,107,75,,,83,88,80,,86,,,,,,,,,,,,,,,,,,,,,,87,,,,,,,74,,,,,,,,,',
',,,,,91,94,97,100,103,106,109,77,79,82,85,90,93,96,99,102,105,108,76',
'78,81,84,89,92,95,98,101,104,107,75,,,83,88,80,,86,,,,,,,,,,,,,,,,,',
',,,,87,,,,,,,74,,,,,,,222,,,,,,,,91,94,97,100,103,106,109,77,79,82,85',
'90,93,96,99,102,105,108,76,78,81,84,89,92,95,98,101,104,107,75,,,83',
'88,80,,86,,,,,,,,,,,,,,,,,,,,,,87,,,,,,,74,,,,,,,,,,,,,,,91,94,97,100',
'103,106,109,77,79,82,85,90,93,96,99,102,105,108,76,78,81,84,89,92,95',
'98,101,104,107,75,,,83,88,80,,86,,,,,,,,,,,,,,,,,,,,,,87,,,,,,,74,,',
',,,,,,,,,,,,91,94,97,100,103,106,109,77,79,82,85,90,93,96,99,102,105',
'108,76,78,81,84,89,92,95,98,101,104,107,75,,,83,88,80,,86,,,,,,,,,,',
',,,,,,,,,,,87,,,,,,,74,,,,,,,,,,,,,,,91,94,97,100,103,106,109,77,79',
'82,85,90,93,96,99,102,105,108,76,78,81,84,89,92,95,98,101,104,107,75',
',,83,88,80,,86,,,,,,,,,,,,,,,,,,,,,,87,,,,,,,74,,,,,,,,,,,,,,,91,94',
'97,100,103,106,109,77,79,82,85,90,93,96,99,102,105,108,76,78,81,84,89',
'92,95,98,101,104,107,75,80,,86,,,,,,,,,,,,,,,,,,,,,,87,,,,,,,74,,,,',
',,,,,,,,,,91,94,97,100,103,106,109,77,79,82,85,90,93,96,99,102,105,108',
'76,78,81,84,89,92,95,98,101,104,107,75,80,,86,,,,,,,,,,,,,,,,,,,,,,87',
',,,,,,74,,,,,,,,,,,,,,,91,94,97,100,103,106,109,77,79,82,85,90,93,96',
'99,102,105,108,76,78,81,84,89,92,95,98,101,104,107,75,87,,,,,,,74,,',
',,,,,,,,,,,,91,94,97,100,103,106,109,77,79,82,85,90,93,96,99,102,105',
'108,76,78,81,84,89,92,95,98,101,104,107,75,87,,,,,,,74,,,,,,,,,,,,,',
',91,94,97,100,103,106,109,77,79,82,85,90,93,96,99,102,105,108,76,78',
'81,84,89,92,95,98,101,104,107,75,87,,,,,,,74,,,,,,,,,,,,,,,91,94,97',
'100,103,106,109,77,79,82,85,90,93,96,99,102,105,108,76,78,81,84,89,92',
'95,98,101,104,107,75,74,,,,,,,,,,,,,,,91,94,97,100,103,106,109,77,79',
'82,85,90,93,96,99,102,105,108,76,78,81,84,89,92,95,98,101,104,107,75',
'74,,,,,,,,,,,,,,,91,94,97,100,103,106,109,77,79,82,85,90,93,96,99,102',
'105,108,76,78,81,84,89,92,95,98,101,104,107,75,74,,,,,,,,,,,,,,,91,94',
'97,100,103,106,109,77,79,82,85,90,93,96,99,102,105,108,76,78,81,84,89',
'92,95,98,101,104,107,75,74,,,,,,,,,,,,,,,91,94,97,100,103,106,109,77',
'79,82,85,90,93,96,99,102,105,108,76,78,81,84,89,92,95,98,101,104,107',
'75,74,,,,,,,,,,,,,,,91,94,97,100,103,106,109,77,79,82,85,90,93,96,99',
'102,105,108,76,78,81,84,89,92,95,98,101,104,107,75,74,,,,,,,,,,,,,,',
'91,94,97,100,103,106,109,77,79,82,85,90,93,96,99,102,105,108,76,78,81',
'84,89,92,95,98,101,104,107,75,91,94,97,100,103,106,109,77,79,82,85,90',
'93,96,99,102,105,108,76,78,81,84,89,92,95,98,101,104,107,75,91,94,97',
'100,103,106,109,77,79,82,85,90,93,96,99,102,105,108,76,78,81,84,89,92',
'95,98,101,104,107,75,91,94,97,100,103,106,109,77,79,82,85,90,93,96,99',
'102,105,108,76,78,81,84,89,92,95,98,101,104,107,75,91,94,97,100,103',
'106,109,77,79,82,85,90,93,96,99,102,105,108,76,78,81,84,89,92,95,98',
'101,104,107,75,91,94,97,100,103,106,109,77,79,82,85,90,93,96,99,102',
'105,108,76,78,81,84,89,92,95,98,101,104,107,75' ]
        racc_action_table = arr = Array.new(8552, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'149,228,149,116,116,116,116,116,116,116,116,116,116,213,222,240,213',
'10,240,238,10,222,116,116,149,213,143,143,143,280,280,149,143,237,165',
'72,72,116,2,2,144,205,157,228,228,228,149,149,149,149,149,149,149,149',
'149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149,149',
'149,149,149,149,149,165,165,149,149,157,141,159,146,116,120,116,92,116',
'149,92,92,92,92,92,92,92,92,92,92,126,126,92,92,92,92,127,127,92,92',
'92,92,205,220,92,92,205,92,120,92,92,153,202,92,92,188,188,125,160,92',
'92,92,92,92,92,92,124,35,138,92,191,191,50,50,50,50,50,50,50,50,50,50',
'141,159,50,260,141,159,151,151,155,50,50,260,202,202,202,92,130,130',
'162,92,202,92,253,92,50,253,253,253,253,253,253,253,253,253,253,260',
'119,253,253,253,253,135,135,253,253,253,253,160,117,253,253,160,253',
'163,253,253,35,138,253,253,35,138,194,194,253,253,253,253,253,253,253',
'50,87,50,253,50,164,68,68,68,68,68,68,68,68,68,68,137,137,123,123,225',
'67,65,62,28,68,68,253,225,22,9,253,211,5,274,253,209,253,255,253,68',
'255,255,255,255,255,255,255,255,255,255,9,225,255,255,255,255,180,281',
'255,255,255,255,,230,255,255,214,255,,255,255,,,255,255,,131,,,255,255',
'255,255,255,255,255,68,,68,255,68,,,9,224,,225,225,,,9,,224,,9,230,230',
'230,214,214,214,,,230,,256,214,255,131,131,131,255,131,255,212,255,224',
'212,212,212,212,212,212,212,212,212,212,,,212,212,212,212,256,,212,212',
'212,212,,256,212,212,256,212,52,212,212,,,212,212,,52,,147,212,212,212',
'212,212,212,212,147,,,212,178,178,178,178,178,178,178,178,178,178,52',
',52,172,172,172,172,172,172,172,147,,147,,,,,212,,,,212,,212,8,212,',
'8,8,8,8,8,8,8,8,8,8,,,8,8,8,8,,,8,8,8,8,,,8,8,,8,,8,8,,,8,8,,,,,8,8',
'8,8,8,8,8,,,,8,184,184,184,184,184,184,184,184,184,184,184,184,184,184',
'184,184,184,184,184,184,184,197,197,197,197,197,,8,,,,8,,8,215,8,,215',
'215,215,215,215,215,215,215,215,215,,,215,215,215,215,,,215,215,215',
'215,,,215,215,,215,,215,215,,,215,215,,,,,215,215,215,215,215,215,215',
',,,215,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186,186',
'186,186,186,186,186,200,200,200,200,200,,215,,,,215,,215,118,215,,118',
'118,118,118,118,118,118,118,118,118,,,118,118,118,118,,,118,118,118',
'118,,,118,118,,118,,118,118,,,118,118,,,,,118,118,118,118,118,118,118',
',,,118,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171,171',
'171,171,171,171,171,,,,,,,118,,,,118,,118,14,118,,14,14,14,14,14,14',
'14,14,14,14,,,14,14,14,14,,,14,14,14,14,,,14,14,,14,,14,14,,,14,14,',
',,,14,14,14,14,14,14,14,,,,14,169,169,169,169,169,169,169,169,169,169',
'169,169,169,169,169,169,169,169,169,169,169,,,,,,,14,,,,14,,14,271,14',
',271,271,271,271,271,271,271,271,271,271,,,271,271,271,271,,,271,271',
'271,271,,,271,271,,271,,271,271,,,271,271,,,,,271,271,271,271,271,271',
'271,,,,271,182,182,182,182,182,182,182,182,182,182,182,182,182,182,182',
'182,182,182,182,182,182,,,,,,,271,,,,271,,271,25,271,,25,25,25,25,25',
'25,25,25,25,25,,,25,25,25,25,,,25,25,25,25,,,25,25,,25,,25,25,,,25,25',
',,,,25,25,25,25,25,25,25,,,,25,174,174,174,174,174,174,174,174,174,174',
'174,174,174,174,174,174,174,174,174,174,174,,,,,,,25,,,,25,,25,217,25',
',217,217,217,217,217,217,217,217,217,217,,,217,217,217,217,,,217,217',
'217,217,,,217,217,,217,,217,217,,,217,217,217,,,,217,217,217,217,217',
'217,217,,,,217,177,177,177,177,177,177,177,177,177,177,177,177,177,177',
'177,177,177,177,177,177,177,,,,,,,217,217,217,,217,,217,30,217,,30,30',
'30,30,30,30,30,30,30,30,,,30,30,30,30,,,30,30,30,30,,,30,30,,30,,30',
'30,,,30,30,,,,,30,30,30,30,30,30,30,,,,30,199,199,199,199,199,199,199',
'199,199,199,199,199,199,199,199,199,199,199,199,199,199,,,,,,,30,,,',
'30,,30,34,30,,34,34,34,34,34,34,34,34,34,34,,,34,34,34,34,,,34,34,34',
'34,,,34,34,,34,,34,34,,,34,34,,,,,34,34,34,34,34,34,34,,,,34,193,193',
'193,193,193,193,193,193,193,193,193,193,193,190,190,190,190,190,190',
'190,190,190,190,190,190,190,,34,,,,34,,34,152,34,,152,152,152,152,152',
'152,152,152,152,152,,,152,152,152,152,,,152,152,152,152,,,152,152,,152',
',152,152,,,152,152,152,,,,152,152,152,152,152,152,152,,,,152,196,196',
'196,196,196,196,196,196,196,196,196,196,196,187,187,187,187,187,187',
'187,187,187,187,187,187,187,,152,,,,152,,152,38,152,,38,38,38,38,38',
'38,38,38,38,38,,,38,38,38,38,,,38,38,38,38,,,38,38,,38,,38,38,,,38,38',
',,,,38,38,38,38,38,38,38,,,,38,183,183,183,183,183,183,183,183,183,183',
'185,185,185,185,185,185,185,185,185,185,170,170,170,170,170,170,170',
'38,,,,38,,38,40,38,,40,40,40,40,40,40,40,40,40,40,,,40,40,40,40,,,40',
'40,40,40,,,40,40,,40,,40,40,,,40,40,40,,,,40,40,40,40,40,40,40,,,,40',
'175,175,175,175,175,175,175,,,,,,,,,,,,,,,,,,,,,40,,,,40,,40,41,40,',
'41,41,41,41,41,41,41,41,41,41,,,41,41,41,41,,,41,41,41,41,,,41,41,,41',
',41,41,,,41,41,,,,,41,41,41,41,41,41,41,,,,41,,,,,,,,,,,,,,,,,,,,,,',
',,,,,41,,,,41,,41,43,41,,43,43,43,43,43,43,43,43,43,43,,,43,43,43,43',
',,43,43,43,43,,,43,43,,43,,43,43,,,43,43,,,,,43,43,43,43,43,43,43,,',
',43,,,,,,,,,,,,,,,,,,,,,,,,,,,,43,,,,43,,43,44,43,,44,44,44,44,44,44',
'44,44,44,44,,,44,44,44,44,,,44,44,44,44,,,44,44,,44,,44,44,,,44,44,',
',,,44,44,44,44,44,44,44,,,,44,,,,,,,,,,,,,,,,,,,,,,,,,,,,44,,,,44,,44',
'46,44,,46,46,46,46,46,46,46,46,46,46,,,46,46,46,46,,,46,46,46,46,,,46',
'46,,46,,46,46,,,46,46,,,,,46,46,46,46,46,46,46,,,,46,,,,,,,,,,,,,,,',
',,,,,,,,,,,,46,,,,46,,46,251,46,,251,251,251,251,251,251,251,251,251',
'251,,,251,251,251,251,,,251,251,251,251,,,251,251,,251,,251,251,,,251',
'251,,,,,251,251,251,251,251,251,251,,,,251,,,,,,,,,,,,,,,,,,,,,,,,,',
',,251,,,,251,,251,0,251,,0,0,0,0,0,0,0,0,0,0,,,0,0,0,0,,,0,0,0,0,,,0',
'0,,0,,0,0,,,0,0,,,,,0,0,0,0,0,0,0,,,,0,,,,,,,,,,,,,,,,,,,,,,,,,,,,0',
'0,0,,0,,0,53,0,,53,53,53,53,53,53,53,53,53,53,,,53,53,53,53,,,53,53',
'53,53,,,53,53,,53,,53,53,,,53,53,,,,,53,53,53,53,53,53,53,,,,53,,,,',
',,,,,,,,,,,,,,,,,,,,,,,53,,,,53,,53,58,53,,58,58,58,58,58,58,58,58,58',
'58,,,58,58,58,58,,,58,58,58,58,,,58,58,,58,,58,58,,,58,58,,,,,58,58',
'58,58,58,58,58,,,,58,,,,,,,,,,,,,,,,,,,,,,,,,,,,58,,,,58,,58,59,58,',
'59,59,59,59,59,59,59,59,59,59,,,59,59,59,59,,,59,59,59,59,,,59,59,,59',
',59,59,,,59,59,,,,,59,59,59,59,59,59,59,,,,59,,,,,,,,,,,,,,,,,,,,,,',
',,,,,59,,,,59,,59,61,59,,61,61,61,61,61,61,61,61,61,61,,,61,61,61,61',
',,61,61,61,61,,,61,61,,61,,61,61,,,61,61,,,,,61,61,61,61,61,61,61,,',
',61,,,,,,,,,,,,,,,,,,,,,,,,,,,,61,,,,61,,61,226,61,,226,226,226,226',
'226,226,226,226,226,226,,,226,226,226,226,,,226,226,226,226,,,226,226',
',226,,226,226,,,226,226,,,,,226,226,226,226,226,226,226,,,,226,,,,,',
',,,,,,,,,,,,,,,,,,,,,,226,,,,226,,226,227,226,,227,227,227,227,227,227',
'227,227,227,227,,,227,227,227,227,,,227,227,227,227,,,227,227,,227,',
'227,227,,,227,227,,,,,227,227,227,227,227,227,227,,,,227,,,,,,,,,,,',
',,,,,,,,,,,,,,,,227,,,,227,,227,140,227,,140,140,140,140,140,140,140',
'140,140,140,,,140,140,140,140,,,140,140,140,140,,,140,140,,140,,140',
'140,,,140,140,140,,,,140,140,140,140,140,140,140,,,,140,,,,,,,,,,,,',
',,,,,,,,,,,,,,,140,,,,140,,140,252,140,,252,252,252,252,252,252,252',
'252,252,252,,,252,252,252,252,,,252,252,252,252,,,252,252,,252,,252',
'252,,,252,252,,,,,252,252,252,252,252,252,252,,,,252,,,,,,,,,,,,,,,',
',,,,,,,,,,,,252,,,,252,,252,132,252,,132,132,132,132,132,132,132,132',
'132,132,,,132,132,132,132,,,132,132,132,132,,,132,132,,132,,132,132',
',,132,132,,,,,132,132,132,132,132,132,132,,,,132,,,,,,,,,,,,,,,,,,,',
',,,,,,,,132,,,,132,,132,71,132,,71,71,71,71,71,71,71,71,71,71,,,71,71',
'71,71,,,71,71,71,71,,,71,71,,71,,71,71,,,71,71,,,,,71,71,71,71,71,71',
'71,,,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,71,,,,71,,71,246,71,,246,246,246',
'246,246,246,246,246,246,246,,,246,246,246,246,,,246,246,246,246,,,246',
'246,,246,,246,246,,,246,246,,,,,246,246,246,246,246,246,246,,,,246,',
',,,,,,,,,,,,,,,,,,,,,,,,,,246,,,,246,,246,73,246,,73,73,73,73,73,73',
'73,73,73,73,,,73,73,73,73,,,73,73,73,73,,,73,73,,73,,73,73,,,73,73,',
'73,,,73,73,73,73,73,73,73,,,,73,,,,,,,,,,,,,,,,,,,,,,,,,,,,73,,,,73',
',73,74,73,,74,74,74,74,74,74,74,74,74,74,,,74,74,74,74,,,74,74,74,74',
',,74,74,,74,,74,74,,,74,74,,,,,74,74,74,74,74,74,74,,,,74,,,,,,,,,,',
',,,,,,,,,,,,,,,,,74,,,,74,,74,75,74,,75,75,75,75,75,75,75,75,75,75,',
',75,75,75,75,,,75,75,75,75,,,75,75,,75,,75,75,,,75,75,,,,,75,75,75,75',
'75,75,75,,,,75,,,,,,,,,,,,,,,,,,,,,,,,,,,,75,,,,75,,75,76,75,,76,76',
'76,76,76,76,76,76,76,76,,,76,76,76,76,,,76,76,76,76,,,76,76,,76,,76',
'76,,,76,76,,,,,76,76,76,76,76,76,76,,,,76,,,,,,,,,,,,,,,,,,,,,,,,,,',
',76,,,,76,,76,77,76,,77,77,77,77,77,77,77,77,77,77,,,77,77,77,77,,,77',
'77,77,77,,,77,77,,77,,77,77,,,77,77,,,,,77,77,77,77,77,77,77,,,,77,',
',,,,,,,,,,,,,,,,,,,,,,,,,,77,,,,77,,77,78,77,,78,78,78,78,78,78,78,78',
'78,78,,,78,78,78,78,,,78,78,78,78,,,78,78,,78,,78,78,,,78,78,,,,,78',
'78,78,78,78,78,78,,,,78,,,,,,,,,,,,,,,,,,,,,,,,,,,,78,,,,78,,78,79,78',
',79,79,79,79,79,79,79,79,79,79,,,79,79,79,79,,,79,79,79,79,,,79,79,',
'79,,79,79,,,79,79,,,,,79,79,79,79,79,79,79,,,,79,,,,,,,,,,,,,,,,,,,',
',,,,,,,,79,,,,79,,79,80,79,,80,80,80,80,80,80,80,80,80,80,,,80,80,80',
'80,,,80,80,80,80,,,80,80,,80,,80,80,,,80,80,,,,,80,80,80,80,80,80,80',
',,,80,,,,,,,,,,,,,,,,,,,,,,,,,,,,80,,,,80,,80,81,80,,81,81,81,81,81',
'81,81,81,81,81,,,81,81,81,81,,,81,81,81,81,,,81,81,,81,,81,81,,,81,81',
',,,,81,81,81,81,81,81,81,,,,81,,,,,,,,,,,,,,,,,,,,,,,,,,,,81,,,,81,',
'81,82,81,,82,82,82,82,82,82,82,82,82,82,,,82,82,82,82,,,82,82,82,82',
',,82,82,,82,,82,82,,,82,82,,,,,82,82,82,82,82,82,82,,,,82,,,,,,,,,,',
',,,,,,,,,,,,,,,,,82,,,,82,,82,83,82,,83,83,83,83,83,83,83,83,83,83,',
',83,83,83,83,,,83,83,83,83,,,83,83,,83,,83,83,,,83,83,,,,,83,83,83,83',
'83,83,83,,,,83,,,,,,,,,,,,,,,,,,,,,,,,,,,,83,,,,83,,83,84,83,,84,84',
'84,84,84,84,84,84,84,84,,,84,84,84,84,,,84,84,84,84,,,84,84,,84,,84',
'84,,,84,84,,,,,84,84,84,84,84,84,84,,,,84,,,,,,,,,,,,,,,,,,,,,,,,,,',
',84,,,,84,,84,85,84,,85,85,85,85,85,85,85,85,85,85,,,85,85,85,85,,,85',
'85,85,85,,,85,85,,85,,85,85,,,85,85,,,,,85,85,85,85,85,85,85,,,,85,',
',,,,,,,,,,,,,,,,,,,,,,,,,,85,,,,85,,85,86,85,,86,86,86,86,86,86,86,86',
'86,86,,,86,86,86,86,,,86,86,86,86,,,86,86,,86,,86,86,,,86,86,,,,,86',
'86,86,86,86,86,86,,,,86,,,,,,,,,,,,,,,,,,,,,,,,,,,,86,,,,86,,86,129',
'86,,129,129,129,129,129,129,129,129,129,129,,,129,129,129,129,,,129',
'129,129,129,,,129,129,,129,,129,129,,,129,129,129,,,,129,129,129,129',
'129,129,129,,,,129,,,,,,,,,,,,,,,,,,,,,,,,,,,,129,,,,129,,129,88,129',
',88,88,88,88,88,88,88,88,88,88,,,88,88,88,88,,,88,88,88,88,,,88,88,',
'88,,88,88,,,88,88,,,,,88,88,88,88,88,88,88,,,,88,,,,,,,,,,,,,,,,,,,',
',,,,,,,,88,,,,88,,88,89,88,,89,89,89,89,89,89,89,89,89,89,,,89,89,89',
'89,,,89,89,89,89,,,89,89,,89,,89,89,,,89,89,,,,,89,89,89,89,89,89,89',
',,,89,,,,,,,,,,,,,,,,,,,,,,,,,,,,89,,,,89,,89,90,89,,90,90,90,90,90',
'90,90,90,90,90,,,90,90,90,90,,,90,90,90,90,,,90,90,,90,,90,90,,,90,90',
',,,,90,90,90,90,90,90,90,,,,90,,,,,,,,,,,,,,,,,,,,,,,,,,,,90,,,,90,',
'90,1,90,,1,1,1,1,1,1,1,1,1,1,,,1,1,1,1,,,1,1,1,1,,,1,1,,1,,1,1,,,1,1',
',,,,1,1,1,1,1,1,1,,,,1,,,,,,,,,,,,,,,,,,,,,,,,,,,,1,,,,1,,1,93,1,,93',
'93,93,93,93,93,93,93,93,93,,,93,93,93,93,,,93,93,93,93,,,93,93,,93,',
'93,93,,,93,93,,,,,93,93,93,93,93,93,93,,,,93,,,,,,,,,,,,,,,,,,,,,,,',
',,,,93,,,,93,,93,95,93,,95,95,95,95,95,95,95,95,95,95,,,95,95,95,95',
',,95,95,95,95,,,95,95,,95,,95,95,,,95,95,,,,,95,95,95,95,95,95,95,,',
',95,,,,,,,,,,,,,,,,,,,,,,,,,,,,95,,,,95,,95,96,95,,96,96,96,96,96,96',
'96,96,96,96,,,96,96,96,96,,,96,96,96,96,,,96,96,,96,,96,96,,,96,96,',
',,,96,96,96,96,96,96,96,,,,96,,,,,,,,,,,,,,,,,,,,,,,,,,,,96,,,,96,,96',
'97,96,,97,97,97,97,97,97,97,97,97,97,,,97,97,97,97,,,97,97,97,97,,,97',
'97,,97,,97,97,,,97,97,,,,,97,97,97,97,97,97,97,,,,97,,,,,,,,,,,,,,,',
',,,,,,,,,,,,97,,,,97,,97,115,97,,115,115,115,115,115,115,115,115,115',
'115,,,115,115,115,115,,,115,115,115,115,,,115,115,,115,,115,115,,,115',
'115,,,,,115,115,115,115,115,115,115,,,,115,,,,,,,,,,,,,,,,,,,,,,,,,',
',,115,,,,115,,115,99,115,,99,99,99,99,99,99,99,99,99,99,,,99,99,99,99',
',,99,99,99,99,,,99,99,,99,,99,99,,,99,99,,,,,99,99,99,99,99,99,99,,',
',99,,,,,,,,,,,,,,,,,,,,,,,,,,,,99,,,,99,,99,100,99,,100,100,100,100',
'100,100,100,100,100,100,,,100,100,100,100,,,100,100,100,100,,,100,100',
',100,,100,100,,,100,100,,,,,100,100,100,100,100,100,100,,,,100,,,,,',
',,,,,,,,,,,,,,,,,,,,,,100,,,,100,,100,101,100,,101,101,101,101,101,101',
'101,101,101,101,,,101,101,101,101,,,101,101,101,101,,,101,101,,101,',
'101,101,,,101,101,,,,,101,101,101,101,101,101,101,,,,101,,,,,,,,,,,',
',,,,,,,,,,,,,,,,101,,,,101,,101,102,101,,102,102,102,102,102,102,102',
'102,102,102,,,102,102,102,102,,,102,102,102,102,,,102,102,,102,,102',
'102,,,102,102,,,,,102,102,102,102,102,102,102,,,,102,,,,,,,,,,,,,,,',
',,,,,,,,,,,,102,,,,102,,102,103,102,,103,103,103,103,103,103,103,103',
'103,103,,,103,103,103,103,,,103,103,103,103,,,103,103,,103,,103,103',
',,103,103,,,,,103,103,103,103,103,103,103,,,,103,,,,,,,,,,,,,,,,,,,',
',,,,,,,,103,,,,103,,103,104,103,,104,104,104,104,104,104,104,104,104',
'104,,,104,104,104,104,,,104,104,104,104,,,104,104,,104,,104,104,,,104',
'104,,,,,104,104,104,104,104,104,104,,,,104,,,,,,,,,,,,,,,,,,,,,,,,,',
',,104,,,,104,,104,105,104,,105,105,105,105,105,105,105,105,105,105,',
',105,105,105,105,,,105,105,105,105,,,105,105,,105,,105,105,,,105,105',
',,,,105,105,105,105,105,105,105,,,,105,,,,,,,,,,,,,,,,,,,,,,,,,,,,105',
',,,105,,105,106,105,,106,106,106,106,106,106,106,106,106,106,,,106,106',
'106,106,,,106,106,106,106,,,106,106,,106,,106,106,,,106,106,,,,,106',
'106,106,106,106,106,106,,,,106,,,,,,,,,,,,,,,,,,,,,,,,,,,,106,,,,106',
',106,107,106,,107,107,107,107,107,107,107,107,107,107,,,107,107,107',
'107,,,107,107,107,107,,,107,107,,107,,107,107,,,107,107,,,,,107,107',
'107,107,107,107,107,,,,107,,,,,,,,,,,,,,,,,,,,,,,,,,,,107,,,,107,,107',
'108,107,,108,108,108,108,108,108,108,108,108,108,,,108,108,108,108,',
',108,108,108,108,,,108,108,,108,,108,108,,,108,108,,,,,108,108,108,108',
'108,108,108,,,,108,,,,,,,,,,,,,,,,,,,,,,,,,,,,108,,,,108,,108,109,108',
',109,109,109,109,109,109,109,109,109,109,,,109,109,109,109,,,109,109',
'109,109,,,109,109,,109,,109,109,,,109,109,,,,,109,109,109,109,109,109',
'109,,,,109,,,,,,,,,,,,,,,,,,,,,,,,,,,,109,,,,109,,109,247,109,,247,247',
'247,247,247,247,247,247,247,247,,,247,247,247,247,,,247,247,247,247',
',,247,247,,247,,247,247,,,247,247,,,,,247,247,247,247,247,247,247,,',
',247,,,,,,,,,,,,,,,,,,,,,,,,,,,,247,,,,247,,247,112,247,,112,112,112',
'112,112,112,112,112,112,112,,,112,112,112,112,,,112,112,112,112,,,112',
'112,,112,,112,112,,,112,112,112,,,,112,112,112,112,112,112,112,,,,112',
',,,,,,,,,,,,,,,,,,,,,,,,,,,112,,,,112,,112,98,112,,98,98,98,98,98,98',
'98,98,98,98,,,98,98,98,98,,,98,98,98,98,,,98,98,,98,,98,98,,,98,98,',
',,,98,98,98,98,98,98,98,,,272,98,272,,,,,,,,,,,,,,,,,,,,,,272,,,,,98',
',272,,98,,98,,98,,,,,,,,,272,272,272,272,272,272,272,272,272,272,272',
'272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272,272',
'272,272,,,272,272,207,,207,,,272,,,,,,,,,,,,,,,,,,,207,,,,,,,207,,,',
',,,,,,,,,,,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207',
'207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,207,,207',
'207,278,,278,,,207,,,,,,,,,,,,,,,,,,,278,,,,,,,278,,,,,,,,,,,,,,,278',
'278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278,278',
'278,278,278,278,278,278,278,278,278,278,278,278,,,278,278,250,,250,',
',278,,,,,,,,,,,,,,,,,,,250,,,,,,,250,,,,,,,,,,,,,,,250,250,250,250,250',
'250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250,250',
'250,250,250,250,250,250,250,250,,,250,250,273,,273,,,,,,,,,,,,,,,,,',
',,,,273,,,,,,,273,,,,,,,273,,,,,,,,273,273,273,273,273,273,273,273,273',
'273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273,273',
'273,273,273,273,,,273,273,161,,161,,,,,,,,,,,,,,,,,,,,,,161,,,,,,,161',
',,,,,,,,,,,,,,161,161,161,161,161,161,161,161,161,161,161,161,161,161',
'161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,,,161',
'161,249,,249,,,,,,,,,,,,,,,,,,,,,,249,,,,,,,249,,,,,,,,,,,,,,,249,249',
'249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249,249',
'249,249,249,249,249,249,249,249,249,249,249,,,249,249,110,,110,,,,,',
',,,,,,,,,,,,,,,,110,,,,,,,110,,,,,,,110,,,,,,,,110,110,110,110,110,110',
'110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110',
'110,110,110,110,110,110,110,,,110,110,261,,261,,,,,,,,,,,,,,,,,,,,,',
'261,,,,,,,261,,,,,,,,,,,,,,,261,261,261,261,261,261,261,261,261,261',
'261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261,261',
'261,261,261,,,261,261,262,,262,,,,,,,,,,,,,,,,,,,,,,262,,,,,,,262,,',
',,,,,,,,,,,,262,262,262,262,262,262,262,262,262,262,262,262,262,262',
'262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,262,,,262',
'262,270,,270,,,,,,,,,,,,,,,,,,,,,,270,,,,,,,270,,,,,,,,,,,,,,,270,270',
'270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270,270',
'270,270,270,270,270,270,270,270,270,270,270,,,270,270,6,,6,,,,,,,,,',
',,,,,,,,,,,,6,,,,,,,6,,,,,,,,,,,,,,,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6',
'6,6,6,6,6,6,6,6,6,6,6,6,6,6,,,6,6,133,,133,,,,,,,,,,,,,,,,,,,,,,133',
',,,,,,133,,,,,,,,,,,,,,,133,133,133,133,133,133,133,133,133,133,133',
'133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133',
'133,133,133,,133,133,134,,134,,,,,,,,,,,,,,,,,,,,,,134,,,,,,,134,,,',
',,,134,,,,,,,,134,134,134,134,134,134,134,134,134,134,134,134,134,134',
'134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,,,134',
'134,203,,203,,,,,,,,,,,,,,,,,,,,,,203,,,,,,,203,,,,,,,,,,,,,,,203,203',
'203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203,203',
'203,203,203,203,203,203,203,203,203,203,203,,,203,203,136,,136,,,,,',
',,,,,,,,,,,,,,,,136,,,,,,,136,,,,,,,136,,,,,,,,136,136,136,136,136,136',
'136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136',
'136,136,136,136,136,136,136,,,136,136,269,,269,,,,,,,,,,,,,,,,,,,,,',
'269,,,,,,,269,,,,,,,,,,,,,,,269,269,269,269,269,269,269,269,269,269',
'269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269,269',
'269,269,269,,,269,269,219,,219,,,,,,,,,,,,,,,,,,,,,,219,,,,,,,219,,',
',,,,,,,,,,,,219,219,219,219,219,219,219,219,219,219,219,219,219,219',
'219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,219,,,219',
'219,70,,70,,,,,,,,,,,,,,,,,,,,,,70,,,,,,,70,,,,,,,,,,,,,,,70,70,70,70',
'70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70',
'70,70,70,,,70,70,204,,204,,,,,,,,,,,,,,,,,,,,,,204,,,,,,,204,,,,,,,',
',,,,,,,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204,204',
'204,204,204,204,204,204,204,204,204,204,204,204,204,204,176,,176,,,',
',,,,,,,,,,,,,,,,,,176,,,,,,,176,,,,,,,,,,,,,,,176,176,176,176,176,176',
'176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176,176',
'176,176,176,176,176,176,176,181,,181,,,,,,,,,,,,,,,,,,,,,,181,,,,,,',
'181,,,,,,,,,,,,,,,181,181,181,181,181,181,181,181,181,181,181,181,181',
'181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181',
'173,,,,,,,173,,,,,,,,,,,,,,,173,173,173,173,173,173,173,173,173,173',
'173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173,173',
'173,173,173,121,,,,,,,121,,,,,,,,,,,,,,,121,121,121,121,121,121,121',
'121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121',
'121,121,121,121,121,121,179,,,,,,,179,,,,,,,,,,,,,,,179,179,179,179',
'179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179,179',
'179,179,179,179,179,179,179,179,179,167,,,,,,,,,,,,,,,167,167,167,167',
'167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167,167',
'167,167,167,167,167,167,167,167,167,268,,,,,,,,,,,,,,,268,268,268,268',
'268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268,268',
'268,268,268,268,268,268,268,268,268,148,,,,,,,,,,,,,,,148,148,148,148',
'148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148',
'148,148,148,148,148,148,148,148,148,244,,,,,,,,,,,,,,,244,244,244,244',
'244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244',
'244,244,244,244,244,244,244,244,244,150,,,,,,,,,,,,,,,150,150,150,150',
'150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150',
'150,150,150,150,150,150,150,150,150,267,,,,,,,,,,,,,,,267,267,267,267',
'267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267,267',
'267,267,267,267,267,267,267,267,267,198,198,198,198,198,198,198,198',
'198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198,198',
'198,198,198,198,198,195,195,195,195,195,195,195,195,195,195,195,195',
'195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195,195',
'195,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189,189',
'189,189,189,189,189,189,189,189,189,189,189,189,189,189,168,168,168',
'168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168,168',
'168,168,168,168,168,168,168,168,168,168,192,192,192,192,192,192,192',
'192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192',
'192,192,192,192,192,192' ]
        racc_action_check = arr = Array.new(8552, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
  1912,  4522,   -45,   nil,   nil,   216,  7106,   nil,   433,   238,
   -65,   nil,   nil,   nil,   694,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   212,   nil,   nil,   868,   nil,   nil,   233,   nil,
  1042,   nil,   nil,   nil,  1129,   122,   nil,   nil,  1303,   nil,
  1390,  1477,   nil,  1564,  1651,   nil,  1738,   nil,   nil,   nil,
   137,   nil,   373,  1999,   nil,   nil,   nil,   nil,  2086,  2173,
   nil,  2260,   156,   nil,   nil,   245,   nil,   241,   224,   nil,
  7666,  2782,    14,  2956,  3043,  3130,  3217,  3304,  3391,  3478,
  3565,  3652,  3739,  3826,  3913,  4000,  4087,   210,  4261,  4348,
  4435,   nil,    85,  4609,   nil,  4696,  4783,  4870,  6175,  5044,
  5131,  5218,  5305,  5392,  5479,  5566,  5653,  5740,  5827,  5914,
  6786,   nil,  6088,   nil,   nil,  4957,    -2,   186,   607,   148,
    68,  8002,   nil,   193,    51,   100,    52,    58,   nil,  4174,
   120,   259,  2695,  7186,  7266,   145,  7426,   191,   123,   nil,
  2521,    66,   nil,   -57,   -39,   nil,     4,   383,  8189,    -2,
  8279,   110,  1216,   121,   nil,   157,   nil,    40,   nil,    67,
   113,  6626,   130,   183,   214,    -7,   nil,  8099,  8444,   701,
  1330,   614,   366,  7950,   875,  1397,  7822,   962,   353,  8054,
   253,  7898,   788,  1310,   440,  1320,   527,  1236,    77,  8414,
  1149,    92,  8474,  1136,   166,  8384,  1223,   461,  8354,  1049,
   548,   nil,    81,  7346,  7746,    26,   nil,  6306,   nil,   242,
   nil,   241,   346,   -15,   249,   520,   nil,   955,   nil,  7586,
    35,   nil,   -17,   nil,   312,   237,  2347,  2434,   -40,   nil,
   246,   nil,   nil,   nil,   nil,   nil,   nil,    -7,   -21,   nil,
   -13,   nil,   nil,   nil,  8234,   nil,  2869,  6001,   nil,  6706,
  6466,  1825,  2608,   172,   nil,   259,   336,   nil,   nil,   nil,
   149,  6866,  6946,   nil,   nil,   nil,   nil,  8324,  8144,  7506,
  7026,   781,  6226,  6546,   217,   nil,   nil,   nil,  6386,   nil,
   -54,   240,   nil,   nil,   nil ]

racc_action_default = [
    -1,  -162,    -3,   -44,   -95,  -162,    -4,   -29,  -162,    -7,
  -162,    -8,   -89,   -96,  -162,    -9,   -97,   -27,   -31,   -10,
   -98,   -28,  -162,   -32,   -11,  -162,   -30,   -25,  -162,   -12,
  -162,   -33,   -26,   -13,  -162,  -112,   -34,   -14,  -162,   -35,
  -122,  -162,   -15,  -162,  -162,   -16,  -162,  -114,   -36,   -17,
  -162,   -37,  -106,  -162,   -18,   -38,   -19,   -94,  -162,  -162,
   -20,  -162,  -162,   -21,   -91,  -162,   -22,  -155,  -162,    -2,
   -43,    -6,  -162,  -162,  -162,  -162,  -162,  -162,  -162,  -162,
  -162,  -162,  -162,  -162,  -162,  -162,  -162,  -162,  -162,  -162,
  -162,   -55,  -162,  -162,   -54,  -162,  -162,  -162,  -162,  -162,
  -162,  -162,  -162,  -162,  -162,  -162,  -162,  -162,  -162,  -162,
  -162,   -99,  -122,  -103,  -102,  -162,  -162,  -162,  -162,  -162,
  -162,  -134,   -88,   -48,  -139,  -162,   -45,   -46,  -100,  -122,
   -49,  -162,  -162,  -123,  -162,   -51,  -162,   -50,  -162,   -92,
  -122,   -93,   -42,  -162,  -162,  -107,  -162,  -106,   -52,  -162,
   -53,   -47,  -122,  -162,  -153,  -155,  -157,  -162,  -159,  -113,
  -162,    -5,  -162,  -130,  -162,  -162,   -24,   -86,   -83,   -72,
   -61,   -73,   -62,  -160,   -74,   -63,   -84,   -75,   -64,  -161,
  -162,   -85,   -76,   -65,   -77,   -66,   -78,   -67,   -56,   -79,
   -68,   -57,   -80,   -69,   -58,   -81,   -70,   -59,   -82,   -71,
   -60,  -151,  -162,  -123,   -39,  -115,  -101,  -162,   -87,  -162,
   -90,  -162,  -162,  -162,  -162,  -162,  -129,  -162,  -121,  -124,
  -162,  -136,  -162,  -105,  -162,  -162,  -162,  -162,  -162,  -135,
  -162,   285,  -154,  -158,  -152,  -156,  -131,  -162,  -162,   -23,
  -137,  -116,  -104,  -140,  -141,  -138,  -162,  -162,  -117,  -126,
  -125,  -162,  -162,  -162,  -150,  -162,  -162,  -146,  -109,  -108,
  -162,   -40,   -41,  -111,  -118,  -132,  -133,  -143,  -142,  -128,
  -127,  -162,  -162,  -162,  -162,  -144,  -147,  -110,  -162,  -119,
  -148,  -162,  -120,  -149,  -145 ]

racc_goto_table = [
    69,   113,    71,     6,    70,   141,   154,   138,   125,   156,
   213,   110,   128,   202,   257,    72,    65,   121,   142,   143,
   163,   258,   259,   160,   234,   159,   256,   113,   123,   155,
   214,   210,   122,   126,   158,   nil,   nil,   127,   nil,   nil,
   nil,   130,   nil,   133,   134,   nil,   135,   136,   276,   137,
     2,   nil,   nil,   230,   nil,   nil,   148,   277,   nil,   nil,
   nil,   149,   150,   nil,   151,   240,   nil,   180,   nil,   nil,
   nil,   205,   nil,   138,   161,   nil,     6,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
   nil,   181,   182,   183,   232,   184,   185,   233,   186,   187,
   188,   189,   190,   191,   192,   193,   194,   195,   196,   197,
   198,   199,   200,   142,   228,   128,   nil,   nil,   204,   nil,
   201,   207,   nil,   165,   nil,   nil,   nil,   nil,   nil,   208,
   113,   nil,   nil,   113,   nil,   219,   128,   nil,   nil,   nil,
   nil,   nil,   nil,   224,   221,   nil,   nil,   nil,   nil,   nil,
   nil,   113,   113,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    71,   nil,   235,   nil,   nil,
   nil,   nil,   236,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   254,   nil,
   142,   142,   nil,   nil,   nil,   nil,   nil,   113,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   244,   nil,   252,   249,   nil,
   250,   nil,   254,   245,   nil,   260,   142,   nil,   224,   261,
   262,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   265,   266,   267,
   268,   nil,   nil,   nil,   269,   270,   272,   nil,   273,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   278,   nil,   nil,   nil,   nil,   nil,
   283,   nil,   nil,   280,   281 ]

racc_goto_check = [
     2,     9,     2,     4,     4,     5,    41,    30,    36,    43,
    37,     4,    29,    34,    39,    21,     1,     4,    20,    32,
    35,    23,    23,     5,    40,    30,    38,     9,     4,    42,
    34,    25,    21,     4,    44,   nil,   nil,     4,   nil,   nil,
   nil,     4,   nil,     4,     4,   nil,     4,     4,    39,     4,
     3,   nil,   nil,    34,   nil,   nil,     4,    23,   nil,   nil,
   nil,     4,     4,   nil,     4,    37,   nil,    36,   nil,   nil,
   nil,     5,   nil,    30,     4,   nil,     4,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
   nil,     4,     4,     4,    41,     4,     4,    43,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,    20,    32,    29,   nil,   nil,     4,   nil,
    21,     4,   nil,     3,   nil,   nil,   nil,   nil,   nil,    21,
     9,   nil,   nil,     9,   nil,     4,    29,   nil,   nil,   nil,
   nil,   nil,   nil,     2,    21,   nil,   nil,   nil,   nil,   nil,
   nil,     9,     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     2,   nil,    21,   nil,   nil,
   nil,   nil,    21,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    20,   nil,
    20,    20,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     4,   nil,     2,     4,   nil,
     4,   nil,    20,    21,   nil,     2,    20,   nil,     2,     4,
     4,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    21,    21,     4,
     4,   nil,   nil,   nil,     4,     4,     4,   nil,     4,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,
     2,   nil,   nil,    21,    21 ]

racc_goto_pointer = [
   nil,    16,     0,    50,     3,   -45,   nil,   nil,   nil,    -8,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   -34,    10,   nil,  -203,   nil,   -89,   nil,   nil,   nil,   -23,
   -43,   nil,   -33,   nil,   -99,   -52,   -20,  -115,  -196,  -208,
  -133,   -61,   -38,   -58,   -33 ]

racc_goto_default = [
   nil,   nil,   215,   nil,   203,     9,    11,    15,    19,    24,
    29,    33,    37,    42,    45,    49,    54,    56,    60,    63,
    66,   nil,     4,   145,    10,    12,    13,    16,    20,   111,
    35,   114,   nil,    47,   131,   nil,   nil,   nil,   nil,   nil,
    67,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 93, :_reduce_1,
  1, 93, :_reduce_2,
  1, 93, :_reduce_3,
  1, 95, :_reduce_4,
  3, 95, :_reduce_5,
  2, 95, :_reduce_6,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  3, 113, :_reduce_23,
  2, 113, :_reduce_24,
  1, 94, :_reduce_none,
  1, 94, :_reduce_none,
  1, 114, :_reduce_27,
  1, 114, :_reduce_28,
  1, 114, :_reduce_29,
  1, 114, :_reduce_30,
  1, 114, :_reduce_31,
  1, 114, :_reduce_32,
  1, 114, :_reduce_33,
  1, 114, :_reduce_34,
  1, 114, :_reduce_35,
  1, 114, :_reduce_36,
  1, 114, :_reduce_37,
  1, 114, :_reduce_38,
  3, 102, :_reduce_39,
  3, 115, :_reduce_40,
  3, 115, :_reduce_41,
  1, 115, :_reduce_42,
  2, 106, :_reduce_43,
  1, 112, :_reduce_44,
  2, 100, :_reduce_45,
  2, 100, :_reduce_46,
  2, 100, :_reduce_47,
  2, 100, :_reduce_48,
  2, 100, :_reduce_49,
  2, 100, :_reduce_50,
  2, 100, :_reduce_51,
  2, 100, :_reduce_52,
  2, 100, :_reduce_53,
  2, 100, :_reduce_54,
  2, 100, :_reduce_55,
  3, 100, :_reduce_56,
  3, 100, :_reduce_57,
  3, 100, :_reduce_58,
  3, 100, :_reduce_59,
  3, 100, :_reduce_60,
  3, 100, :_reduce_61,
  3, 100, :_reduce_62,
  3, 100, :_reduce_63,
  3, 100, :_reduce_64,
  3, 100, :_reduce_65,
  3, 100, :_reduce_66,
  3, 100, :_reduce_67,
  3, 100, :_reduce_68,
  3, 100, :_reduce_69,
  3, 100, :_reduce_70,
  3, 100, :_reduce_71,
  3, 100, :_reduce_72,
  3, 100, :_reduce_73,
  3, 100, :_reduce_74,
  3, 100, :_reduce_75,
  3, 100, :_reduce_76,
  3, 100, :_reduce_77,
  3, 100, :_reduce_78,
  3, 100, :_reduce_79,
  3, 100, :_reduce_80,
  3, 100, :_reduce_81,
  3, 100, :_reduce_82,
  3, 100, :_reduce_83,
  3, 100, :_reduce_84,
  3, 100, :_reduce_85,
  3, 100, :_reduce_86,
  3, 99, :_reduce_87,
  2, 99, :_reduce_88,
  1, 116, :_reduce_89,
  3, 116, :_reduce_90,
  1, 117, :_reduce_none,
  2, 117, :_reduce_92,
  2, 111, :_reduce_93,
  1, 97, :_reduce_94,
  1, 97, :_reduce_95,
  1, 97, :_reduce_96,
  1, 97, :_reduce_97,
  1, 97, :_reduce_98,
  2, 97, :_reduce_99,
  2, 97, :_reduce_100,
  2, 121, :_reduce_101,
  1, 121, :_reduce_102,
  1, 121, :_reduce_103,
  3, 123, :_reduce_104,
  3, 119, :_reduce_105,
  0, 124, :_reduce_106,
  1, 124, :_reduce_107,
  3, 124, :_reduce_108,
  3, 124, :_reduce_109,
  4, 124, :_reduce_110,
  3, 124, :_reduce_111,
  1, 98, :_reduce_112,
  2, 98, :_reduce_113,
  1, 98, :_reduce_114,
  3, 110, :_reduce_115,
  4, 122, :_reduce_116,
  4, 122, :_reduce_117,
  4, 125, :_reduce_118,
  6, 101, :_reduce_119,
  7, 101, :_reduce_120,
  3, 118, :_reduce_121,
  0, 126, :_reduce_122,
  1, 126, :_reduce_123,
  2, 126, :_reduce_124,
  3, 126, :_reduce_125,
  3, 126, :_reduce_126,
  4, 126, :_reduce_127,
  4, 126, :_reduce_128,
  2, 126, :_reduce_129,
  3, 104, :_reduce_130,
  4, 104, :_reduce_131,
  5, 104, :_reduce_132,
  3, 127, :_reduce_133,
  2, 105, :_reduce_134,
  3, 120, :_reduce_135,
  3, 107, :_reduce_136,
  4, 108, :_reduce_137,
  4, 108, :_reduce_138,
  1, 128, :_reduce_139,
  3, 128, :_reduce_140,
  2, 129, :_reduce_141,
  3, 129, :_reduce_142,
  3, 129, :_reduce_143,
  5, 109, :_reduce_144,
  7, 109, :_reduce_145,
  1, 130, :_reduce_146,
  2, 130, :_reduce_147,
  3, 131, :_reduce_148,
  4, 131, :_reduce_149,
  1, 131, :_reduce_none,
  3, 132, :_reduce_151,
  2, 133, :_reduce_152,
  1, 134, :_reduce_153,
  2, 134, :_reduce_154,
  0, 135, :_reduce_155,
  2, 135, :_reduce_156,
  1, 136, :_reduce_157,
  2, 136, :_reduce_158,
  2, 103, :_reduce_159,
  3, 103, :_reduce_160,
  3, 103, :_reduce_161 ]

racc_reduce_n = 162

racc_shift_n = 285

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :UNLESS => 4,
  :NUMBER => 5,
  :STRING => 6,
  :REGEX => 7,
  :TRUE => 8,
  :FALSE => 9,
  :YES => 10,
  :NO => 11,
  :ON => 12,
  :OFF => 13,
  :IDENTIFIER => 14,
  :PROPERTY_ACCESS => 15,
  :CODE => 16,
  :PARAM => 17,
  :NEW => 18,
  :RETURN => 19,
  :TRY => 20,
  :CATCH => 21,
  :FINALLY => 22,
  :THROW => 23,
  :BREAK => 24,
  :CONTINUE => 25,
  :FOR => 26,
  :IN => 27,
  :BY => 28,
  :WHILE => 29,
  :SWITCH => 30,
  :WHEN => 31,
  :DELETE => 32,
  :INSTANCEOF => 33,
  :TYPEOF => 34,
  :SUPER => 35,
  :EXTENDS => 36,
  :NEWLINE => 37,
  :COMMENT => 38,
  :JS => 39,
  :INDENT => 40,
  :OUTDENT => 41,
  :UMINUS => 42,
  :SPLAT => 43,
  :NOT => 44,
  "!" => 45,
  "!!" => 46,
  "~" => 47,
  "++" => 48,
  "--" => 49,
  "*" => 50,
  "/" => 51,
  "%" => 52,
  "+" => 53,
  "-" => 54,
  "<<" => 55,
  ">>" => 56,
  ">>>" => 57,
  "&" => 58,
  "|" => 59,
  "^" => 60,
  "<=" => 61,
  "<" => 62,
  ">" => 63,
  ">=" => 64,
  "==" => 65,
  "!=" => 66,
  :IS => 67,
  :ISNT => 68,
  "&&" => 69,
  "||" => 70,
  :AND => 71,
  :OR => 72,
  "-=" => 73,
  "+=" => 74,
  "/=" => 75,
  "*=" => 76,
  "%=" => 77,
  "." => 78,
  :ASSIGN => 79,
  "||=" => 80,
  "&&=" => 81,
  "=>" => 82,
  "\n" => 83,
  ";" => 84,
  "," => 85,
  "[" => 86,
  "]" => 87,
  "{" => 88,
  "}" => 89,
  "(" => 90,
  ")" => 91 }

racc_nt_base = 92

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "UNLESS",
  "NUMBER",
  "STRING",
  "REGEX",
  "TRUE",
  "FALSE",
  "YES",
  "NO",
  "ON",
  "OFF",
  "IDENTIFIER",
  "PROPERTY_ACCESS",
  "CODE",
  "PARAM",
  "NEW",
  "RETURN",
  "TRY",
  "CATCH",
  "FINALLY",
  "THROW",
  "BREAK",
  "CONTINUE",
  "FOR",
  "IN",
  "BY",
  "WHILE",
  "SWITCH",
  "WHEN",
  "DELETE",
  "INSTANCEOF",
  "TYPEOF",
  "SUPER",
  "EXTENDS",
  "NEWLINE",
  "COMMENT",
  "JS",
  "INDENT",
  "OUTDENT",
  "UMINUS",
  "SPLAT",
  "NOT",
  "\"!\"",
  "\"!!\"",
  "\"~\"",
  "\"++\"",
  "\"--\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\">>>\"",
  "\"&\"",
  "\"|\"",
  "\"^\"",
  "\"<=\"",
  "\"<\"",
  "\">\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "IS",
  "ISNT",
  "\"&&\"",
  "\"||\"",
  "AND",
  "OR",
  "\"-=\"",
  "\"+=\"",
  "\"/=\"",
  "\"*=\"",
  "\"%=\"",
  "\".\"",
  "ASSIGN",
  "\"||=\"",
  "\"&&=\"",
  "\"=>\"",
  "\"\\n\"",
  "\";\"",
  "\",\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Root",
  "Terminator",
  "Expressions",
  "Expression",
  "Value",
  "Call",
  "Code",
  "Operation",
  "Range",
  "Assign",
  "If",
  "Try",
  "Throw",
  "Return",
  "While",
  "For",
  "Switch",
  "Extends",
  "Splat",
  "Comment",
  "Block",
  "Literal",
  "AssignObj",
  "ParamList",
  "Param",
  "Array",
  "Object",
  "Parenthetical",
  "Accessor",
  "Invocation",
  "Index",
  "AssignList",
  "Super",
  "ArgList",
  "Catch",
  "ForVariables",
  "ForSource",
  "Whens",
  "When",
  "IfBlock",
  "ElsIf",
  "ElsIfs",
  "ElseBody",
  "IfEnd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 45)
  def _reduce_1(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_2(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_4(val, _values, result)
     result = Expressions.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_5(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

module_eval(<<'.,.,', 'grammar.y', 78)
  def _reduce_23(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_24(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_27(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_28(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_29(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 93)
  def _reduce_30(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_31(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 95)
  def _reduce_32(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_33(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_34(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_35(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 99)
  def _reduce_36(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 100)
  def _reduce_37(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_38(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_39(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_40(val, _values, result)
     result = AssignNode.new(ValueNode.new(val[0]), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_41(val, _values, result)
     result = AssignNode.new(ValueNode.new(LiteralNode.new(val[0])), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_42(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_43(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_44(val, _values, result)
     result = CommentNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 130)
  def _reduce_45(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 131)
  def _reduce_46(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_47(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 133)
  def _reduce_48(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 134)
  def _reduce_49(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 135)
  def _reduce_50(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 136)
  def _reduce_51(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 137)
  def _reduce_52(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 138)
  def _reduce_53(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_54(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 140)
  def _reduce_55(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_56(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 143)
  def _reduce_57(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 144)
  def _reduce_58(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 146)
  def _reduce_59(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_60(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_61(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 150)
  def _reduce_62(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_63(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 153)
  def _reduce_64(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 154)
  def _reduce_65(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_66(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 157)
  def _reduce_67(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_68(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_69(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_70(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_71(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_72(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 164)
  def _reduce_73(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 165)
  def _reduce_74(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_75(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 168)
  def _reduce_76(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_77(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 170)
  def _reduce_78(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 172)
  def _reduce_79(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_80(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_81(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_82(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_83(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 177)
  def _reduce_84(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_85(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_86(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_87(val, _values, result)
     result = CodeNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_88(val, _values, result)
     result = CodeNode.new([], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_89(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 192)
  def _reduce_90(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

# reduce 91 omitted

module_eval(<<'.,.,', 'grammar.y', 197)
  def _reduce_92(val, _values, result)
     result = ParamSplatNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 201)
  def _reduce_93(val, _values, result)
     result = ArgSplatNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 206)
  def _reduce_94(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 207)
  def _reduce_95(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 208)
  def _reduce_96(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 209)
  def _reduce_97(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 210)
  def _reduce_98(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 211)
  def _reduce_99(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 212)
  def _reduce_100(val, _values, result)
     result = ValueNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 217)
  def _reduce_101(val, _values, result)
     result = AccessorNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 218)
  def _reduce_102(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 219)
  def _reduce_103(val, _values, result)
     result = SliceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 224)
  def _reduce_104(val, _values, result)
     result = IndexNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 229)
  def _reduce_105(val, _values, result)
     result = ObjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_106(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 235)
  def _reduce_107(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 236)
  def _reduce_108(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 237)
  def _reduce_109(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 239)
  def _reduce_110(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 240)
  def _reduce_111(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 245)
  def _reduce_112(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 246)
  def _reduce_113(val, _values, result)
     result = val[1].new_instance 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 247)
  def _reduce_114(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_115(val, _values, result)
     result = ExtendsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_116(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 258)
  def _reduce_117(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 263)
  def _reduce_118(val, _values, result)
     result = CallNode.new(:super, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 269)
  def _reduce_119(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 271)
  def _reduce_120(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 276)
  def _reduce_121(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 281)
  def _reduce_122(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 282)
  def _reduce_123(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 283)
  def _reduce_124(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 284)
  def _reduce_125(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 285)
  def _reduce_126(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 286)
  def _reduce_127(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 287)
  def _reduce_128(val, _values, result)
     result = val[0] << val[3] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 288)
  def _reduce_129(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_130(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 294)
  def _reduce_131(val, _values, result)
     result = TryNode.new(val[1], nil, nil, val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 296)
  def _reduce_132(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 301)
  def _reduce_133(val, _values, result)
     result = [val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_134(val, _values, result)
     result = ThrowNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 311)
  def _reduce_135(val, _values, result)
     result = ParentheticalNode.new(val[1], val[0].line) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 316)
  def _reduce_136(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 323)
  def _reduce_137(val, _values, result)
     result = ForNode.new(val[0], val[3], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 324)
  def _reduce_138(val, _values, result)
     result = ForNode.new(val[3], val[2], val[1][0], val[1][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 329)
  def _reduce_139(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 330)
  def _reduce_140(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 335)
  def _reduce_141(val, _values, result)
     result = {:source => val[1]} 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 337)
  def _reduce_142(val, _values, result)
     result = val[0].merge(:filter => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 339)
  def _reduce_143(val, _values, result)
     result = val[0].merge(:step => val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 345)
  def _reduce_144(val, _values, result)
     result = val[3].rewrite_condition(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 347)
  def _reduce_145(val, _values, result)
     result = val[3].rewrite_condition(val[1]).add_else(val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 352)
  def _reduce_146(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 353)
  def _reduce_147(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 358)
  def _reduce_148(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 359)
  def _reduce_149(val, _values, result)
     result = IfNode.new(val[1], val[2], nil, {:statement => true}) 
    result
  end
.,.,

# reduce 150 omitted

module_eval(<<'.,.,', 'grammar.y', 367)
  def _reduce_151(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 372)
  def _reduce_152(val, _values, result)
     result = val[1].force_statement 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 377)
  def _reduce_153(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 378)
  def _reduce_154(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 383)
  def _reduce_155(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 384)
  def _reduce_156(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 389)
  def _reduce_157(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 390)
  def _reduce_158(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 395)
  def _reduce_159(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 396)
  def _reduce_160(val, _values, result)
     result = IfNode.new(val[2], Expressions.new([val[0]]), nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 397)
  def _reduce_161(val, _values, result)
     result = IfNode.new(val[2], Expressions.new([val[0]]), nil, {:statement => true, :invert => true}) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
