#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

module CoffeeScript

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 406)
  # Lex and parse a CoffeeScript.
  def parse(code)
    # Uncomment the following line to enable grammar debugging, in combination
    # with the -g flag in the Rake build task.
    # @yydebug = true
    @tokens = Lexer.new.tokenize(code)
    do_parse
  end

  # Retrieve the next token from the list.
  def next_token
    @tokens.shift
  end

  # Raise a custom error class that knows about line numbers.
  def on_error(error_token_id, error_value, value_stack)
    raise ParseError.new(token_to_str(error_token_id), error_value, value_stack)
  end

...end grammar.y/module_eval...
##### State transition tables begin ###

clist = [
'76,256,145,87,252,219,110,145,145,262,143,16,21,120,207,143,143,226',
'16,21,231,207,202,16,21,88,207,248,83,86,265,71,240,3,16,21,199,246',
'3,3,83,86,113,122,123,83,86,91,94,97,100,103,106,73,75,79,82,85,90,93',
'96,99,102,105,72,74,78,81,84,89,92,95,98,101,104,110,-138,77,80,230',
'-138,-138,121,16,21,8,137,110,218,20,25,31,35,40,47,50,53,56,58,-155',
'-155,66,1,4,9,83,86,17,22,27,32,113,41,45,191,51,130,59,62,16,21,3,6',
'113,-155,-155,14,24,29,34,38,43,16,21,249,120,57,204,20,25,31,35,40',
'47,50,53,56,58,16,21,246,214,16,21,239,212,152,22,27,110,16,21,110,151',
'16,21,26,110,36,8,44,6,54,20,25,31,35,40,47,50,53,56,58,-155,-155,66',
'1,4,9,16,21,17,22,27,32,113,41,45,113,51,233,59,62,113,121,3,6,203,114',
'258,14,24,29,34,38,43,215,69,120,44,57,54,20,25,31,35,40,47,50,53,56',
'58,-155,-155,-155,-155,16,21,216,16,21,22,27,110,16,21,110,130,16,21',
'26,228,36,8,44,6,54,20,25,31,35,40,47,50,53,56,58,-155,-155,66,1,4,9',
'-155,-155,17,22,27,32,113,41,45,113,51,226,59,62,121,267,3,6,114,204',
'229,14,24,29,34,38,43,,69,120,44,57,54,20,25,31,35,40,47,50,53,56,58',
',,,,16,21,,16,21,22,27,,,,,120,120,120,26,,36,8,44,6,54,20,25,31,35',
'40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,121,,3',
'6,137,,,14,24,29,34,38,43,,69,,44,57,54,20,25,31,35,40,47,50,53,56,58',
'121,121,121,271,137,114,114,,,22,27,,,,,120,120,,26,,36,8,44,6,54,20',
'25,31,35,40,47,50,53,56,58,117,117,66,1,4,9,,,17,22,27,32,,41,45,,51',
',59,62,,,3,6,,,,14,24,29,34,38,43,,69,,44,57,54,,,209,116,116,83,86',
'91,94,97,121,121,,,114,114,83,86,91,94,97,100,103,106,73,75,,,26,,36',
'8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41',
'45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,83,86,91,94,97,100,103',
'106,73,75,79,82,85,90,93,96,99,102,105,72,74,83,86,91,94,97,100,103',
',26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27',
'32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,83,86,91,94,97',
'100,103,106,73,75,79,82,85,90,93,96,99,102,105,72,74,83,86,91,94,97',
'100,103,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,',
'17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,83,86',
'91,94,97,100,103,106,73,75,79,82,85,90,93,96,99,102,105,72,74,83,86',
'91,94,97,100,103,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66',
'1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,',
',57,83,86,91,94,97,100,103,106,73,75,79,82,85,90,93,96,99,102,105,72',
'74,16,21,,207,,208,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,',
',66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43',
',,,,57,83,86,91,94,97,100,103,106,73,75,79,82,85,90,93,96,99,102,105',
'72,74,83,86,91,94,97,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58',
',,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43',
',,,,57,83,86,91,94,97,100,103,106,73,75,79,82,85,90,93,96,99,102,105',
'72,74,,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4',
'9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57',
'83,86,91,94,97,100,103,106,73,75,79,82,85,90,93,96,99,102,105,72,74',
',,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17',
'22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,83,86,91',
'94,97,100,103,106,73,75,79,82,85,90,93,96,99,102,105,72,74,,,,,,,,,26',
',36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32',
',41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,83,86,91,94,97,100',
'103,106,73,75,79,82,85,83,86,91,94,97,100,103,106,73,75,79,82,85,,,',
'26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27',
'32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,83,86,91,94,97',
'100,103,106,73,75,79,82,85,83,86,91,94,97,100,103,106,73,75,79,82,85',
',,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22',
'27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,83,86,91,94',
'97,100,103,106,73,75,83,86,91,94,97,100,103,106,73,75,,,,,,,,,,26,,36',
'8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41',
'45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,',
'17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56',
'58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38',
'43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35,40',
'47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14',
'24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20',
'25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62',
',,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36',
'8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41',
'45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,',
'17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56',
'58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38',
'43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35,40',
'47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14',
'24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20',
'25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62',
',,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36',
'8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41',
'45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,',
'17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,',
',,,,,,,,,,,,,,,,,,,,,,,16,21,26,,36,8,44,,54,20,25,31,35,40,47,50,53',
'56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34',
'38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35',
'40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,',
',,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44',
',54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51',
',59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27',
'32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,',
',,,,,,,,,,,,,,16,21,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,',
'66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43',
',,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47',
'50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24',
'29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25',
'31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,',
',3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36',
'8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41',
'45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,',
'17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56',
'58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38',
'43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35,40',
'47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14',
'24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20',
'25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62',
',,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36',
'8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41',
'45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,',
'17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56',
'58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38',
'43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35,40',
'47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14',
'24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20',
'25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62',
',,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36',
'8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41',
'45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,',
'17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56',
'58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38',
'43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35,40',
'47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14',
'24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20',
'25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62',
',,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36',
'8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41',
'45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,',
'17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,',
',,,,,,,,,,,,,,,,,,,,,,,16,21,26,,36,8,44,,54,20,25,31,35,40,47,50,53',
'56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34',
'38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35',
'40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,',
',,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44',
',54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51',
',59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27',
'32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1',
'4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53',
'56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34',
'38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35',
'40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,',
',,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44',
',54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51',
',59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27',
'32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1',
'4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53',
'56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34',
'38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35',
'40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,',
',,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44',
',54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51',
',59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27',
'32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1',
'4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34,38,43,,,,,57',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35,40,47,50,53',
'56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,,,,14,24,29,34',
'38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,26,,36,8,44,,54,20,25,31,35',
'40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45,,51,,59,62,,,3,6,',
',,14,24,29,34,38,43,,,,,57,,,,,,,,,,,,,,,,,,,,,,,,,,,,16,21,26,,36,8',
'44,,54,20,25,31,35,40,47,50,53,56,58,,,66,1,4,9,,,17,22,27,32,,41,45',
',51,,59,62,,,3,6,,,,14,24,29,34,38,43,76,,,87,57,,,,,,,,,,,,,,,,,,,',
',88,,,,,,71,,,26,,36,,44,,54,,,,,83,86,91,94,97,100,103,106,73,75,79',
'82,85,90,93,96,99,102,105,72,74,78,81,84,89,92,95,98,101,104,,,77,80',
'76,,110,87,,232,,,,,,,,,,,,,,,,,,,,88,,,,,,71,,,,,,,113,,,,,,,83,86',
'91,94,97,100,103,106,73,75,79,82,85,90,93,96,99,102,105,72,74,78,81',
'84,89,92,95,98,101,104,,,77,80,16,21,76,,110,87,,,,,,,,,,,,,,,,,,,,',
',88,,,,,,71,,,,,,,,,,,,,,83,86,91,94,97,100,103,106,73,75,79,82,85,90',
'93,96,99,102,105,72,74,78,81,84,89,92,95,98,101,104,,,77,80,16,21,76',
',110,87,,,,,,,,,,,,,,,,,,,,,,88,,,,,,71,,,,,,,113,,,,,,,83,86,91,94',
'97,100,103,106,73,75,79,82,85,90,93,96,99,102,105,72,74,78,81,84,89',
'92,95,98,101,104,,,77,80,16,21,76,,110,87,,,,,,,,,,,,,,,,,,,,,,88,,',
',,,71,,,,,,,,,,,,,,83,86,91,94,97,100,103,106,73,75,79,82,85,90,93,96',
'99,102,105,72,74,78,81,84,89,92,95,98,101,104,,,77,80,16,21,76,,110',
'87,,,,,,,,,,,,,,,,,,,,,,88,,,,,,71,,,,,,,113,,,,,,,83,86,91,94,97,100',
'103,106,73,75,79,82,85,90,93,96,99,102,105,72,74,78,81,84,89,92,95,98',
'101,104,,,77,80,16,21,76,,,87,,,,,,,,,,,,,,,,,,,,,,88,,,,,,71,,,,,,',
',,,,,,,83,86,91,94,97,100,103,106,73,75,79,82,85,90,93,96,99,102,105',
'72,74,78,81,84,89,92,95,98,101,104,,76,77,80,87,,,,,,,,,,,,,,,,,,,,',
',88,,,,,,71,,,,,,,,,,,,,,83,86,91,94,97,100,103,106,73,75,79,82,85,90',
'93,96,99,102,105,72,74,78,81,84,89,92,95,98,101,104,,76,77,80,87,,,',
',,,,,,,,,,,,,,,,,,88,,,,,,71,,,,,,,,,,,,,,83,86,91,94,97,100,103,106',
'73,75,79,82,85,90,93,96,99,102,105,72,74,78,81,84,89,92,95,98,101,104',
',76,77,80,87,,,,,,,,,,,,,,,,,,,,,,88,,,,,,71,,,,,,,,,,,,,,83,86,91,94',
'97,100,103,106,73,75,79,82,85,90,93,96,99,102,105,72,74,78,81,84,89',
'92,95,98,101,104,,76,77,80,87,,,,,,,,,,,,,,,,,,,,,,88,,,,,,71,,,,,,',
',,,,,,,83,86,91,94,97,100,103,106,73,75,79,82,85,90,93,96,99,102,105',
'72,74,78,81,84,89,92,95,98,101,104,,76,77,80,87,,,,,,,,,,,,,,,,,,,,',
',88,,,,,,71,,,,,,,,,,,,,,83,86,91,94,97,100,103,106,73,75,79,82,85,90',
'93,96,99,102,105,72,74,78,81,84,89,92,95,98,101,104,,76,77,80,87,,,',
',,,,,,,,,,,,,,,,,,88,,,,,,71,,,,,,,,,,,,,,83,86,91,94,97,100,103,106',
'73,75,79,82,85,90,93,96,99,102,105,72,74,78,81,84,89,92,95,98,101,104',
',76,77,80,87,,,,,,,,,,,,,,,,,,,,,,88,,,,,,71,,,,,,,,,,,,,,83,86,91,94',
'97,100,103,106,73,75,79,82,85,90,93,96,99,102,105,72,74,78,81,84,89',
'92,95,98,101,104,,76,77,80,87,,,,,,,,,,,,,,,,,,,,,,88,,,,,,71,,,,,,',
',,,,,,,83,86,91,94,97,100,103,106,73,75,79,82,85,90,93,96,99,102,105',
'72,74,78,81,84,89,92,95,98,101,104,,76,77,80,87,,,,,,,,,,,,,,,,,,,,',
',88,,,,,,71,,,,,,,,,,,,,,83,86,91,94,97,100,103,106,73,75,79,82,85,90',
'93,96,99,102,105,72,74,78,81,84,89,92,95,98,101,104,,76,77,80,87,,,',
',,,,,,,,,,,,,,,,,,88,,,,,,71,,,,,,,,,,,,,,83,86,91,94,97,100,103,106',
'73,75,79,82,85,90,93,96,99,102,105,72,74,78,81,84,89,92,95,98,101,104',
',76,77,80,87,,,,,,,,,,,,,,,,,,,,,,88,,,,,,71,,,,,,,,,,,,,,83,86,91,94',
'97,100,103,106,73,75,79,82,85,90,93,96,99,102,105,72,74,78,81,84,89',
'92,95,98,101,104,76,,,87,,,,,,,,,,,,,,,,,,,,,,88,,,,,,71,,,,,,,,,,,',
',,83,86,91,94,97,100,103,106,73,75,79,82,85,90,93,96,99,102,105,72,74',
'78,81,84,89,92,95,98,101,104,76,,,87,,,,,,,,,,,,,,,,,,,,,,88,,,,,,71',
',,,,,,,,,,,,,83,86,91,94,97,100,103,106,73,75,79,82,85,90,93,96,99,102',
'105,72,74,78,81,84,89,92,95,98,101,104,88,,,,,,71,,,,,,,,,,,,,,83,86',
'91,94,97,100,103,106,73,75,79,82,85,90,93,96,99,102,105,72,74,78,81',
'84,89,92,95,98,101,104,88,,,,,,71,,,,,,,,,,,,,,83,86,91,94,97,100,103',
'106,73,75,79,82,85,90,93,96,99,102,105,72,74,78,81,84,89,92,95,98,101',
'104,88,,,,,,71,,,,,,,,,,,,,,83,86,91,94,97,100,103,106,73,75,79,82,85',
'90,93,96,99,102,105,72,74,78,81,84,89,92,95,98,101,104,71,,,,,,,,,,',
',,,83,86,91,94,97,100,103,106,73,75,79,82,85,90,93,96,99,102,105,72',
'74,78,81,84,89,92,95,98,101,104,71,,,,,,,,,,,,,,83,86,91,94,97,100,103',
'106,73,75,79,82,85,90,93,96,99,102,105,72,74,78,81,84,89,92,95,98,101',
'104,71,,,,,,,,,,,,,,83,86,91,94,97,100,103,106,73,75,79,82,85,90,93',
'96,99,102,105,72,74,78,81,84,89,92,95,98,101,104,83,86,91,94,97,100',
'103,106,73,75,79,82,85,90,93,96,99,102,105,72,74,78,81,84,89,92,95,98',
'101,104,83,86,91,94,97,100,103,106,73,75,79,82,85,90,93,96,99,102,105',
'72,74,78,81,84,89,92,95,98,101,104,83,86,91,94,97,100,103,106,73,75',
'79,82,85,90,93,96,99,102,105,72,74,78,81,84,89,92,95,98,101,104,83,86',
'91,94,97,100,103,106,73,75,79,82,85,90,93,96,99,102,105,72,74,78,81',
'84,89,92,95,98,101,104,83,86,91,94,97,100,103,106,73,75,79,82,85,90',
'93,96,99,102,105,72,74,78,81,84,89,92,95,98,101,104' ]
        racc_action_table = arr = Array.new(7905, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'148,235,213,148,226,151,226,214,44,247,213,195,195,197,195,214,44,224',
'220,220,195,220,123,210,210,148,210,220,177,177,257,148,210,213,257',
'257,120,247,214,44,180,180,226,12,12,148,148,148,148,148,148,148,148',
'148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148,148',
'148,148,148,148,148,228,235,148,148,194,235,235,197,226,226,92,197,229',
'148,92,92,92,92,92,92,92,92,92,92,136,136,92,92,92,92,174,174,92,92',
'92,92,228,92,92,109,92,88,92,92,194,194,92,92,229,132,132,92,92,92,92',
'92,92,67,67,222,70,92,131,239,239,239,239,239,239,239,239,239,239,142',
'142,217,142,228,228,209,142,62,239,239,262,205,205,26,61,229,229,92',
'122,92,0,92,239,92,0,0,0,0,0,0,0,0,0,0,140,140,0,0,0,0,154,154,0,0,0',
'0,262,0,0,26,0,203,0,0,122,70,0,0,130,70,239,0,0,0,0,0,0,143,239,259',
'239,0,239,258,258,258,258,258,258,258,258,258,258,124,124,149,149,262',
'262,145,26,26,258,258,9,122,122,268,32,0,0,0,191,0,4,0,258,0,4,4,4,4',
'4,4,4,4,4,4,129,129,4,4,4,4,126,126,4,4,4,4,9,4,4,268,4,190,4,4,259',
'259,4,4,259,171,192,4,4,4,4,4,4,,258,39,258,4,258,117,117,117,117,117',
'117,117,117,117,117,,,,,9,9,,268,268,117,117,,,,,68,198,266,4,,4,8,4',
'117,4,8,8,8,8,8,8,8,8,8,8,,,8,8,8,8,,,8,8,8,8,,8,8,,8,,8,8,39,,8,8,39',
',,8,8,8,8,8,8,,117,,117,8,117,1,1,1,1,1,1,1,1,1,1,68,198,266,266,68',
'198,266,,,1,1,,,,,135,11,,8,,8,155,8,1,8,155,155,155,155,155,155,155',
'155,155,155,135,11,155,155,155,155,,,155,155,155,155,,155,155,,155,',
'155,155,,,155,155,,,,155,155,155,155,155,155,,1,,1,155,1,,,135,135,11',
'186,186,186,186,186,135,11,,,135,11,167,167,167,167,167,167,167,167',
'167,167,,,155,,155,152,155,,155,152,152,152,152,152,152,152,152,152',
'152,,,152,152,152,152,,,152,152,152,152,,152,152,,152,,152,152,,,152',
'152,,,,152,152,152,152,152,152,,,,,152,163,163,163,163,163,163,163,163',
'163,163,163,163,163,163,163,163,163,163,163,163,163,189,189,189,189',
'189,189,189,,152,,152,204,152,,152,204,204,204,204,204,204,204,204,204',
'204,,,204,204,204,204,,,204,204,204,204,,204,204,,204,,204,204,,,204',
'204,,,,204,204,204,204,204,204,,,,,204,168,168,168,168,168,168,168,168',
'168,168,168,168,168,168,168,168,168,168,168,168,168,160,160,160,160',
'160,160,160,,204,,204,14,204,,204,14,14,14,14,14,14,14,14,14,14,,,14',
'14,14,14,,,14,14,14,14,,14,14,,14,,14,14,,,14,14,,,,14,14,14,14,14,14',
',,,,14,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166',
'166,166,166,166,166,158,158,158,158,158,158,158,,14,,14,17,14,,14,17',
'17,17,17,17,17,17,17,17,17,,,17,17,17,17,,,17,17,17,17,,17,17,,17,,17',
'17,,,17,17,,,,17,17,17,17,17,17,,,,,17,188,188,188,188,188,188,188,188',
'188,188,188,188,188,188,188,188,188,188,188,188,188,133,133,,133,,133',
',,17,,17,24,17,,17,24,24,24,24,24,24,24,24,24,24,,,24,24,24,24,,,24',
'24,24,24,,24,24,,24,,24,24,,,24,24,,,,24,24,24,24,24,24,,,,,24,159,159',
'159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159,159',
'159,159,183,183,183,183,183,,,,24,,24,137,24,,24,137,137,137,137,137',
'137,137,137,137,137,,,137,137,137,137,,,137,137,137,137,,137,137,,137',
',137,137,,,137,137,,,,137,137,137,137,137,137,,,,,137,172,172,172,172',
'172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172,172',
',,,,,,,,137,,137,29,137,,137,29,29,29,29,29,29,29,29,29,29,,,29,29,29',
'29,,,29,29,29,29,,29,29,,29,,29,29,,,29,29,,,,29,29,29,29,29,29,,,,',
'29,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157,157',
'157,157,157,157,,,,,,,,,29,,29,206,29,,29,206,206,206,206,206,206,206',
'206,206,206,,,206,206,206,206,,,206,206,206,206,,206,206,,206,,206,206',
',,206,206,,,,206,206,206,206,206,206,,,,,206,185,185,185,185,185,185',
'185,185,185,185,185,185,185,185,185,185,185,185,185,185,185,,,,,,,,',
'206,,206,34,206,,206,34,34,34,34,34,34,34,34,34,34,,,34,34,34,34,,,34',
'34,34,34,,34,34,,34,,34,34,,,34,34,,,,34,34,34,34,34,34,,,,,34,173,173',
'173,173,173,173,173,173,173,173,173,173,173,182,182,182,182,182,182',
'182,182,182,182,182,182,182,,,,34,,34,36,34,,34,36,36,36,36,36,36,36',
'36,36,36,,,36,36,36,36,,,36,36,36,36,,36,36,,36,,36,36,,,36,36,,,,36',
'36,36,36,36,36,,,,,36,176,176,176,176,176,176,176,176,176,176,176,176',
'176,179,179,179,179,179,179,179,179,179,179,179,179,179,,,,36,,36,38',
'36,,36,38,38,38,38,38,38,38,38,38,38,,,38,38,38,38,,,38,38,38,38,,38',
'38,,38,,38,38,,,38,38,,,,38,38,38,38,38,38,,,,,38,164,164,164,164,164',
'164,164,164,164,164,169,169,169,169,169,169,169,169,169,169,,,,,,,,',
',38,,38,207,38,,38,207,207,207,207,207,207,207,207,207,207,,,207,207',
'207,207,,,207,207,207,207,,207,207,,207,,207,207,,,207,207,,,,207,207',
'207,207,207,207,,,,,207,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,207,,207,41,207',
',207,41,41,41,41,41,41,41,41,41,41,,,41,41,41,41,,,41,41,41,41,,41,41',
',41,,41,41,,,41,41,,,,41,41,41,41,41,41,,,,,41,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,41,,41,43,41,,41,43,43,43,43,43,43,43,43,43,43,,,43,43,43,43',
',,43,43,43,43,,43,43,,43,,43,43,,,43,43,,,,43,43,43,43,43,43,,,,,43',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,43,,43,215,43,,43,215,215,215,215,215,215',
'215,215,215,215,,,215,215,215,215,,,215,215,215,215,,215,215,,215,,215',
'215,,,215,215,,,,215,215,215,215,215,215,,,,,215,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,215,,215,45,215,,215,45,45,45,45,45,45,45,45,45,45,,,45,45',
'45,45,,,45,45,45,45,,45,45,,45,,45,45,,,45,45,,,,45,45,45,45,45,45,',
',,,45,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,45,,45,51,45,,45,51,51,51,51,51,51',
'51,51,51,51,,,51,51,51,51,,,51,51,51,51,,51,51,,51,,51,51,,,51,51,,',
',51,51,51,51,51,51,,,,,51,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,51,,51,54,51',
',51,54,54,54,54,54,54,54,54,54,54,,,54,54,54,54,,,54,54,54,54,,54,54',
',54,,54,54,,,54,54,,,,54,54,54,54,54,54,,,,,54,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,54,,54,57,54,,54,57,57,57,57,57,57,57,57,57,57,,,57,57,57,57',
',,57,57,57,57,,57,57,,57,,57,57,,,57,57,,,,57,57,57,57,57,57,,,,,57',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,57,,57,111,57,,57,111,111,111,111,111,111',
'111,111,111,111,,,111,111,111,111,,,111,111,111,111,,111,111,,111,,111',
'111,,,111,111,,,,111,111,111,111,111,111,,,,,111,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,111,,111,256,111,,111,256,256,256,256,256,256,256,256,256',
'256,,,256,256,256,256,,,256,256,256,256,,256,256,,256,,256,256,,,256',
'256,,,,256,256,256,256,256,256,,,,,256,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'256,,256,252,256,,256,252,252,252,252,252,252,252,252,252,252,,,252',
'252,252,252,,,252,252,252,252,,252,252,,252,,252,252,,,252,252,,,,252',
'252,252,252,252,252,,,,,252,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,252,,252,64',
'252,,252,64,64,64,64,64,64,64,64,64,64,,,64,64,64,64,,,64,64,64,64,',
'64,64,,64,,64,64,,,64,64,,,,64,64,64,64,64,64,,,,,64,,,,,,,,,,,,,,,',
',,,,,,,,,,,,64,64,64,,64,246,64,,64,246,246,246,246,246,246,246,246',
'246,246,,,246,246,246,246,,,246,246,246,246,,246,246,,246,,246,246,',
',246,246,,,,246,246,246,246,246,246,,,,,246,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,246,,246,216,246,,246,216,216,216,216,216,216,216,216,216,216,',
',216,216,216,216,,,216,216,216,216,,216,216,,216,,216,216,,,216,216',
',,,216,216,216,216,216,216,,,,,216,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,216',
',216,69,216,,216,69,69,69,69,69,69,69,69,69,69,,,69,69,69,69,,,69,69',
'69,69,,69,69,,69,,69,69,,,69,69,,,,69,69,69,69,69,69,,,,,69,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,69,,69,236,69,,69,236,236,236,236,236,236,236,236',
'236,236,,,236,236,236,236,,,236,236,236,236,,236,236,,236,,236,236,',
',236,236,,,,236,236,236,236,236,236,,,,,236,,,,,,,,,,,,,,,,,,,,,,,,',
',,,236,236,236,,236,71,236,,236,71,71,71,71,71,71,71,71,71,71,,,71,71',
'71,71,,,71,71,71,71,,71,71,,71,,71,71,,,71,71,,,,71,71,71,71,71,71,',
',,,71,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,71,,71,72,71,,71,72,72,72,72,72,72',
'72,72,72,72,,,72,72,72,72,,,72,72,72,72,,72,72,,72,,72,72,,,72,72,,',
',72,72,72,72,72,72,,,,,72,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,72,,72,73,72',
',72,73,73,73,73,73,73,73,73,73,73,,,73,73,73,73,,,73,73,73,73,,73,73',
',73,,73,73,,,73,73,,,,73,73,73,73,73,73,,,,,73,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,73,,73,74,73,,73,74,74,74,74,74,74,74,74,74,74,,,74,74,74,74',
',,74,74,74,74,,74,74,,74,,74,74,,,74,74,,,,74,74,74,74,74,74,,,,,74',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,74,,74,75,74,,74,75,75,75,75,75,75,75,75',
'75,75,,,75,75,75,75,,,75,75,75,75,,75,75,,75,,75,75,,,75,75,,,,75,75',
'75,75,75,75,,,,,75,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,75,,75,76,75,,75,76',
'76,76,76,76,76,76,76,76,76,,,76,76,76,76,,,76,76,76,76,,76,76,,76,,76',
'76,,,76,76,,,,76,76,76,76,76,76,,,,,76,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'76,,76,77,76,,76,77,77,77,77,77,77,77,77,77,77,,,77,77,77,77,,,77,77',
'77,77,,77,77,,77,,77,77,,,77,77,,,,77,77,77,77,77,77,,,,,77,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,77,,77,78,77,,77,78,78,78,78,78,78,78,78,78,78',
',,78,78,78,78,,,78,78,78,78,,78,78,,78,,78,78,,,78,78,,,,78,78,78,78',
'78,78,,,,,78,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,78,,78,79,78,,78,79,79,79',
'79,79,79,79,79,79,79,,,79,79,79,79,,,79,79,79,79,,79,79,,79,,79,79,',
',79,79,,,,79,79,79,79,79,79,,,,,79,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,79,',
'79,80,79,,79,80,80,80,80,80,80,80,80,80,80,,,80,80,80,80,,,80,80,80',
'80,,80,80,,80,,80,80,,,80,80,,,,80,80,80,80,80,80,,,,,80,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,80,,80,81,80,,80,81,81,81,81,81,81,81,81,81,81,,,81',
'81,81,81,,,81,81,81,81,,81,81,,81,,81,81,,,81,81,,,,81,81,81,81,81,81',
',,,,81,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,81,,81,82,81,,81,82,82,82,82,82',
'82,82,82,82,82,,,82,82,82,82,,,82,82,82,82,,82,82,,82,,82,82,,,82,82',
',,,82,82,82,82,82,82,,,,,82,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,82,,82,84,82',
',82,84,84,84,84,84,84,84,84,84,84,,,84,84,84,84,,,84,84,84,84,,84,84',
',84,,84,84,,,84,84,,,,84,84,84,84,84,84,,,,,84,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,84,,84,85,84,,84,85,85,85,85,85,85,85,85,85,85,,,85,85,85,85',
',,85,85,85,85,,85,85,,85,,85,85,,,85,85,,,,85,85,85,85,85,85,,,,,85',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,85,,85,87,85,,85,87,87,87,87,87,87,87,87',
'87,87,,,87,87,87,87,,,87,87,87,87,,87,87,,87,,87,87,,,87,87,,,,87,87',
'87,87,87,87,,,,,87,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,87,,87,121,87,,87,121',
'121,121,121,121,121,121,121,121,121,,,121,121,121,121,,,121,121,121',
'121,,121,121,,121,,121,121,,,121,121,,,,121,121,121,121,121,121,,,,',
'121,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,121,,121,89,121,,121,89,89,89,89,89',
'89,89,89,89,89,,,89,89,89,89,,,89,89,89,89,,89,89,,89,,89,89,,,89,89',
',,,89,89,89,89,89,89,,,,,89,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,89,,89,90,89',
',89,90,90,90,90,90,90,90,90,90,90,,,90,90,90,90,,,90,90,90,90,,90,90',
',90,,90,90,,,90,90,,,,90,90,90,90,90,90,,,,,90,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,90,,90,91,90,,90,91,91,91,91,91,91,91,91,91,91,,,91,91,91,91',
',,91,91,91,91,,91,91,,91,,91,91,,,91,91,,,,91,91,91,91,91,91,,,,,91',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,91,,91,153,91,,91,153,153,153,153,153,153',
'153,153,153,153,,,153,153,153,153,,,153,153,153,153,,153,153,,153,,153',
'153,,,153,153,,,,153,153,153,153,153,153,,,,,153,,,,,,,,,,,,,,,,,,,',
',,,,,,,,153,153,153,,153,93,153,,153,93,93,93,93,93,93,93,93,93,93,',
',93,93,93,93,,,93,93,93,93,,93,93,,93,,93,93,,,93,93,,,,93,93,93,93',
'93,93,,,,,93,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,93,,93,94,93,,93,94,94,94',
'94,94,94,94,94,94,94,,,94,94,94,94,,,94,94,94,94,,94,94,,94,,94,94,',
',94,94,,,,94,94,94,94,94,94,,,,,94,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,94,',
'94,95,94,,94,95,95,95,95,95,95,95,95,95,95,,,95,95,95,95,,,95,95,95',
'95,,95,95,,95,,95,95,,,95,95,,,,95,95,95,95,95,95,,,,,95,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,95,,95,96,95,,95,96,96,96,96,96,96,96,96,96,96,,,96',
'96,96,96,,,96,96,96,96,,96,96,,96,,96,96,,,96,96,,,,96,96,96,96,96,96',
',,,,96,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,96,,96,97,96,,96,97,97,97,97,97',
'97,97,97,97,97,,,97,97,97,97,,,97,97,97,97,,97,97,,97,,97,97,,,97,97',
',,,97,97,97,97,97,97,,,,,97,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,97,,97,98,97',
',97,98,98,98,98,98,98,98,98,98,98,,,98,98,98,98,,,98,98,98,98,,98,98',
',98,,98,98,,,98,98,,,,98,98,98,98,98,98,,,,,98,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,98,,98,99,98,,98,99,99,99,99,99,99,99,99,99,99,,,99,99,99,99',
',,99,99,99,99,,99,99,,99,,99,99,,,99,99,,,,99,99,99,99,99,99,,,,,99',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,99,,99,100,99,,99,100,100,100,100,100,100',
'100,100,100,100,,,100,100,100,100,,,100,100,100,100,,100,100,,100,,100',
'100,,,100,100,,,,100,100,100,100,100,100,,,,,100,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,100,,100,101,100,,100,101,101,101,101,101,101,101,101,101',
'101,,,101,101,101,101,,,101,101,101,101,,101,101,,101,,101,101,,,101',
'101,,,,101,101,101,101,101,101,,,,,101,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
'101,,101,102,101,,101,102,102,102,102,102,102,102,102,102,102,,,102',
'102,102,102,,,102,102,102,102,,102,102,,102,,102,102,,,102,102,,,,102',
'102,102,102,102,102,,,,,102,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,102,,102,103',
'102,,102,103,103,103,103,103,103,103,103,103,103,,,103,103,103,103,',
',103,103,103,103,,103,103,,103,,103,103,,,103,103,,,,103,103,103,103',
'103,103,,,,,103,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,103,,103,104,103,,103,104',
'104,104,104,104,104,104,104,104,104,,,104,104,104,104,,,104,104,104',
'104,,104,104,,104,,104,104,,,104,104,,,,104,104,104,104,104,104,,,,',
'104,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,104,,104,105,104,,104,105,105,105,105',
'105,105,105,105,105,105,,,105,105,105,105,,,105,105,105,105,,105,105',
',105,,105,105,,,105,105,,,,105,105,105,105,105,105,,,,,105,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,105,,105,106,105,,105,106,106,106,106,106,106,106',
'106,106,106,,,106,106,106,106,,,106,106,106,106,,106,106,,106,,106,106',
',,106,106,,,,106,106,106,106,106,106,,,,,106,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,106,,106,116,106,,106,116,116,116,116,116,116,116,116,116,116',
',,116,116,116,116,,,116,116,116,116,,116,116,,116,,116,116,,,116,116',
',,,116,116,116,116,116,116,,,,,116,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,116',
',116,114,116,,116,114,114,114,114,114,114,114,114,114,114,,,114,114',
'114,114,,,114,114,114,114,,114,114,,114,,114,114,,,114,114,,,,114,114',
'114,114,114,114,,,,,114,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,114,,114,113,114',
',114,113,113,113,113,113,113,113,113,113,113,,,113,113,113,113,,,113',
'113,113,113,,113,113,,113,,113,113,,,113,113,,,,113,113,113,113,113',
'113,,,,,113,,,,,,,,,,,,,,,,,,,,,,,,,,,,113,113,113,,113,59,113,,113',
'59,59,59,59,59,59,59,59,59,59,,,59,59,59,59,,,59,59,59,59,,59,59,,59',
',59,59,,,59,59,,,,59,59,59,59,59,59,200,,,200,59,,,,,,,,,,,,,,,,,,,',
',200,,,,,,200,,,59,,59,,59,,59,,,,,200,200,200,200,200,200,200,200,200',
'200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200,200',
'200,200,200,200,,,200,200,263,,263,263,,200,,,,,,,,,,,,,,,,,,,,263,',
',,,,263,,,,,,,263,,,,,,,263,263,263,263,263,263,263,263,263,263,263',
'263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263,263',
'263,263,,,263,263,263,263,146,,146,146,,,,,,,,,,,,,,,,,,,,,,146,,,,',
',146,,,,,,,,,,,,,,146,146,146,146,146,146,146,146,146,146,146,146,146',
'146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146',
',,146,146,146,146,139,,139,139,,,,,,,,,,,,,,,,,,,,,,139,,,,,,139,,,',
',,,139,,,,,,,139,139,139,139,139,139,139,139,139,139,139,139,139,139',
'139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,139,,,139',
'139,139,139,260,,260,260,,,,,,,,,,,,,,,,,,,,,,260,,,,,,260,,,,,,,,,',
',,,,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260,260',
'260,260,260,260,260,260,260,260,260,260,260,260,260,260,,,260,260,260',
'260,108,,108,108,,,,,,,,,,,,,,,,,,,,,,108,,,,,,108,,,,,,,108,,,,,,,108',
'108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108',
'108,108,108,108,108,108,108,108,108,108,108,108,,,108,108,108,108,244',
',,244,,,,,,,,,,,,,,,,,,,,,,244,,,,,,244,,,,,,,,,,,,,,244,244,244,244',
'244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244',
'244,244,244,244,244,244,244,244,244,,221,244,244,221,,,,,,,,,,,,,,,',
',,,,,,221,,,,,,221,,,,,,,,,,,,,,221,221,221,221,221,221,221,221,221',
'221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221,221',
'221,221,221,221,,134,221,221,134,,,,,,,,,,,,,,,,,,,,,,134,,,,,,134,',
',,,,,,,,,,,,134,134,134,134,134,134,134,134,134,134,134,134,134,134',
'134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,,234',
'134,134,234,,,,,,,,,,,,,,,,,,,,,,234,,,,,,234,,,,,,,,,,,,,,234,234,234',
'234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234,234',
'234,234,234,234,234,234,234,234,234,234,,243,234,234,243,,,,,,,,,,,',
',,,,,,,,,,243,,,,,,243,,,,,,,,,,,,,,243,243,243,243,243,243,243,243',
'243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243,243',
'243,243,243,243,243,,237,243,243,237,,,,,,,,,,,,,,,,,,,,,,237,,,,,,237',
',,,,,,,,,,,,,237,237,237,237,237,237,237,237,237,237,237,237,237,237',
'237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,237,,193',
'237,237,193,,,,,,,,,,,,,,,,,,,,,,193,,,,,,193,,,,,,,,,,,,,,193,193,193',
'193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193,193',
'193,193,193,193,193,193,193,193,193,193,,264,193,193,264,,,,,,,,,,,',
',,,,,,,,,,264,,,,,,264,,,,,,,,,,,,,,264,264,264,264,264,264,264,264',
'264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264,264',
'264,264,264,264,264,,107,264,264,107,,,,,,,,,,,,,,,,,,,,,,107,,,,,,107',
',,,,,,,,,,,,,107,107,107,107,107,107,107,107,107,107,107,107,107,107',
'107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,,2,107',
'107,2,,,,,,,,,,,,,,,,,,,,,,2,,,,,,2,,,,,,,,,,,,,,2,2,2,2,2,2,2,2,2,2',
'2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,,238,2,2,238,,,,,,,,,,,,,,,',
',,,,,,238,,,,,,238,,,,,,,,,,,,,,238,238,238,238,238,238,238,238,238',
'238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238,238',
'238,238,238,238,,165,238,238,165,,,,,,,,,,,,,,,,,,,,,,165,,,,,,165,',
',,,,,,,,,,,,165,165,165,165,165,165,165,165,165,165,165,165,165,165',
'165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,162',
',,162,,,,,,,,,,,,,,,,,,,,,,162,,,,,,162,,,,,,,,,,,,,,162,162,162,162',
'162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162,162',
'162,162,162,162,162,162,162,162,162,196,,,196,,,,,,,,,,,,,,,,,,,,,,196',
',,,,,196,,,,,,,,,,,,,,196,196,196,196,196,196,196,196,196,196,196,196',
'196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196,196',
'196,125,,,,,,125,,,,,,,,,,,,,,125,125,125,125,125,125,125,125,125,125',
'125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125',
'125,125,125,170,,,,,,170,,,,,,,,,,,,,,170,170,170,170,170,170,170,170',
'170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170,170',
'170,170,170,170,170,161,,,,,,161,,,,,,,,,,,,,,161,161,161,161,161,161',
'161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161,161',
'161,161,161,161,161,161,161,147,,,,,,,,,,,,,,147,147,147,147,147,147',
'147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147',
'147,147,147,147,147,147,147,156,,,,,,,,,,,,,,156,156,156,156,156,156',
'156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156',
'156,156,156,156,156,156,156,150,,,,,,,,,,,,,,150,150,150,150,150,150',
'150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150,150',
'150,150,150,150,150,150,150,184,184,184,184,184,184,184,184,184,184',
'184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184,184',
'184,184,184,187,187,187,187,187,187,187,187,187,187,187,187,187,187',
'187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,187,175',
'175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175,175',
'175,175,175,175,175,175,175,175,175,175,175,175,181,181,181,181,181',
'181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181,181',
'181,181,181,181,181,181,181,181,178,178,178,178,178,178,178,178,178',
'178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178,178',
'178,178,178,178' ]
        racc_action_check = arr = Array.new(7905, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   167,   384,  7094,   nil,   251,   nil,   nil,   nil,   335,   239,
   nil,   400,   -40,   nil,   671,   nil,   nil,   755,   nil,   nil,
   nil,   nil,   nil,   nil,   839,   nil,   158,   nil,   nil,  1007,
   nil,   nil,   232,   nil,  1175,   nil,  1259,   nil,  1343,   286,
   nil,  1511,   nil,  1595,     1,  1763,   nil,   nil,   nil,   nil,
   nil,  1847,   nil,   nil,  1931,   nil,   nil,  2015,   nil,  5879,
   nil,   163,    67,   nil,  2351,   nil,   nil,    51,   315,  2603,
   119,  2771,  2855,  2939,  3023,  3107,  3191,  3275,  3359,  3443,
  3527,  3611,  3695,   nil,  3779,  3863,   nil,  3947,   101,  4115,
  4199,  4283,    83,  4451,  4535,  4619,  4703,  4787,  4871,  4955,
  5039,  5123,  5207,  5291,  5375,  5459,  5543,  7018,  6329,    92,
   nil,  2099,   nil,  5795,  5711,   nil,  5627,   300,   nil,   nil,
    21,  4031,   163,     4,   185,  7446,   226,   nil,   nil,   220,
   123,   109,    77,   749,  6562,   399,    52,   923,   nil,  6167,
   136,   nil,    67,   138,   nil,   160,  6086,  7590,    -2,   187,
  7678,     5,   503,  4367,   108,   419,  7634,  1014,   699,   846,
   615,  7546,  7321,   510,  1350,  7246,   678,   443,   594,  1360,
  7496,   264,   930,  1182,    58,  7768,  1266,   -19,  7828,  1279,
    -7,  7798,  1195,   867,  7708,  1098,   432,  7738,   762,   531,
   281,   236,   270,  6866,    38,   -70,  7396,    -3,   316,   nil,
  5926,   nil,   nil,   185,   587,    79,  1091,  1427,   nil,    77,
   -58,   nil,   nil,    -5,     0,  1679,  2519,   119,   nil,   nil,
   -63,  6486,    57,   nil,    14,   nil,     2,   nil,    71,    83,
   nil,   nil,   nil,   nil,  6638,    -1,  2687,  6790,  7170,   132,
   nil,   nil,   nil,  6714,  6410,   nil,  2435,     6,   nil,   nil,
   nil,   nil,  2267,   nil,   nil,   nil,  2183,   -47,   216,   202,
  6248,   nil,   155,  6005,  6942,   nil,   317,   nil,   242,   nil,
   nil,   nil,   nil ]

racc_action_default = [
    -1,  -155,    -4,   -48,  -155,    -8,   -33,   -98,  -155,  -155,
    -9,   -10,  -155,   -11,  -155,   -99,   -27,  -155,   -12,  -100,
   -31,   -28,   -35,   -13,  -155,   -32,   -93,   -36,   -14,  -155,
  -101,   -34,  -155,   -15,  -155,   -37,  -123,   -16,  -155,  -113,
   -38,  -155,   -17,  -155,  -109,  -155,   -18,   -39,   -19,  -115,
   -40,  -155,   -20,   -41,  -155,   -21,   -42,  -155,   -97,  -155,
   -22,  -155,  -155,   -23,    -2,   -24,   -95,    -3,  -114,  -123,
  -155,  -155,  -155,  -155,  -155,  -155,  -155,  -155,  -155,  -155,
  -155,  -155,  -155,   -57,  -155,  -155,   -56,  -155,  -155,  -155,
  -155,  -155,  -155,  -155,  -155,  -155,  -155,  -155,  -155,  -155,
  -155,  -155,  -155,  -155,  -155,  -155,  -155,   -47,  -155,  -129,
   -29,  -155,   -30,  -155,  -123,  -102,  -155,  -155,  -106,  -105,
  -155,  -155,   -93,  -155,   -52,  -131,   -49,   -94,   -92,   -50,
  -136,  -155,   -53,  -155,  -124,   -10,   -55,  -123,  -103,  -155,
   -54,   -46,  -155,  -155,  -110,  -155,  -155,   -88,  -155,   -51,
   -89,  -155,  -123,  -155,    -7,    -6,   -90,   -75,   -64,   -76,
   -65,  -153,   -86,   -77,   -66,   -87,   -78,   -67,   -79,   -68,
  -154,  -155,   -80,   -69,   -58,   -81,   -70,   -59,   -82,   -71,
   -60,   -83,   -72,   -61,   -84,   -73,   -62,   -85,   -74,   -63,
  -148,  -155,  -127,   -25,  -155,  -155,   -43,  -155,  -116,  -104,
  -155,   -91,   -96,  -155,  -155,  -155,  -155,  -155,  -122,  -155,
  -155,  -133,  -108,  -155,  -155,  -155,  -155,  -155,  -132,   273,
  -155,    -5,  -155,  -146,  -148,  -150,  -155,  -152,  -155,  -155,
   -26,  -117,  -107,  -137,  -155,    -8,  -155,  -126,  -125,  -155,
  -118,  -112,  -111,   -44,   -45,  -142,  -155,  -140,  -119,  -134,
  -147,  -151,  -155,  -149,  -130,  -128,  -155,  -155,  -155,  -155,
  -155,  -143,  -155,  -155,  -139,  -135,  -155,  -120,  -155,  -141,
  -145,  -121,  -144 ]

racc_goto_table = [
   109,    64,   118,    70,    68,   141,   138,   144,    67,   128,
   217,   131,   205,   195,   225,   223,   245,    61,   247,   142,
   192,   224,   235,   227,   nil,   nil,   nil,   nil,   nil,   nil,
   118,   nil,   nil,   nil,   nil,   138,   210,   nil,   135,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   261,   nil,   251,   250,
   nil,   220,   222,   nil,   nil,   nil,   nil,   nil,   nil,   118,
   nil,   118,   nil,   nil,   nil,   153,   nil,   171,   155,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   190,
   nil,   nil,   nil,   nil,   nil,   201,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   153,   nil,   nil,   nil,   nil,   198,
   197,   194,   nil,   135,   268,   nil,   118,   nil,   nil,   nil,
   211,   nil,   nil,   nil,   206,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   213,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   153,   155,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   138,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   141,   141,   241,   242,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   118,   118,
   nil,   nil,   nil,   nil,   nil,   155,   206,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   236,   nil,   nil,   nil,
   nil,   206,   nil,   nil,   nil,   nil,   nil,   253,   nil,   254,
   255,   206,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   153,   nil,   nil,
   nil,   259,   197,   nil,   257,   nil,   nil,   nil,   nil,   nil,
   118,   nil,   107,   269,   270,   nil,   108,   118,   155,   272,
   266,   197,   124,   nil,   nil,   125,   nil,   nil,   nil,   nil,
   nil,   nil,   126,   nil,   nil,   nil,   nil,   129,   nil,   nil,
   nil,   nil,   132,   nil,   134,   nil,   136,   nil,   nil,   139,
   nil,   140,   nil,   146,   nil,   nil,   nil,   nil,   nil,   147,
   nil,   nil,   148,   nil,   nil,   149,   nil,   150,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   134,   nil,   156,
   157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
   167,   nil,   168,   169,   nil,   170,   nil,   172,   173,   174,
   175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
   185,   186,   187,   188,   189,   nil,   nil,   nil,   nil,   193,
   nil,   nil,   134,   nil,   196,   nil,   nil,   nil,   nil,   200,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   134,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   134,   nil,   nil,   221,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   234,   nil,   237,   238,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   243,   244,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   260,   nil,   nil,   nil,   nil,   nil,
   263,   nil,   nil,   nil,   264 ]

racc_goto_check = [
    22,     2,    11,     7,    32,    21,    31,    25,     3,    27,
    23,    38,    39,    36,    44,    42,    41,     1,    40,    34,
    37,    43,     5,    45,   nil,   nil,   nil,   nil,   nil,   nil,
    11,   nil,   nil,   nil,   nil,    31,    36,   nil,     7,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    41,   nil,    44,    42,
   nil,    36,    39,   nil,   nil,   nil,   nil,   nil,   nil,    11,
   nil,    11,   nil,   nil,   nil,     2,   nil,    38,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    22,
   nil,   nil,   nil,   nil,   nil,    27,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,     7,
    32,     3,   nil,     7,    23,   nil,    11,   nil,   nil,   nil,
    22,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,     2,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    21,    21,    25,    25,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    11,    11,
   nil,   nil,   nil,   nil,   nil,     2,     2,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,
   nil,     2,   nil,   nil,   nil,   nil,   nil,    22,   nil,    22,
    22,     2,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,   nil,
   nil,     7,    32,   nil,     3,   nil,   nil,   nil,   nil,   nil,
    11,   nil,     4,    22,    22,   nil,     4,    11,     2,    22,
     7,    32,     4,   nil,   nil,     4,   nil,   nil,   nil,   nil,
   nil,   nil,     4,   nil,   nil,   nil,   nil,     4,   nil,   nil,
   nil,   nil,     4,   nil,     4,   nil,     4,   nil,   nil,     4,
   nil,     4,   nil,     4,   nil,   nil,   nil,   nil,   nil,     4,
   nil,   nil,     4,   nil,   nil,     4,   nil,     4,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     4,   nil,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,   nil,     4,     4,   nil,     4,   nil,     4,     4,     4,
     4,     4,     4,     4,     4,     4,     4,     4,     4,     4,
     4,     4,     4,     4,     4,   nil,   nil,   nil,   nil,     4,
   nil,   nil,     4,   nil,     4,   nil,   nil,   nil,   nil,     4,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     4,   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     4,   nil,     4,     4,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     4,     4,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil,   nil,
     4,   nil,   nil,   nil,     4 ]

racc_goto_pointer = [
   nil,    17,     1,     8,   248,  -182,   nil,     2,   nil,   nil,
   nil,    -9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -39,    -9,  -136,   nil,   -37,   nil,   -17,   nil,   nil,
   nil,   -33,     3,   nil,   -25,   nil,  -101,   -89,   -21,  -119,
  -199,  -201,  -175,  -169,  -176,  -167 ]

racc_goto_default = [
   nil,   nil,   112,   154,     2,     5,    10,    11,    13,    18,
    23,    28,    33,    37,    42,    46,    48,    52,    55,    60,
    63,    65,   127,   111,     7,   nil,    12,   nil,    15,    19,
    30,   115,    39,   119,   nil,    49,   133,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 92, :_reduce_1,
  1, 92, :_reduce_2,
  1, 92, :_reduce_3,
  1, 94, :_reduce_4,
  3, 94, :_reduce_5,
  2, 94, :_reduce_6,
  2, 94, :_reduce_7,
  1, 95, :_reduce_none,
  1, 95, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 96, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  1, 97, :_reduce_none,
  2, 113, :_reduce_25,
  3, 113, :_reduce_26,
  1, 93, :_reduce_none,
  1, 93, :_reduce_none,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  1, 115, :_reduce_31,
  1, 115, :_reduce_32,
  1, 115, :_reduce_33,
  1, 115, :_reduce_34,
  1, 115, :_reduce_35,
  1, 115, :_reduce_36,
  1, 115, :_reduce_37,
  1, 115, :_reduce_38,
  1, 115, :_reduce_39,
  1, 115, :_reduce_40,
  1, 115, :_reduce_41,
  1, 115, :_reduce_42,
  3, 103, :_reduce_43,
  3, 116, :_reduce_44,
  3, 116, :_reduce_45,
  1, 116, :_reduce_46,
  2, 107, :_reduce_47,
  1, 112, :_reduce_48,
  2, 101, :_reduce_49,
  2, 101, :_reduce_50,
  2, 101, :_reduce_51,
  2, 101, :_reduce_52,
  2, 101, :_reduce_53,
  2, 101, :_reduce_54,
  2, 101, :_reduce_55,
  2, 101, :_reduce_56,
  2, 101, :_reduce_57,
  3, 101, :_reduce_58,
  3, 101, :_reduce_59,
  3, 101, :_reduce_60,
  3, 101, :_reduce_61,
  3, 101, :_reduce_62,
  3, 101, :_reduce_63,
  3, 101, :_reduce_64,
  3, 101, :_reduce_65,
  3, 101, :_reduce_66,
  3, 101, :_reduce_67,
  3, 101, :_reduce_68,
  3, 101, :_reduce_69,
  3, 101, :_reduce_70,
  3, 101, :_reduce_71,
  3, 101, :_reduce_72,
  3, 101, :_reduce_73,
  3, 101, :_reduce_74,
  3, 101, :_reduce_75,
  3, 101, :_reduce_76,
  3, 101, :_reduce_77,
  3, 101, :_reduce_78,
  3, 101, :_reduce_79,
  3, 101, :_reduce_80,
  3, 101, :_reduce_81,
  3, 101, :_reduce_82,
  3, 101, :_reduce_83,
  3, 101, :_reduce_84,
  3, 101, :_reduce_85,
  3, 101, :_reduce_86,
  3, 101, :_reduce_87,
  2, 101, :_reduce_88,
  2, 101, :_reduce_89,
  3, 101, :_reduce_90,
  3, 100, :_reduce_91,
  2, 100, :_reduce_92,
  0, 118, :_reduce_93,
  1, 118, :_reduce_94,
  1, 117, :_reduce_95,
  3, 117, :_reduce_96,
  1, 98, :_reduce_97,
  1, 98, :_reduce_98,
  1, 98, :_reduce_99,
  1, 98, :_reduce_100,
  1, 98, :_reduce_101,
  2, 98, :_reduce_102,
  2, 98, :_reduce_103,
  2, 122, :_reduce_104,
  1, 122, :_reduce_105,
  1, 122, :_reduce_106,
  3, 124, :_reduce_107,
  3, 120, :_reduce_108,
  0, 125, :_reduce_109,
  1, 125, :_reduce_110,
  3, 125, :_reduce_111,
  3, 125, :_reduce_112,
  1, 99, :_reduce_113,
  2, 99, :_reduce_114,
  1, 99, :_reduce_115,
  3, 111, :_reduce_116,
  4, 123, :_reduce_117,
  4, 123, :_reduce_118,
  4, 126, :_reduce_119,
  6, 102, :_reduce_120,
  7, 102, :_reduce_121,
  3, 119, :_reduce_122,
  0, 127, :_reduce_123,
  1, 127, :_reduce_124,
  3, 127, :_reduce_125,
  3, 127, :_reduce_126,
  3, 105, :_reduce_127,
  5, 105, :_reduce_128,
  0, 128, :_reduce_129,
  3, 128, :_reduce_130,
  2, 106, :_reduce_131,
  3, 121, :_reduce_132,
  3, 108, :_reduce_133,
  5, 109, :_reduce_134,
  6, 109, :_reduce_135,
  1, 129, :_reduce_136,
  3, 129, :_reduce_137,
  2, 130, :_reduce_138,
  4, 130, :_reduce_139,
  4, 110, :_reduce_140,
  6, 110, :_reduce_141,
  1, 131, :_reduce_142,
  2, 131, :_reduce_143,
  4, 132, :_reduce_144,
  4, 133, :_reduce_145,
  1, 134, :_reduce_146,
  2, 134, :_reduce_147,
  0, 135, :_reduce_148,
  2, 135, :_reduce_149,
  1, 136, :_reduce_150,
  2, 136, :_reduce_151,
  4, 104, :_reduce_152,
  3, 104, :_reduce_153,
  3, 104, :_reduce_154 ]

racc_reduce_n = 155

racc_shift_n = 273

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :THEN => 4,
  :UNLESS => 5,
  :NUMBER => 6,
  :STRING => 7,
  :REGEX => 8,
  :TRUE => 9,
  :FALSE => 10,
  :YES => 11,
  :NO => 12,
  :ON => 13,
  :OFF => 14,
  :IDENTIFIER => 15,
  :PROPERTY_ACCESS => 16,
  :CODE => 17,
  :PARAM => 18,
  :NEW => 19,
  :RETURN => 20,
  :TRY => 21,
  :CATCH => 22,
  :FINALLY => 23,
  :THROW => 24,
  :BREAK => 25,
  :CONTINUE => 26,
  :FOR => 27,
  :IN => 28,
  :WHILE => 29,
  :SWITCH => 30,
  :WHEN => 31,
  :DELETE => 32,
  :INSTANCEOF => 33,
  :TYPEOF => 34,
  :SUPER => 35,
  :EXTENDS => 36,
  :NEWLINE => 37,
  :COMMENT => 38,
  :JS => 39,
  :INDENT => 40,
  :OUTDENT => 41,
  :UMINUS => 42,
  :NOT => 43,
  "!" => 44,
  "!!" => 45,
  "~" => 46,
  "++" => 47,
  "--" => 48,
  "*" => 49,
  "/" => 50,
  "%" => 51,
  "+" => 52,
  "-" => 53,
  "<<" => 54,
  ">>" => 55,
  ">>>" => 56,
  "&" => 57,
  "|" => 58,
  "^" => 59,
  "<=" => 60,
  "<" => 61,
  ">" => 62,
  ">=" => 63,
  "==" => 64,
  "!=" => 65,
  :IS => 66,
  :ISNT => 67,
  "&&" => 68,
  "||" => 69,
  :AND => 70,
  :OR => 71,
  "-=" => 72,
  "+=" => 73,
  "/=" => 74,
  "*=" => 75,
  "%=" => 76,
  "." => 77,
  :ASSIGN => 78,
  "||=" => 79,
  "&&=" => 80,
  "\n" => 81,
  ";" => 82,
  "=>" => 83,
  "," => 84,
  "[" => 85,
  "]" => 86,
  "{" => 87,
  "}" => 88,
  "(" => 89,
  ")" => 90 }

racc_nt_base = 91

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "THEN",
  "UNLESS",
  "NUMBER",
  "STRING",
  "REGEX",
  "TRUE",
  "FALSE",
  "YES",
  "NO",
  "ON",
  "OFF",
  "IDENTIFIER",
  "PROPERTY_ACCESS",
  "CODE",
  "PARAM",
  "NEW",
  "RETURN",
  "TRY",
  "CATCH",
  "FINALLY",
  "THROW",
  "BREAK",
  "CONTINUE",
  "FOR",
  "IN",
  "WHILE",
  "SWITCH",
  "WHEN",
  "DELETE",
  "INSTANCEOF",
  "TYPEOF",
  "SUPER",
  "EXTENDS",
  "NEWLINE",
  "COMMENT",
  "JS",
  "INDENT",
  "OUTDENT",
  "UMINUS",
  "NOT",
  "\"!\"",
  "\"!!\"",
  "\"~\"",
  "\"++\"",
  "\"--\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"<<\"",
  "\">>\"",
  "\">>>\"",
  "\"&\"",
  "\"|\"",
  "\"^\"",
  "\"<=\"",
  "\"<\"",
  "\">\"",
  "\">=\"",
  "\"==\"",
  "\"!=\"",
  "IS",
  "ISNT",
  "\"&&\"",
  "\"||\"",
  "AND",
  "OR",
  "\"-=\"",
  "\"+=\"",
  "\"/=\"",
  "\"*=\"",
  "\"%=\"",
  "\".\"",
  "ASSIGN",
  "\"||=\"",
  "\"&&=\"",
  "\"\\n\"",
  "\";\"",
  "\"=>\"",
  "\",\"",
  "\"[\"",
  "\"]\"",
  "\"{\"",
  "\"}\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Root",
  "Terminator",
  "Expressions",
  "Expression",
  "PureExpression",
  "Statement",
  "Value",
  "Call",
  "Code",
  "Operation",
  "Range",
  "Assign",
  "If",
  "Try",
  "Throw",
  "Return",
  "While",
  "For",
  "Switch",
  "Extends",
  "Comment",
  "Block",
  "Then",
  "Literal",
  "AssignObj",
  "ParamList",
  "CodeBody",
  "Array",
  "Object",
  "Parenthetical",
  "Accessor",
  "Invocation",
  "Index",
  "AssignList",
  "Super",
  "ArgList",
  "Catch",
  "ForVariables",
  "ForSource",
  "Whens",
  "When",
  "ElsIf",
  "ElsIfs",
  "ElseBody",
  "IfEnd" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_1(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 48)
  def _reduce_2(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 49)
  def _reduce_3(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_4(val, _values, result)
     result = Expressions.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_5(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_6(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 57)
  def _reduce_7(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_25(val, _values, result)
     result = Expressions.new([val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 91)
  def _reduce_26(val, _values, result)
     result = val[1] 
    result
  end
.,.,

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

module_eval(<<'.,.,', 'grammar.y', 108)
  def _reduce_31(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 109)
  def _reduce_32(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 110)
  def _reduce_33(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 111)
  def _reduce_34(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_35(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_36(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_37(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_38(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_39(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_40(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_41(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_42(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_43(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_44(val, _values, result)
     result = AssignNode.new(ValueNode.new(val[0]), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 130)
  def _reduce_45(val, _values, result)
     result = AssignNode.new(ValueNode.new(LiteralNode.new(val[0])), val[2], :object) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 131)
  def _reduce_46(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 136)
  def _reduce_47(val, _values, result)
     result = ReturnNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 141)
  def _reduce_48(val, _values, result)
     result = CommentNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_49(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 149)
  def _reduce_50(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 150)
  def _reduce_51(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 151)
  def _reduce_52(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 152)
  def _reduce_53(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 153)
  def _reduce_54(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 154)
  def _reduce_55(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_56(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 156)
  def _reduce_57(val, _values, result)
     result = OpNode.new(val[1], val[0], nil, true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 158)
  def _reduce_58(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 159)
  def _reduce_59(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_60(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 162)
  def _reduce_61(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 163)
  def _reduce_62(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 165)
  def _reduce_63(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_64(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 167)
  def _reduce_65(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 169)
  def _reduce_66(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 170)
  def _reduce_67(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_68(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 173)
  def _reduce_69(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 174)
  def _reduce_70(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 175)
  def _reduce_71(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 176)
  def _reduce_72(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 178)
  def _reduce_73(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 179)
  def _reduce_74(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 180)
  def _reduce_75(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 181)
  def _reduce_76(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 183)
  def _reduce_77(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 184)
  def _reduce_78(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 185)
  def _reduce_79(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 186)
  def _reduce_80(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 188)
  def _reduce_81(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 189)
  def _reduce_82(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 190)
  def _reduce_83(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 191)
  def _reduce_84(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 192)
  def _reduce_85(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 193)
  def _reduce_86(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 194)
  def _reduce_87(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 196)
  def _reduce_88(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 197)
  def _reduce_89(val, _values, result)
     result = OpNode.new(val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 198)
  def _reduce_90(val, _values, result)
     result = OpNode.new(val[1], val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 203)
  def _reduce_91(val, _values, result)
     result = CodeNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 204)
  def _reduce_92(val, _values, result)
     result = CodeNode.new([], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 209)
  def _reduce_93(val, _values, result)
     result = Expressions.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 210)
  def _reduce_94(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 215)
  def _reduce_95(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 216)
  def _reduce_96(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 221)
  def _reduce_97(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 222)
  def _reduce_98(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 223)
  def _reduce_99(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 224)
  def _reduce_100(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 225)
  def _reduce_101(val, _values, result)
     result = ValueNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 226)
  def _reduce_102(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 227)
  def _reduce_103(val, _values, result)
     result = ValueNode.new(val[0], [val[1]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 232)
  def _reduce_104(val, _values, result)
     result = AccessorNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 233)
  def _reduce_105(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 234)
  def _reduce_106(val, _values, result)
     result = SliceNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 239)
  def _reduce_107(val, _values, result)
     result = IndexNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 244)
  def _reduce_108(val, _values, result)
     result = ObjectNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 249)
  def _reduce_109(val, _values, result)
     result = []
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 250)
  def _reduce_110(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 251)
  def _reduce_111(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 252)
  def _reduce_112(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 257)
  def _reduce_113(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 258)
  def _reduce_114(val, _values, result)
     result = val[1].new_instance 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 259)
  def _reduce_115(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 264)
  def _reduce_116(val, _values, result)
     result = ExtendsNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 269)
  def _reduce_117(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 270)
  def _reduce_118(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 275)
  def _reduce_119(val, _values, result)
     result = CallNode.new(:super, val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 280)
  def _reduce_120(val, _values, result)
     result = RangeNode.new(val[1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 281)
  def _reduce_121(val, _values, result)
     result = RangeNode.new(val[1], val[5], true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 286)
  def _reduce_122(val, _values, result)
     result = ArrayNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 291)
  def _reduce_123(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 292)
  def _reduce_124(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 293)
  def _reduce_125(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 294)
  def _reduce_126(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 299)
  def _reduce_127(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 301)
  def _reduce_128(val, _values, result)
     result = TryNode.new(val[1], val[2][0], val[2][1], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 306)
  def _reduce_129(val, _values, result)
     result = [nil, nil] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 307)
  def _reduce_130(val, _values, result)
     result = [val[1], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 312)
  def _reduce_131(val, _values, result)
     result = ThrowNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 317)
  def _reduce_132(val, _values, result)
     result = ParentheticalNode.new(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 322)
  def _reduce_133(val, _values, result)
     result = WhileNode.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 329)
  def _reduce_134(val, _values, result)
     result = ForNode.new(val[0], val[3][0], val[2][0], val[3][1], val[2][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 331)
  def _reduce_135(val, _values, result)
     result = ForNode.new(val[4], val[2][0], val[1][0], val[2][1], val[1][1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 336)
  def _reduce_136(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 337)
  def _reduce_137(val, _values, result)
     result = [val[0], val[2]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 342)
  def _reduce_138(val, _values, result)
     result = [val[1]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 344)
  def _reduce_139(val, _values, result)
     result = [val[1], val[3]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 350)
  def _reduce_140(val, _values, result)
     result = val[3].rewrite_condition(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 352)
  def _reduce_141(val, _values, result)
     result = val[3].rewrite_condition(val[1]).add_else(val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 357)
  def _reduce_142(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 358)
  def _reduce_143(val, _values, result)
     result = val[0] << val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 363)
  def _reduce_144(val, _values, result)
     result = IfNode.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 371)
  def _reduce_145(val, _values, result)
     result = IfNode.new(val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 376)
  def _reduce_146(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 377)
  def _reduce_147(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 382)
  def _reduce_148(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 383)
  def _reduce_149(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 388)
  def _reduce_150(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 389)
  def _reduce_151(val, _values, result)
     result = val[0].add_else(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 394)
  def _reduce_152(val, _values, result)
     result = IfNode.new(val[1], val[3], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 395)
  def _reduce_153(val, _values, result)
     result = IfNode.new(val[2], Expressions.new([val[0]]), nil, {:statement => true}) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 396)
  def _reduce_154(val, _values, result)
     result = IfNode.new(val[2], Expressions.new([val[0]]), nil, {:statement => true, :invert => true}) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser

end
